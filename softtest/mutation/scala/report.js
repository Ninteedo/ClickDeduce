document.querySelector('mutation-test-report-app').report = {"$schema":"https://git.io/mutation-testing-schema","schemaVersion":"2","thresholds":{"high":80,"low":60},"projectRoot":"D:\\Users\\RIchard\\Documents\\Uni\\Inf\\Project\\ClickDeduce","files":{"src/main/scala/app/WebServer.scala":{"source":"package app\r\n\r\nimport akka.actor.ActorSystem\r\nimport akka.http.scaladsl.Http\r\nimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport\r\nimport akka.http.scaladsl.model.{HttpEntity, HttpResponse, StatusCodes}\r\nimport akka.http.scaladsl.server.Directives.*\r\nimport akka.http.scaladsl.server.{ExceptionHandler, Route}\r\nimport akka.http.scaladsl.settings.ServerSettings\r\nimport languages.*\r\nimport scalatags.Text.TypedTag\r\nimport scalatags.Text.all.*\r\nimport spray.json.{DefaultJsonProtocol, RootJsonFormat}\r\n\r\nimport java.io.File\r\nimport scala.concurrent.ExecutionContextExecutor\r\nimport scala.sys.process.Process\r\n\r\ncase class EvalRequest(langName: String)\r\n\r\ncase class NodeResponse(nodeString: String, html: String)\r\n\r\ncase class ActionRequest(\r\n  langName: String,\r\n  modeName: String,\r\n  actionName: String,\r\n  nodeString: String,\r\n  treePath: String,\r\n  extraArgs: List[String]\r\n)\r\n\r\ncase class LangSelectorRequest()\r\n\r\ncase class LangSelectorResponse(langSelectorHtml: String)\r\n\r\ntrait JsonSupport extends DefaultJsonProtocol with SprayJsonSupport {\r\n  implicit val evalRequestFormat: RootJsonFormat[EvalRequest] = jsonFormat1(EvalRequest.apply)\r\n  implicit val nodeResponseFormat: RootJsonFormat[NodeResponse] = jsonFormat2(NodeResponse.apply)\r\n  implicit val actionRequestFormat: RootJsonFormat[ActionRequest] = jsonFormat6(ActionRequest.apply)\r\n  implicit val langSelectorRequestFormat: RootJsonFormat[LangSelectorRequest] = jsonFormat0(LangSelectorRequest.apply)\r\n  implicit val langSelectorResponseFormat: RootJsonFormat[LangSelectorResponse] = jsonFormat1(\r\n    LangSelectorResponse.apply\r\n  )\r\n}\r\n\r\nval customExceptionHandler: ExceptionHandler = ExceptionHandler { case exception: Exception =>\r\n  extractUri { uri =>\r\n    exception.printStackTrace()\r\n\r\n    val statusCode = exception match {\r\n      case _: IllegalArgumentException => StatusCodes.BadRequest\r\n      case _                           => StatusCodes.InternalServerError\r\n    }\r\n\r\n    complete(HttpResponse(statusCode, entity = exception.toString))\r\n  }\r\n}\r\n\r\nclass WebServer extends JsonSupport {\r\n  private val webappDirectory: String = \"webapp\"\r\n  private val distDirectory: String = s\"$webappDirectory/dist\"\r\n  private val imagesDirectory: String = s\"$webappDirectory/images\"\r\n  private val indexPage: String = s\"$distDirectory/index.html\"\r\n\r\n  private var _isOnline: Boolean = false\r\n\r\n  def isOnline: Boolean = _isOnline\r\n\r\n  private def isOnline_=(value: Boolean): Unit = _isOnline = value\r\n\r\n  private var _portNumber: Int = 27019\r\n\r\n  def portNumber: Int = _portNumber\r\n\r\n  def portNumber_=(value: Int): Unit = {\r\n    if (isOnline) throw new IllegalStateException(\"Cannot change port number while server is online\")\r\n    if (value <= 0 || value > 65535) {\r\n      throw new IllegalArgumentException(\"Port number must be between 1 and 65535\")\r\n    }\r\n    _portNumber = value\r\n  }\r\n\r\n  private var _bindingAddress: String = \"0.0.0.0\"\r\n\r\n  def bindingAddress: String = _bindingAddress\r\n\r\n  def bindingAddress_=(value: String): Unit = {\r\n    def invalidOctet(octet: Int): Boolean = {\r\n      octet < 0 || octet > 255 || octet.toString.toInt != octet\r\n    }\r\n\r\n    if (isOnline) throw new IllegalStateException(\"Cannot change binding address while server is online\")\r\n    val ipAddressPattern = \"\"\"^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$\"\"\".r\r\n    ipAddressPattern.findFirstMatchIn(value) match {\r\n      case Some(matchResult) =>\r\n        val octets = matchResult.subgroups.map(_.toInt)\r\n        if (octets.exists(invalidOctet)) {\r\n          throw new IllegalArgumentException(\"Invalid IP address\")\r\n        }\r\n        _bindingAddress = s\"${octets.mkString(\".\")}\"\r\n      case None => throw new IllegalArgumentException(\"Invalid IP address\")\r\n    }\r\n  }\r\n\r\n  private var _skipBundleScripts: Boolean = false\r\n\r\n  def skipBundleScripts: Boolean = _skipBundleScripts\r\n\r\n  def skipBundleScripts_=(value: Boolean): Unit = {\r\n    if (isOnline) throw new IllegalStateException(\"Cannot change skipBundleScripts while server is online\")\r\n    _skipBundleScripts = value\r\n  }\r\n\r\n  def runServer(args: Array[String]): Unit = {\r\n    val parseSuccess: Boolean = parseArgs(args)\r\n    if (!parseSuccess) {\r\n      println(\"Failed to parse arguments\")\r\n      System.exit(1)\r\n    }\r\n\r\n    implicit val system: ActorSystem = ActorSystem(\"ClickDeduceWebServer\")\r\n    implicit val executionContext: ExecutionContextExecutor = system.dispatcher\r\n\r\n    if (skipBundleScripts) {\r\n      println(\"Script bundling was skipped\\n\")\r\n    } else {\r\n      bundleScripts()\r\n      println(\"\\nSuccessfully bundled scripts\\n\\n\")\r\n    }\r\n\r\n    val defaultSettings = ServerSettings(system)\r\n    val customSettings = defaultSettings.withTransparentHeadRequests(true)\r\n\r\n    isOnline = true\r\n    val bindingFuture = Http().newServerAt(bindingAddress, portNumber).withSettings(customSettings).bind(requestRoute)\r\n\r\n    println(s\"Server online at http://localhost:$portNumber/\")\r\n    // StdIn.readLine()\r\n\r\n    while (isOnline) {\r\n      Thread.sleep(1000)\r\n    }\r\n\r\n    bindingFuture\r\n      .flatMap(_.unbind())\r\n      .onComplete(_ => system.terminate())\r\n    isOnline = false\r\n  }\r\n\r\n  def parseArgs(args: Array[String]): Boolean = {\r\n    val parser = new scopt.OptionParser[Unit](\"WebServer\") {\r\n      opt[Int](\"port\")\r\n        .action((x, _) => portNumber = x)\r\n        .text(\"Port number to bind\")\r\n\r\n      opt[String](\"address\")\r\n        .action((x, _) => bindingAddress = x)\r\n        .text(\"Binding address\")\r\n\r\n      opt[Unit](\"skip-bundle-scripts\")\r\n        .action((_, _) => skipBundleScripts = true)\r\n        .text(\"Skip bundling scripts\")\r\n    }\r\n\r\n    parser.parse(args, ()).isDefined\r\n  }\r\n\r\n  private def bundleScripts(): Unit = {\r\n    println(\"Bundling scripts...\")\r\n\r\n    val osName = System.getProperty(\"os.name\").toLowerCase\r\n    val command = if (osName.contains(\"win\")) \"cmd.exe /c npm run build\" else \"npm run build\"\r\n\r\n    val process = Process(command, new File(\"webapp\")).!\r\n\r\n    if (process != 0) {\r\n      System.exit(process)\r\n    }\r\n  }\r\n\r\n  private def resourceNotFoundResponse: HttpResponse =\r\n    HttpResponse(StatusCodes.NotFound, entity = HttpEntity(\"The requested resource could not be found.\"))\r\n\r\n  val requestRoute: Route = handleExceptions(customExceptionHandler) {\r\n    post {\r\n      path(\"start-node-blank\") {\r\n        entity(as[EvalRequest]) { request =>\r\n          val lang = WebServer.getLanguage(request.langName)\r\n          val tree = lang.ExprChoiceNode()\r\n          val response = NodeResponse(tree.toString, tree.toHtml(lang.DisplayMode.Edit).toString)\r\n          complete(response)\r\n        }\r\n      } ~\r\n        path(\"process-action\") {\r\n          entity(as[ActionRequest]) { request =>\r\n            val lang = WebServer.getLanguage(request.langName)\r\n            val action = lang.createAction(\r\n              request.actionName,\r\n              request.nodeString,\r\n              request.treePath,\r\n              request.extraArgs,\r\n              request.modeName\r\n            )\r\n            val updatedTree = action.newTree\r\n            val displayMode: lang.DisplayMode = lang.DisplayMode.fromString(request.modeName)\r\n            val response = NodeResponse(updatedTree.toString, updatedTree.toHtml(displayMode).toString)\r\n            complete(response)\r\n          }\r\n        }\r\n    } ~\r\n      get {\r\n        path(\"get-lang-selector\") {\r\n          val langSelector: TypedTag[String] = select(\r\n            id := \"lang-selector\",\r\n            name := \"lang-name\",\r\n            WebServer.knownLanguages.map(lang => option(value := WebServer.getLanguageName(lang), WebServer.getLanguageName(lang)))\r\n          )\r\n          val response = LangSelectorResponse(langSelector.toString)\r\n          complete(response)\r\n        } ~\r\n          pathEndOrSingleSlash { getFromFile(indexPage) } ~\r\n          pathPrefix(\"dist\") { getFromDirectory(distDirectory) } ~\r\n          pathPrefix(\"images\") { getFromDirectory(imagesDirectory) } ~\r\n          pathPrefix(\"scripts\") { complete(resourceNotFoundResponse) } ~\r\n          pathPrefix(\"styles\") { complete(resourceNotFoundResponse) } ~\r\n          pathPrefix(\"pages\") { complete(resourceNotFoundResponse) } ~\r\n          getFromDirectory(distDirectory)\r\n      }\r\n  }\r\n}\r\n\r\nobject WebServer {\r\n  def main(args: Array[String]): Unit = {\r\n    val server = new WebServer()\r\n    server.runServer(args)\r\n  }\r\n\r\n  val knownLanguages: List[ClickDeduceLanguage] = List(LArith(), LIf(), LLet(), LLam(), LRec())\r\n\r\n  def getLanguage(langName: String): ClickDeduceLanguage = knownLanguages.find(getLanguageName(_) == langName) match {\r\n    case Some(lang) => lang\r\n    case None => throw new IllegalArgumentException(s\"Unknown language: $langName\")\r\n  }\r\n\r\n  def getLanguageName(lang: ClickDeduceLanguage): String = lang.getClass.getSimpleName.stripSuffix(\"$\")\r\n}\r\n","mutants":[{"id":"100","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":240,"column":99},"end":{"line":240,"column":101}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should return an error response for an invalid language: 200 OK was equal to 200 OK","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["257"],"testsCompleted":65},{"id":"101","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":78,"column":42},"end":{"line":78,"column":83}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"102","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":83,"column":41},"end":{"line":83,"column":50}},"status":"Killed","statusReason":"Binding address should have a default value: \"[]\" was not equal to \"[0.0.0.0]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["15"],"testsCompleted":15},{"id":"103","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":212,"column":14},"end":{"line":212,"column":33}},"status":"Killed","statusReason":"The get-lang-selector endpoint should handle GET requests should return a successful response: Request was rejected\n\nThe get-lang-selector endpoint should handle GET requests should return a response with langSelectorHtml field: Request was rejected\n\nThe get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should has no divs: Request was rejected\n\nThe get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should has a single select element: Request was rejected\n\nThe get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should the select element has an option for each language: Request was rejected\n\nThe get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should each option in the select has value and text matching the languages in order: Request was rejected\n\nThe GET requests should return appropriate files should return the index.html file for the '/' path: application/json was not equal to text/html; charset=UTF-8","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["246","247","248","249","250","251","261"],"testsCompleted":35},{"id":"104","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":222,"column":22},"end":{"line":222,"column":28}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the contents of 'dist/bundle.js': Request was rejected","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["263"],"testsCompleted":35},{"id":"105","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":223,"column":22},"end":{"line":223,"column":30}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the 'images/zoom_to_fit.svg' file: Request was rejected","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["262"],"testsCompleted":35},{"id":"106","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":224,"column":22},"end":{"line":224,"column":31}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js': 404 Not Found was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["264"],"testsCompleted":35},{"id":"107","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":225,"column":22},"end":{"line":225,"column":30}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js': 404 Not Found was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["264"],"testsCompleted":35},{"id":"108","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":226,"column":22},"end":{"line":226,"column":29}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js': 404 Not Found was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["264"],"testsCompleted":35},{"id":"109","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":117,"column":15},"end":{"line":117,"column":42}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"110","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":152,"column":16},"end":{"line":152,"column":22}},"status":"Killed","statusReason":"Port number should be settable by command line argument: 27019 was not equal to 6771\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["13","24"],"testsCompleted":15},{"id":"111","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":154,"column":15},"end":{"line":154,"column":36}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"112","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":105,"column":45},"end":{"line":105,"column":50}},"status":"Killed","statusReason":"Skip bundle scripts option should default to false: true was not equal to false","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["21"],"testsCompleted":15},{"id":"113","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":147,"column":16},"end":{"line":147,"column":21}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"114","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":140,"column":12},"end":{"line":140,"column":20}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"115","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":169,"column":13},"end":{"line":169,"column":34}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"116","mutatorName":"EqualityOperator","replacement":"<=","location":{"start":{"line":89,"column":13},"end":{"line":89,"column":14}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[255.255.255.255]\" was not equal to \"[127.0.0.1]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 127.0.0.1\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[34.0.0.1]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"117","mutatorName":"EqualityOperator","replacement":">","location":{"start":{"line":89,"column":13},"end":{"line":89,"column":14}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"118","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":89,"column":13},"end":{"line":89,"column":14}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[255.255.255.255]\" was not equal to \"[127.0.0.1]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 127.0.0.1\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[34.0.0.1]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"119","mutatorName":"LogicalOperator","replacement":"&&","location":{"start":{"line":89,"column":17},"end":{"line":89,"column":19}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"120","mutatorName":"EqualityOperator","replacement":">=","location":{"start":{"line":89,"column":26},"end":{"line":89,"column":27}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","19"],"testsCompleted":15},{"id":"121","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":89,"column":26},"end":{"line":89,"column":27}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[255.255.255.255]\" was not equal to \"[127.0.0.1]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 127.0.0.1\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"122","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":89,"column":26},"end":{"line":89,"column":27}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","17","19","20"],"testsCompleted":15},{"id":"123","mutatorName":"LogicalOperator","replacement":"&&","location":{"start":{"line":89,"column":32},"end":{"line":89,"column":34}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"124","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":89,"column":56},"end":{"line":89,"column":58}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"125","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":124,"column":9},"end":{"line":124,"column":26}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"126","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":124,"column":9},"end":{"line":124,"column":26}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"127","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":132,"column":70},"end":{"line":132,"column":74}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"128","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":61,"column":39},"end":{"line":61,"column":63}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the index.html file for the '/' path: Request was rejected\n\nThe GET requests should return appropriate files should return the contents of 'dist/bundle.js': Request was rejected\n\nThe GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js': Request was rejected","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["261","263","264"],"testsCompleted":50},{"id":"129","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":97,"column":13},"end":{"line":97,"column":40}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"130","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":97,"column":13},"end":{"line":97,"column":40}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"131","mutatorName":"MethodExpression","replacement":"octets.forall(invalidOctet)","location":{"start":{"line":97,"column":13},"end":{"line":97,"column":40}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"132","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":116,"column":9},"end":{"line":116,"column":22}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"133","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":116,"column":9},"end":{"line":116,"column":22}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"35","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":63,"column":35},"end":{"line":63,"column":63}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the index.html file for the '/' path: Request was rejected","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["261"],"testsCompleted":50},{"id":"36","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":65,"column":36},"end":{"line":65,"column":41}},"status":"Killed","statusReason":"Port number should be settable: IllegalStateException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Cannot change port number while server is online\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = 1\n  )\n\nPort number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but java.lang.IllegalStateException was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should be settable by command line argument: 27019 was not equal to 6771\n\nBinding address should be settable: IllegalStateException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Cannot change binding address while server is online\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but java.lang.IllegalStateException was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should remove leading zeroes: Cannot change binding address while server is online\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nSkip bundle scripts option should be settable: Cannot change skipBundleScripts while server is online\n\nSkip bundle scripts option should be settable by command line argument: false was not equal to true\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["11","12","13","16","17","18","19","22","23","24"],"testsCompleted":15},{"id":"37","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":156,"column":19},"end":{"line":156,"column":28}},"status":"Killed","statusReason":"Binding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["19","24"],"testsCompleted":15},{"id":"38","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":158,"column":15},"end":{"line":158,"column":32}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"39","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":137,"column":13},"end":{"line":137,"column":62}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"40","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":101,"column":55},"end":{"line":101,"column":75}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"41","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":100,"column":27},"end":{"line":100,"column":53}},"status":"Killed","statusReason":"Binding address should be settable: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: \"[]\" was not equal to \"[0.0.0.0]\"\n  Location: (ArgsHandlingSpec.scala:78)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: \"[]\" was not equal to \"[12.6.0.1]\"\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[]\" was not equal to \"[0.0.0.0]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nMultiple options should be settable by command line arguments: \"[]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"42","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":100,"column":47},"end":{"line":100,"column":50}},"status":"Killed","statusReason":"Binding address should be settable: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: \"0[00]0\" was not equal to \"0[.0.0.]0\"\n  Location: (ArgsHandlingSpec.scala:78)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: \"12[60]1\" was not equal to \"12[.6.0.]1\"\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"0[00]0\" was not equal to \"0[.0.0.]0\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nMultiple options should be settable by command line arguments: \"5[67]89\" was not equal to \"5[.6.7.]89\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"43","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":76,"column":9},"end":{"line":76,"column":17}},"status":"Killed","statusReason":"Port number should be settable: IllegalStateException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Cannot change port number while server is online\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = 1\n  )\n\nPort number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but java.lang.IllegalStateException was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should be settable by command line argument: 27019 was not equal to 6771\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11","12","13","24"],"testsCompleted":15},{"id":"44","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":76,"column":9},"end":{"line":76,"column":17}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"45","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":76,"column":51},"end":{"line":76,"column":101}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"46","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":134,"column":16},"end":{"line":134,"column":20}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"47","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":171,"column":37},"end":{"line":171,"column":46}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"48","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":62,"column":41},"end":{"line":62,"column":67}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the 'images/zoom_to_fit.svg' file: Request was rejected","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["262"],"testsCompleted":50},{"id":"49","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":125,"column":15},"end":{"line":125,"column":46}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":151,"column":47},"end":{"line":151,"column":58}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"51","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":214,"column":19},"end":{"line":214,"column":34}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"52","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":215,"column":21},"end":{"line":215,"column":32}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":186,"column":12},"end":{"line":186,"column":30}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return a successful response: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return a response with nodeString and html fields for requests with a langName parameter: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return a response where nodeString is ExprChoiceNode() for requests with a valid langName parameter: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should has at least 1 div: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should has a subtree + axiom div with the correct node string data: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should has only one subtree div: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a blank tree-path: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a child .expr div: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a child .expr div which has a child .expr-dropdown select: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should there is only one .expr-dropdown select: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the .expr-dropdown select's first option has a blank value: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the .expr-dropdown select has multiple options: Request was rejected\n\nThe start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: Request was rejected","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["233","234","235","236","237","238","239","240","241","242","243","244","245"],"testsCompleted":35},{"id":"54","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":194,"column":14},"end":{"line":194,"column":30}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should return a successful response: Request was rejected\n\nThe process-action endpoint should handle POST requests should return a response with nodeString and html fields: Request was rejected\n\nThe process-action endpoint should handle POST requests should return a response with correct nodeString: Request was rejected\n\nThe process-action endpoint should handle POST requests should return consistent responses: Request was rejected\n\nThe process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes: Request was rejected\n\nThe process-action endpoint should handle POST requests should return an error response for an invalid language: Request was rejected\n\nThe process-action endpoint should handle POST requests should return an error response for an invalid display mode: Request was rejected\n\nThe process-action endpoint should handle POST requests should return an error response for an invalid action kind: Request was rejected\n\nThe process-action endpoint should handle POST requests should return an error response for an invalid node string: Request was rejected","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["252","253","254","255","256","257","258","259","260"],"testsCompleted":35},{"id":"55","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":77,"column":9},"end":{"line":77,"column":36}},"status":"Killed","statusReason":"Port number should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Port number must be between 1 and 65535\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = 1\n  )\n\nPort number should be settable by command line argument: 27019 was not equal to 6771\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11","13","24"],"testsCompleted":15},{"id":"56","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":77,"column":9},"end":{"line":77,"column":36}},"status":"Killed","statusReason":"Port number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["12","14"],"testsCompleted":15},{"id":"57","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":77,"column":15},"end":{"line":77,"column":17}},"status":"Killed","statusReason":"Port number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    port = 0\n  )\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    port = 0\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["12","14"],"testsCompleted":15},{"id":"58","mutatorName":"EqualityOperator","replacement":">=","location":{"start":{"line":77,"column":15},"end":{"line":77,"column":17}},"status":"Killed","statusReason":"Port number should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Port number must be between 1 and 65535\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = 1\n  )\n\nPort number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should be settable by command line argument: 27019 was not equal to 6771\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11","12","13","14","24"],"testsCompleted":15},{"id":"59","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":77,"column":15},"end":{"line":77,"column":17}},"status":"Killed","statusReason":"Port number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["12","14"],"testsCompleted":15},{"id":"60","mutatorName":"LogicalOperator","replacement":"&&","location":{"start":{"line":77,"column":20},"end":{"line":77,"column":22}},"status":"Killed","statusReason":"Port number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = -1\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["12","14"],"testsCompleted":15},{"id":"61","mutatorName":"EqualityOperator","replacement":">=","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":30}},"status":"Killed","statusReason":"Port number should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Port number must be between 1 and 65535\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    port = 65535\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11"],"testsCompleted":15},{"id":"62","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":30}},"status":"Killed","statusReason":"Port number should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Port number must be between 1 and 65535\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    port = 1\n  )\n\nPort number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    port = 65536\n  )\n\nPort number should be settable by command line argument: 27019 was not equal to 6771\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    port = 65536\n  )\n\nMultiple options should be settable by command line arguments: 27019 was not equal to 1234","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11","12","13","14","24"],"testsCompleted":15},{"id":"63","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":30}},"status":"Killed","statusReason":"Port number should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:23)\n  Message: Port number must be between 1 and 65535\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    port = 65535\n  )\n\nPort number should not allow invalid port values: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:34)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:31)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    port = 65536\n  )\n\nPort number should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:50)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:49)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    port = 65536\n  )","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["11","12","14"],"testsCompleted":15},{"id":"64","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":93,"column":28},"end":{"line":93,"column":78}},"status":"Killed","statusReason":"Binding address should be settable: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: \"[]\" was not equal to \"[0.0.0.0]\"\n  Location: (ArgsHandlingSpec.scala:78)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should remove leading zeroes: \"[]\" was not equal to \"[12.6.0.1]\"\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[]\" was not equal to \"[0.0.0.0]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nMultiple options should be settable by command line arguments: \"[]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","17","18","19","20","24"],"testsCompleted":15},{"id":"65","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":31},"end":{"line":93,"column":32}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 192.168.1.1.1\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 192.168.1.1.1\n  )","description":"[0:0, 0:1) Remove the beginning of line character `^`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"66","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":74},"end":{"line":93,"column":75}},"status":"Killed","statusReason":"Binding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but no exception was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 192.168.1.1.1\n  )\n\nBinding address should cause an error with invalid command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:109)\n  Message: true was not equal to false\n  Location: (ArgsHandlingSpec.scala:108)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    address = 192.168.1.1.1\n  )","description":"[0:43, 0:44) Remove the end of line character `$`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["17","20"],"testsCompleted":15},{"id":"67","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":35},"end":{"line":93,"column":40}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[90.123.5.63]\"","description":"[0:4, 0:9) Remove the quantifier from `\\d{1,3}` to `\\d`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"68","mutatorName":"RegularExpression","replacement":"\\D","location":{"start":{"line":93,"column":33},"end":{"line":93,"column":35}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","description":"[0:2, 0:4) Negate the predefined character class `\\d` to `\\D`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"69","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":46},"end":{"line":93,"column":51}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[90.123.5.63]\"","description":"[0:15, 0:20) Remove the quantifier from `\\d{1,3}` to `\\d`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"70","mutatorName":"RegularExpression","replacement":"\\D","location":{"start":{"line":93,"column":44},"end":{"line":93,"column":46}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","description":"[0:13, 0:15) Negate the predefined character class `\\d` to `\\D`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"71","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":57},"end":{"line":93,"column":62}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )","description":"[0:26, 0:31) Remove the quantifier from `\\d{1,3}` to `\\d`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19"],"testsCompleted":15},{"id":"72","mutatorName":"RegularExpression","replacement":"\\D","location":{"start":{"line":93,"column":55},"end":{"line":93,"column":57}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","description":"[0:24, 0:26) Negate the predefined character class `\\d` to `\\D`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"73","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":93,"column":68},"end":{"line":93,"column":73}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","description":"[0:37, 0:42) Remove the quantifier from `\\d{1,3}` to `\\d`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","19","24"],"testsCompleted":15},{"id":"74","mutatorName":"RegularExpression","replacement":"\\D","location":{"start":{"line":93,"column":66},"end":{"line":93,"column":68}},"status":"Killed","statusReason":"Binding address should be settable: IllegalArgumentException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Invalid IP address\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should remove leading zeroes: Invalid IP address\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","description":"[0:35, 0:37) Negate the predefined character class `\\d` to `\\D`","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","18","19","24"],"testsCompleted":15},{"id":"75","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":160,"column":17},"end":{"line":160,"column":38}},"status":"Killed","statusReason":"Skip bundle scripts option should be settable by command line argument: false was not equal to true\n\nMultiple options should be settable by command line arguments: false was not equal to true","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["23","24"],"testsCompleted":15},{"id":"76","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":162,"column":15},"end":{"line":162,"column":38}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"77","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":60,"column":41},"end":{"line":60,"column":49}},"status":"Killed","statusReason":"The GET requests should return appropriate files should return the index.html file for the '/' path: Request was rejected\n\nThe GET requests should return appropriate files should return the 'images/zoom_to_fit.svg' file: Request was rejected\n\nThe GET requests should return appropriate files should return the contents of 'dist/bundle.js': Request was rejected\n\nThe GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js': Request was rejected","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["261","262","263","264"],"testsCompleted":50},{"id":"78","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":245,"column":100},"end":{"line":245,"column":103}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should return a successful response: 400 Bad Request was not equal to 200 OK\n\nThe process-action endpoint should handle POST requests should return a response with nodeString and html fields: text/plain; charset=UTF-8 was not equal to application/json\n\nThe process-action endpoint should handle POST requests should return a response with correct nodeString: Could not unmarshal response to type 'app.NodeResponse' for `responseAs` assertion: akka.http.scaladsl.unmarshalling.Unmarshaller$UnsupportedContentTypeException: Unsupported Content-Type [Some(text/plain; charset=UTF-8)], supported: application/json\n\nResponse was: HttpResponse(400 Bad Request,List(),HttpEntity.Strict(text/plain; charset=UTF-8,61 bytes total),HttpProtocol(HTTP/1.1))\n\nThe process-action endpoint should handle POST requests should return consistent responses: Could not unmarshal response to type 'app.NodeResponse' for `responseAs` assertion: akka.http.scaladsl.unmarshalling.Unmarshaller$UnsupportedContentTypeException: Unsupported Content-Type [Some(text/plain; charset=UTF-8)], supported: application/json\n\nResponse was: HttpResponse(400 Bad Request,List(),HttpEntity.Strict(text/plain; charset=UTF-8,61 bytes total),HttpProtocol(HTTP/1.1))\n\nThe process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes: 400 Bad Request was not equal to 200 OK","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["252","253","254","255","256"],"testsCompleted":65},{"id":"79","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":174,"column":45},"end":{"line":174,"column":53}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"80","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":110,"column":9},"end":{"line":110,"column":17}},"status":"Killed","statusReason":"Skip bundle scripts option should be settable: Cannot change skipBundleScripts while server is online\n\nSkip bundle scripts option should be settable by command line argument: false was not equal to true\n\nMultiple options should be settable by command line arguments: false was not equal to true","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["22","23","24"],"testsCompleted":15},{"id":"81","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":110,"column":9},"end":{"line":110,"column":17}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"82","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":110,"column":51},"end":{"line":110,"column":107}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"83","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":176,"column":9},"end":{"line":176,"column":21}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"84","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":176,"column":9},"end":{"line":176,"column":21}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"85","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":176,"column":17},"end":{"line":176,"column":19}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"86","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":121,"column":52},"end":{"line":121,"column":74}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"87","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":182,"column":60},"end":{"line":182,"column":104}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"88","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":92,"column":9},"end":{"line":92,"column":17}},"status":"Killed","statusReason":"Binding address should be settable: IllegalStateException was thrown during property evaluation. (ArgsHandlingSpec.scala:79)\n  Message: Cannot change binding address while server is online\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 0.0.0.0\n  )\n\nBinding address should not allow invalid addresses: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:88)\n  Message: Expected exception java.lang.IllegalArgumentException to be thrown, but java.lang.IllegalStateException was thrown\n  Location: (ArgsHandlingSpec.scala:85)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    address = 256.100.50.25\n  )\n\nBinding address should remove leading zeroes: Cannot change binding address while server is online\n\nBinding address should be settable by command line argument: TestFailedException was thrown during property evaluation. (ArgsHandlingSpec.scala:102)\n  Message: \"[0.0.0.0]\" was not equal to \"[255.255.255.255]\"\n  Location: (ArgsHandlingSpec.scala:101)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    address = 255.255.255.255\n  )\n\nMultiple options should be settable by command line arguments: \"[0.0.0.0]\" was not equal to \"[5.6.7.89]\"","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["16","17","18","19","24"],"testsCompleted":15},{"id":"89","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":92,"column":9},"end":{"line":92,"column":17}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"90","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":92,"column":51},"end":{"line":92,"column":105}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"91","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":98,"column":46},"end":{"line":98,"column":66}},"status":"Survived","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"testsCompleted":15},{"id":"92","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":242,"column":53},"end":{"line":242,"column":83}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"93","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":172,"column":23},"end":{"line":172,"column":45}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"94","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":172,"column":23},"end":{"line":172,"column":45}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"95","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":172,"column":39},"end":{"line":172,"column":44}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"96","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":172,"column":47},"end":{"line":172,"column":73}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"97","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":172,"column":79},"end":{"line":172,"column":94}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"98","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":161,"column":47},"end":{"line":161,"column":51}},"status":"Killed","statusReason":"Skip bundle scripts option should be settable by command line argument: false was not equal to true\n\nMultiple options should be settable by command line arguments: false was not equal to true","coveredBy":["10","11","12","13","14","15","16","17","18","19","20","21","22","23","24"],"killedBy":["23","24"],"testsCompleted":15},{"id":"99","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":128,"column":15},"end":{"line":128,"column":51}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true}],"language":"scala"},"src/main/scala/languages/LIf.scala":{"source":"package languages\r\n\r\nclass LIf extends LArith {\r\n  // expressions\r\n  case class Bool(b: Literal) extends Expr {\r\n    override def evalInner(env: Env): Value = b match {\r\n      case LiteralBool(b) => BoolV(b)\r\n      case _              => UnexpectedArgValue(s\"Bool can only accept LiteralBool, not $b\")\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = b match {\r\n      case LiteralBool(_) => BoolType()\r\n      case _              => UnexpectedArgType(s\"Bool can only accept LiteralBool, not $b\")\r\n    }\r\n\r\n    override def prettyPrint: String = b.toString\r\n  }\r\n\r\n  object Bool {\r\n    def apply(b: Boolean): Bool = new Bool(LiteralBool(b))\r\n  }\r\n\r\n  case class Eq(e1: Expr, e2: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = {\r\n      val v1 = e1.eval(env)\r\n      val v2 = e2.eval(env)\r\n      if (v1.typ == v2.typ) {\r\n        BoolV(v1 == v2)\r\n      } else {\r\n        TypeMismatchError(\"Eq\", v1.typ, v2.typ)\r\n      }\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = {\r\n      val t1 = e1.typeCheck(tEnv)\r\n      val t2 = e2.typeCheck(tEnv)\r\n      if (t1 == t2) {\r\n        BoolType()\r\n      } else {\r\n        TypeMismatchType(t1, t2)\r\n      }\r\n    }\r\n\r\n    override def prettyPrint: String = s\"(${e1.prettyPrint} == ${e2.prettyPrint})\"\r\n  }\r\n\r\n  case class IfThenElse(cond: Expr, then_expr: Expr, else_expr: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = cond.eval(env) match {\r\n      case BoolV(true)    => then_expr.eval(env)\r\n      case BoolV(false)   => else_expr.eval(env)\r\n      case v if v.isError => v\r\n      case v              => TypeMismatchError(\"IfThenElse\", v.typ, BoolType())\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = cond.typeCheck(tEnv) match {\r\n      case BoolType() => {\r\n        val t1 = then_expr.typeCheck(tEnv)\r\n        val t2 = else_expr.typeCheck(tEnv)\r\n        if (t1 == t2) {\r\n          t1\r\n        } else {\r\n          TypeMismatchType(t1, t2)\r\n        }\r\n      }\r\n      case t => TypeMismatchType(t, BoolType())\r\n    }\r\n\r\n    override def getChildrenEval(env: Env): List[(Term, Env)] = cond.eval(env) match {\r\n      case BoolV(true)  => List((cond, env), (then_expr, env))\r\n      case BoolV(false) => List((cond, env), (else_expr, env))\r\n      case _            => List((cond, env), (then_expr, env), (else_expr, env))\r\n    }\r\n\r\n    override def prettyPrint: String =\r\n      s\"(if ${cond.prettyPrint} then ${then_expr.prettyPrint} else ${else_expr.prettyPrint})\"\r\n  }\r\n\r\n  // values\r\n  case class BoolV(b: Boolean) extends Value {\r\n    override val typ: Type = BoolType()\r\n\r\n    override def prettyPrint: String = b.toString\r\n  }\r\n\r\n  case class TypeMismatchError(exprName: String, type1: Type, type2: Type) extends EvalError {\r\n    override val message: String = s\"$type1 not compatible with $type2 in $exprName\"\r\n\r\n    override val typ: Type = TypeMismatchType(type1, type2)\r\n  }\r\n\r\n  // types\r\n  case class BoolType() extends Type {\r\n    override def prettyPrint: String = \"Bool\"\r\n  }\r\n\r\n  case class TypeMismatchType(type1: Type, type2: Type) extends TypeError {\r\n    override val message: String = s\"$type1 not compatible with $type2\"\r\n\r\n    override def prettyPrint: String = s\"TypeMismatch($type1, $type2)\"\r\n  }\r\n\r\n  override def calculateExprClassList: List[Class[Expr]] = {\r\n    super.calculateExprClassList ++ List(classOf[Bool], classOf[Eq], classOf[IfThenElse]).map(\r\n      _.asInstanceOf[Class[Expr]]\r\n    )\r\n  }\r\n\r\n  override def calculateTypeClassList: List[Class[Type]] = {\r\n    super.calculateTypeClassList ++ List(classOf[BoolType]).map(_.asInstanceOf[Class[Type]])\r\n  }\r\n}\r\n\r\nobject LIf extends LIf {}\r\n","mutants":[{"id":"482","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":8,"column":49},"end":{"line":8,"column":92}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":25},{"id":"483","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":86,"column":36},"end":{"line":86,"column":85}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":61},{"id":"484","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":97,"column":36},"end":{"line":97,"column":72}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":61},{"id":"485","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":99,"column":40},"end":{"line":99,"column":71}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":20},{"id":"486","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":37,"column":11},"end":{"line":37,"column":19}},"status":"Killed","statusReason":"If the assign expression in a Let is an error, then that error is returned: BoolType() was not an instance of languages.LIf$TypeMismatchType, but an instance of languages.LIf$BoolType","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["50"],"testsCompleted":26},{"id":"487","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":37,"column":11},"end":{"line":37,"column":19}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@3fcee3d9 did not equal Func(IntType(), Func(IntType(), BoolType()))\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@712ac7e6) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"488","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":37,"column":14},"end":{"line":37,"column":16}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@54e43bfe did not equal Func(IntType(), Func(IntType(), BoolType()))\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@106b014e) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"489","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":49,"column":18},"end":{"line":49,"column":22}},"status":"Killed","statusReason":"Applying with Rec evaluates correctly: NumV(1) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: NumV(1) did not equal NumV(6)","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["4","5"],"testsCompleted":10},{"id":"490","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":50,"column":18},"end":{"line":50,"column":23}},"status":"Killed","statusReason":"Applying with Rec evaluates correctly: TypeMismatchError(\"IfThenElse\", BoolType(), BoolType()) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: TypeMismatchError(\"IfThenElse\", BoolType(), BoolType()) did not equal NumV(6)","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["4","5"],"testsCompleted":10},{"id":"491","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":13,"column":48},"end":{"line":13,"column":91}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":25},{"id":"492","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":28,"column":18},"end":{"line":28,"column":20}},"status":"Killed","statusReason":"Applying with Rec evaluates correctly: NumV(1) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: NumV(1) did not equal NumV(6)","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["4","5"],"testsCompleted":10},{"id":"493","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":27,"column":11},"end":{"line":27,"column":27}},"status":"Killed","statusReason":"If the assign expression in a Let is an error, then that error is returned: BoolV(false) was not an instance of languages.LIf$TypeMismatchError, but an instance of languages.LIf$BoolV","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["50"],"testsCompleted":26},{"id":"494","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":27,"column":11},"end":{"line":27,"column":27}},"status":"Killed","statusReason":"Applying with Rec evaluates correctly: TypeMismatchError(\"Eq\", IntType(), IntType()) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: TypeMismatchError(\"Eq\", IntType(), IntType()) did not equal NumV(6)","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["4","5"],"testsCompleted":10},{"id":"495","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":27,"column":18},"end":{"line":27,"column":20}},"status":"Killed","statusReason":"Applying with Rec evaluates correctly: TypeMismatchError(\"Eq\", IntType(), IntType()) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: TypeMismatchError(\"Eq\", IntType(), IntType()) did not equal NumV(6)","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["4","5"],"testsCompleted":10},{"id":"496","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":52,"column":48},"end":{"line":52,"column":60}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":20},{"id":"497","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":44,"column":40},"end":{"line":44,"column":83}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"...l(n: Int): Int. (if [] then 1 else (n × ((...\" did not equal \"...l(n: Int): Int. (if [(n == 0)] then 1 else (n × ((...\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["9"],"testsCompleted":10},{"id":"498","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":69,"column":18},"end":{"line":69,"column":22}},"status":"Killed","statusReason":"IfThenElse.getChildrenEval returns the appropriate children: TestFailedException was thrown during property evaluation. (LIfTest.scala:117)\n  Message: List((Bool(true), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(1), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(2), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3)))) did not equal List((Bool(true), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(1), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))))\n  Location: (LIfTest.scala:116)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    expr = IfThenElse(Bool(true),Num(1),Num(2)),\n    children = List((Bool(true),Map(a -> NumV(1), b -> NumV(2), c -> NumV(3))), (Num(1),Map(a -> NumV(1), b -> NumV(2), c -> NumV(3))))\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["129"],"testsCompleted":25},{"id":"499","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":70,"column":18},"end":{"line":70,"column":23}},"status":"Killed","statusReason":"IfThenElse.getChildrenEval returns the appropriate children: TestFailedException was thrown during property evaluation. (LIfTest.scala:117)\n  Message: List((Bool(false), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(1), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(2), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3)))) did not equal List((Bool(false), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))), (Num(2), Map(\"a\" -> NumV(1), \"b\" -> NumV(2), \"c\" -> NumV(3))))\n  Location: (LIfTest.scala:116)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    expr = IfThenElse(Bool(false),Num(1),Num(2)),\n    children = List((Bool(false),Map(a -> NumV(1), b -> NumV(2), c -> NumV(3))), (Num(2),Map(a -> NumV(1), b -> NumV(2), c -> NumV(3))))\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["129"],"testsCompleted":25},{"id":"500","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":93,"column":40},"end":{"line":93,"column":46}},"status":"Killed","statusReason":"BoolType pretty prints correctly: \"[]\" did not equal \"[Bool]\"","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["137"],"testsCompleted":46},{"id":"501","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":75,"column":7},"end":{"line":75,"column":94}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"...orial(n: Int): Int. []\" did not equal \"...orial(n: Int): Int. [(if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["9"],"testsCompleted":10},{"id":"502","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":59,"column":13},"end":{"line":59,"column":21}},"status":"Killed","statusReason":"IfThenElse type-checks to an error when the branches have different types: IntType() was not an instance of languages.AbstractLanguage$TypeError, but an instance of languages.LArith$IntType","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["120"],"testsCompleted":52},{"id":"503","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":59,"column":13},"end":{"line":59,"column":21}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@7e7e962d did not equal Func(IntType(), IntType())\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@17229821) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"504","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":59,"column":16},"end":{"line":59,"column":18}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@e829999 did not equal Func(IntType(), IntType())\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@66fb45e5) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"505","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":30,"column":27},"end":{"line":30,"column":31}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":41}],"language":"scala"},"src/main/scala/languages/LArith.scala":{"source":"package languages\r\n\r\nclass LArith extends ClickDeduceLanguage {\r\n  // expressions\r\n\r\n  /** A numeric expression. Can be any integer.\r\n    *\r\n    * @param x\r\n    *   The integer value of the number.\r\n    */\r\n  case class Num(x: Literal) extends Expr {\r\n    override def evalInner(env: Env): Value = x match {\r\n      case LiteralInt(x) => NumV(x)\r\n      case _             => UnexpectedArgValue(s\"Num can only accept LiteralInt, not $x\")\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = x match {\r\n      case LiteralInt(_) => IntType()\r\n      case _             => UnexpectedArgType(s\"Num can only accept LiteralInt, not $x\")\r\n    }\r\n\r\n    override def prettyPrint: String = x.toString\r\n  }\r\n\r\n  object Num {\r\n    def apply(x: BigInt): Num = new Num(LiteralInt(x))\r\n\r\n    def apply(x: Int): Num = new Num(LiteralInt(BigInt(x)))\r\n  }\r\n\r\n  /** A plus expression. Both subexpressions must evaluate to `NumV`.\r\n    *\r\n    * @param e1\r\n    *   The first expression to add.\r\n    * @param e2\r\n    *   The second expression to add.\r\n    */\r\n  case class Plus(e1: Expr, e2: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = (e1.eval(env), e2.eval(env)) match {\r\n      case (NumV(x), NumV(y))    => NumV(x + y)\r\n      case (v1, _) if v1.isError => v1\r\n      case (_, v2) if v2.isError => v2\r\n      case (v1, v2)              => UnexpectedArgValue(s\"Plus cannot accept ($v1, $v2)\")\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = (e1.typeCheck(tEnv), e2.typeCheck(tEnv)) match {\r\n      case (IntType(), IntType()) => IntType()\r\n      case (t1, _) if t1.isError  => t1\r\n      case (_, t2) if t2.isError  => t2\r\n      case (t1, t2)               => UnexpectedArgType(s\"Plus cannot accept ($t1, $t2)\")\r\n    }\r\n\r\n    override def prettyPrint: String = s\"(${e1.prettyPrint} + ${e2.prettyPrint})\"\r\n  }\r\n\r\n  /** A times expression. Both subexpressions must evaluate to `NumV`.\r\n    *\r\n    * @param e1\r\n    *   The first expression to multiply.\r\n    * @param e2\r\n    *   The second expression to multiply.\r\n    */\r\n  case class Times(e1: Expr, e2: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = (e1.eval(env), e2.eval(env)) match {\r\n      case (NumV(x), NumV(y))    => NumV(x * y)\r\n      case (v1, _) if v1.isError => v1\r\n      case (_, v2) if v2.isError => v2\r\n      case (v1, v2)              => UnexpectedArgValue(s\"Times cannot accept ($v1, $v2)\")\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = (e1.typeCheck(tEnv), e2.typeCheck(tEnv)) match {\r\n      case (IntType(), IntType()) => IntType()\r\n      case (t1, _) if t1.isError  => t1\r\n      case (_, t2) if t2.isError  => t2\r\n      case (t1, t2)               => UnexpectedArgType(s\"Times cannot accept ($t1, $t2)\")\r\n    }\r\n\r\n    override def prettyPrint: String = s\"(${e1.prettyPrint} × ${e2.prettyPrint})\"\r\n  }\r\n\r\n  // values\r\n\r\n  /** A numeric value. Can be any integer.\r\n    *\r\n    * @param x\r\n    *   The integer value of the number.\r\n    */\r\n  case class NumV(x: BigInt) extends Value {\r\n    override val typ: Type = IntType()\r\n\r\n    override def prettyPrint: String = x.toString\r\n  }\r\n\r\n  /** An error that occurs due to an incorrect argument type.\r\n    *\r\n    * @param message\r\n    *   The error message.\r\n    */\r\n  case class UnexpectedArgValue(override val message: String) extends EvalError {\r\n    override val typ: Type = UnexpectedArgType(message)\r\n  }\r\n\r\n  // types\r\n\r\n  /** Type for integers.\r\n    */\r\n  case class IntType() extends Type {\r\n    override def prettyPrint: String = \"Int\"\r\n  }\r\n\r\n  /** An error that occurs due to an incorrect argument type.\r\n    *\r\n    * @param message\r\n    *   The error message.\r\n    */\r\n  case class UnexpectedArgType(override val message: String) extends TypeError\r\n\r\n  override def calculateExprClassList: List[Class[Expr]] = List(classOf[Num], classOf[Plus], classOf[Times])\r\n    .map(_.asInstanceOf[Class[Expr]])\r\n\r\n  override def calculateTypeClassList: List[Class[Type]] = super.calculateTypeClassList ++ List(classOf[IntType])\r\n    .map(_.asInstanceOf[Class[Type]])\r\n}\r\n\r\nobject LArith extends LArith {}\r\n","mutants":[{"id":"473","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":43,"column":56},"end":{"line":43,"column":88}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":105},{"id":"474","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":50,"column":56},"end":{"line":50,"column":88}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":41},{"id":"475","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":75,"column":56},"end":{"line":75,"column":89}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":25},{"id":"476","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":14,"column":48},"end":{"line":14,"column":89}},"status":"Survived","coveredBy":["79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"testsCompleted":35},{"id":"477","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":53,"column":40},"end":{"line":53,"column":82}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"...e (n × ((factorial) [])))\" did not equal \"...e (n × ((factorial) [(n + -1)])))\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["9"],"testsCompleted":10},{"id":"478","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":108,"column":40},"end":{"line":108,"column":45}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"rec factorial(n: [): ]. (if (n == 0) then ...\" did not equal \"rec factorial(n: [Int): Int]. (if (n == 0) then ...\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["9"],"testsCompleted":10},{"id":"479","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":68,"column":56},"end":{"line":68,"column":89}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"testsCompleted":25},{"id":"480","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":78,"column":40},"end":{"line":78,"column":82}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"...n == 0) then 1 else [])\" did not equal \"...n == 0) then 1 else [(n × ((factorial) (n + -1)))])\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"killedBy":["9"],"testsCompleted":10},{"id":"481","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":19,"column":47},"end":{"line":19,"column":88}},"status":"Survived","coveredBy":["79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"testsCompleted":35}],"language":"scala"},"src/main/scala/languages/AbstractNodeLanguage.scala":{"source":"package languages\r\n\r\nimport app.UtilityFunctions\r\nimport scalatags.Text.TypedTag\r\nimport scalatags.Text.all.*\r\n\r\nimport scala.annotation.tailrec\r\nimport scala.util.parsing.combinator.*\r\n\r\ntrait AbstractNodeLanguage extends AbstractLanguage {\r\n  lang =>\r\n\r\n  trait BlankSpace extends Term {\r\n    override lazy val toHtml: TypedTag[String] = {\r\n      input(`type` := \"text\", placeholder := \"Term\")\r\n    }\r\n  }\r\n\r\n  case class BlankExprDropDown() extends Expr, BlankSpace {\r\n    override lazy val toHtml: TypedTag[String] = exprClassListDropdownHtml\r\n  }\r\n\r\n  case class BlankTypeDropDown() extends Type, BlankSpace {\r\n    override lazy val toHtml: TypedTag[String] = typeClassListDropdownHtml\r\n  }\r\n\r\n  private lazy val exprClassList: List[Class[Expr]] = calculateExprClassList\r\n\r\n  protected def calculateExprClassList: List[Class[Expr]]\r\n\r\n  private lazy val typeClassList: List[Class[Type]] = calculateTypeClassList\r\n\r\n  protected def calculateTypeClassList: List[Class[Type]] = List(classOf[UnknownType]).map(_.asInstanceOf[Class[Type]])\r\n\r\n  private lazy val blankClassList: List[Class[BlankSpace]] =\r\n    List(classOf[BlankExprDropDown], classOf[BlankTypeDropDown]).map(_.asInstanceOf[Class[BlankSpace]])\r\n\r\n  private lazy val nodeClassList: List[Class[Node]] = List(\r\n    classOf[VariableNode],\r\n    classOf[ExprChoiceNode],\r\n    classOf[SubExprNode],\r\n    classOf[LiteralNode],\r\n    classOf[TypeNode],\r\n    classOf[TypeChoiceNode],\r\n    classOf[SubTypeNode]\r\n  ).map(_.asInstanceOf[Class[Node]])\r\n\r\n  private lazy val exprClassListDropdownHtml: TypedTag[String] = select(\r\n    cls := \"expr-dropdown\",\r\n    option(value := \"\", \"Select Expr...\"),\r\n    exprClassList.map(e => {\r\n      option(value := e.getSimpleName, e.getSimpleName)\r\n    })\r\n  )\r\n\r\n  private lazy val typeClassListDropdownHtml: TypedTag[String] = select(\r\n    cls := \"type-dropdown\",\r\n    option(value := \"\", \"Select Type...\"),\r\n    typeClassList.map(e => {\r\n      option(value := e.getSimpleName, e.getSimpleName)\r\n    })\r\n  )\r\n\r\n  /** Create an `Term` given its string representation.\r\n    *\r\n    * @return\r\n    *   The `Term` created, if successful.\r\n    */\r\n  private def parseTerm(s: String): Option[Term] = {\r\n    @tailrec\r\n    def makeTerm(name: String, args: List[Any]): Option[Term] = {\r\n      def constructTermFromArgs[T](termClass: Class[T]): T = {\r\n        val constructor = termClass.getConstructors()(0)\r\n        val arguments = this +: args.map {\r\n          case Some(e) => e\r\n          case x       => x\r\n        }\r\n        constructor.newInstance(arguments: _*).asInstanceOf[T]\r\n      }\r\n\r\n      val exprClass = exprClassList.find(_.getSimpleName == name)\r\n      exprClass match {\r\n        case Some(value) => Some(constructTermFromArgs(value))\r\n        case None =>\r\n          val blankClass = blankClassList.find(_.getSimpleName == name)\r\n          blankClass match {\r\n            case Some(value) => makeTerm(\"MissingExpr\", Nil)\r\n            case None =>\r\n              typeClassList.find(_.getSimpleName == name) match {\r\n                case Some(value) => Some(constructTermFromArgs(value))\r\n                case None        => None\r\n              }\r\n          }\r\n      }\r\n    }\r\n\r\n    object TermParser extends JavaTokenParsers {\r\n      def term: Parser[Option[Term]] = name ~ \"(\" ~ repsep(arg, \"\\\\s*,\\\\s*\".r) ~ \")\" ^^ {\r\n        case name ~ \"(\" ~ args ~ \")\" => makeTerm(name, args)\r\n        case _                       => None\r\n      }\r\n\r\n      def name: Parser[String] = \"[A-Za-z]\\\\w*\".r\r\n\r\n      def identifier: Parser[String] = \"[A-Za-z_$][\\\\w_$]*\".r\r\n\r\n      def arg: Parser[Any] = term | stringLiteral ^^ (s => LiteralString(s)) |\r\n        wholeNumber ^^ (n => LiteralInt(BigInt(n))) |\r\n        \"true\" ^^ (_ => LiteralBool(true)) | \"false\" ^^ (_ => LiteralBool(false)) |\r\n        identifier ^^ (s => LiteralIdentifier(s))\r\n\r\n      def parseTerm(s: String): ParseResult[Option[Term]] = parseAll(term, s.strip())\r\n    }\r\n\r\n    TermParser.parseTerm(s) match {\r\n      case TermParser.Success(matched, _) => matched\r\n      case x =>\r\n        None\r\n    }\r\n  }\r\n\r\n  /** Function to load an `Expr` from a string. Input must be in the format produced by `Expr.toString`\r\n    *\r\n    * @param s\r\n    *   The string to be parsed.\r\n    * @return\r\n    *   The `Expr` represented by the string, if successful.\r\n    */\r\n  def readExpr(s: String): Option[Expr] = parseTerm(s) match {\r\n    case Some(e: Expr) => Some(e)\r\n    case _             => None\r\n  }\r\n\r\n  def readType(s: String): Option[Type] = parseTerm(s) match {\r\n    case Some(t: Type) => Some(t)\r\n    case _             => None\r\n  }\r\n\r\n  private def exprNameToClass(name: String): Option[Class[Expr]] = exprClassList.find(_.getSimpleName == name)\r\n\r\n  private def typeNameToClass(name: String): Option[Class[Type]] = typeClassList.find(_.getSimpleName == name)\r\n\r\n  private def cacheQuery[A, B](cache: collection.mutable.Map[A, B], key: A, value: => B): B = cache.get(key) match {\r\n    case Some(value) => value\r\n    case None =>\r\n      val result = value\r\n      cache += (key -> result)\r\n      result\r\n  }\r\n\r\n  abstract class Node {\r\n    val children: List[OuterNode] = Nil\r\n\r\n    private var parent: Option[Option[OuterNode]] = None\r\n\r\n    private var parentInitialised = false\r\n\r\n    def getParent: Option[OuterNode] = parent match {\r\n      case Some(value) => value\r\n      case None        => throw new NodeParentNotInitialisedException()\r\n    }\r\n\r\n    def setParent(parentNode: Option[OuterNode]): Unit = {\r\n      parent = Some(parentNode)\r\n      markParentInitialised()\r\n    }\r\n\r\n    private def markParentInitialised(): Unit = {\r\n      parentInitialised = true\r\n    }\r\n\r\n    def isParentInitialised: Boolean = parentInitialised\r\n\r\n    def toHtmlLine(mode: DisplayMode): TypedTag[String]\r\n\r\n    def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String]\r\n\r\n    lazy val treePath: List[Int] = getParent match {\r\n      case Some(value) => value.treePath :+ value.args.indexWhere(_ eq this)\r\n      case None        => Nil\r\n    }\r\n\r\n    lazy val treePathString: String = treePath.mkString(\"-\")\r\n  }\r\n\r\n  object Node {\r\n    val innerNodeClasses: List[Class[_ <: Object]] =\r\n      List(ExprChoiceNode.getClass, SubExprNode.getClass, LiteralNode.getClass)\r\n\r\n    val outerNodeClasses: List[Class[_ <: Object]] = List(VariableNode.getClass)\r\n\r\n    def read(s: String): Option[Node] = {\r\n      def makeNode(name: String, args: List[Any], env: Env | TypeEnv = Map()): Option[Node] = {\r\n        val nodeClass = nodeClassList.find(_.getSimpleName == name)\r\n        nodeClass match {\r\n          case Some(value) =>\r\n            val constructor = value.getConstructors()(0)\r\n            var arguments = AbstractNodeLanguage.this +: args.map {\r\n              case l: Literal => l.toString\r\n              case Some(e)    => e\r\n              case x          => x\r\n            }\r\n            if (constructor.getParameterTypes.last.isAssignableFrom(classOf[Env])) {\r\n              arguments = arguments :+ env\r\n            }\r\n            if (constructor.getParameterTypes.length != arguments.length) {\r\n              throw new NodeStringParseException(s\"$name(${args.mkString(\", \")})\")\r\n            }\r\n            Some(constructor.newInstance(arguments: _*).asInstanceOf[Node])\r\n          case None => None\r\n        }\r\n      }\r\n\r\n      object NodeParser extends JavaTokenParsers {\r\n        def outerNode: Parser[Option[OuterNode | Expr | Type]] =\r\n          outerNodeName ~ \"(\" ~ repsep(outerNodeArg, \"\\\\s*,\\\\s*\".r) ~ \")\" ^^ {\r\n            case name ~ \"(\" ~ args ~ \")\" =>\r\n              val node = makeNode(name, args)\r\n              node match {\r\n                case Some(n: OuterNode) =>\r\n                  n.children.foreach(_.setParent(Some(n)))\r\n                  Some(n)\r\n                case _ => throw new NodeStringParseException(s\"$name(${args.mkString(\", \")})\")\r\n              }\r\n            case _ => None\r\n          }\r\n\r\n        def name: Parser[String] = \"[A-Za-z]\\\\w*\".r\r\n\r\n        def outerListParse: Parser[List[Any]] =\r\n          \"Nil\" ^^ { _ => Nil } | \"List(\" ~ repsep(outerNodeArg, \"\\\\s*,\\\\s*\".r) ~ \")\" ^^ { case _ ~ args ~ _ =>\r\n            args.filter(_ != None).map {\r\n              case Some(e) => e\r\n              case x       => x\r\n            }\r\n          }\r\n\r\n        def outerNodeName: Parser[String] = \"ExprChoiceNode\" | \"VariableNode\" | \"TypeChoiceNode\" | \"TypeNode\"\r\n\r\n        def innerNodeName: Parser[String] = \"SubExprNode\" | \"LiteralNode\" | \"SubTypeNode\"\r\n\r\n        def outerNodeArg: Parser[Any] =\r\n          outerListParse | innerNode | stringLiteral ^^ (s => Literal.fromString(UtilityFunctions.unquote(s)))\r\n\r\n        def innerNodeArg: Parser[Any] = outerNode | stringLiteral ^^ (s => {\r\n          val temp = s\r\n          Literal.fromString(UtilityFunctions.unquote(s))\r\n        })\r\n\r\n        def innerNode: Parser[InnerNode] = innerNodeName ~ \"(\" ~ repsep(innerNodeArg, \"\\\\s*,\\\\s*\".r) ~ \")\" ^^ {\r\n          case name ~ \"(\" ~ args ~ \")\" =>\r\n            val node = makeNode(name, args)\r\n            node match {\r\n              case Some(n: InnerNode) => n\r\n              case _                  => throw new NodeStringParseException(s\"$name(${args.mkString(\", \")})\")\r\n            }\r\n          case other => throw new NodeStringParseException(other.toString)\r\n        }\r\n\r\n        def parseNode(s: String): ParseResult[Option[Node | Expr | Type]] = parseAll(outerNode, s.strip())\r\n      }\r\n\r\n      NodeParser.parseNode(s) match {\r\n        case NodeParser.Success(Some(matched: Node), _) => Some(matched)\r\n        case x                                          => None\r\n      }\r\n    }\r\n\r\n    def readPathString(s: String): List[Int] = s match {\r\n      case \"\" => Nil\r\n      case s =>\r\n        if (s.split(\"-\").forall(_.matches(\"\\\\d+\"))) s.split(\"-\").map(_.toInt).toList\r\n        else throw new InvalidTreePathStringException(s)\r\n    }\r\n  }\r\n\r\n  abstract class OuterNode extends Node {\r\n    val args: List[InnerNode]\r\n\r\n    def markRoot(): Unit = {\r\n      setParent(None)\r\n    }\r\n\r\n    def toHtml(mode: DisplayMode): TypedTag[String] =\r\n      if (getVisibleChildren(mode).isEmpty) toHtmlAxiom(mode) else toHtmlSubtree(mode)\r\n\r\n    def toHtmlAxiom(mode: DisplayMode): TypedTag[String]\r\n\r\n    def toHtmlSubtree(mode: DisplayMode): TypedTag[String]\r\n\r\n    def getVisibleChildren(mode: DisplayMode): List[OuterNode] = children\r\n\r\n    /** Find the child of this expression tree at the given path.\r\n      *\r\n      * @param path\r\n      *   the path to the child\r\n      * @return\r\n      *   the child at the given path, if it exists\r\n      */\r\n    def findChild(path: List[Int]): Option[Node] = path match {\r\n      case Nil => Some(this)\r\n      case head :: tail =>\r\n        if (!args.indices.contains(head)) throw new InvalidTreePathException(path)\r\n        else {\r\n          args(head) match {\r\n            case SubExprNode(node) => node.findChild(tail)\r\n            case SubTypeNode(node) => node.findChild(tail)\r\n            case n: LiteralNode =>\r\n              tail match {\r\n                case Nil => Some(n)\r\n                case _   => throw new InvalidTreePathException(path)\r\n              }\r\n            case _ => None\r\n          }\r\n        }\r\n    }\r\n\r\n    def indexOf(node: Node): Int = node match {\r\n      case n: InnerNode => args.indexWhere(_ eq n)\r\n      case n: OuterNode => args.indexWhere(_.children.exists(_ eq n))\r\n    }\r\n\r\n    def replace(path: List[Int], replacement: Node): OuterNode = path match {\r\n      case Nil =>\r\n        replacement match {\r\n          case n: OuterNode => n\r\n        }\r\n      case head :: tail =>\r\n        val updatedArgs = args.updated(\r\n          head,\r\n          args(head) match {\r\n            case SubExprNode(node) =>\r\n              SubExprNode(node.replace(tail, replacement) match {\r\n                case n: ExprNode => n\r\n              })\r\n            case SubTypeNode(node) =>\r\n              SubTypeNode(node.replace(tail, replacement) match {\r\n                case n: TypeNodeParent => n\r\n              })\r\n            case LiteralNode(literalText) =>\r\n              tail match {\r\n                case Nil =>\r\n                  replacement match {\r\n                    case n: InnerNode => n\r\n                  }\r\n                case _ => throw new InvalidTreePathException(path)\r\n              }\r\n          }\r\n        )\r\n\r\n        this match {\r\n          case VariableNode(exprName, _) => VariableNode(exprName, updatedArgs)\r\n          case TypeNode(typeName, _)     => TypeNode(typeName, updatedArgs)\r\n        }\r\n    }\r\n\r\n    override lazy val treePath: List[Int] = getParent match {\r\n      case Some(value) =>\r\n        val index: Int = value.args.indexWhere({\r\n          case SubExprNode(node) => node eq this\r\n          case SubTypeNode(node) => node eq this\r\n          case _                 => false\r\n        })\r\n        if (index == -1) {\r\n          if (isPhantom) Nil else throw new Exception(\"Could not find self in parent node's args\")\r\n        } else value.treePath :+ index\r\n      case None => Nil\r\n    }\r\n\r\n    def isPhantom: Boolean = false\r\n  }\r\n\r\n  abstract class ExprNode extends OuterNode {\r\n    override def setParent(parentNode: Option[OuterNode]): Unit = parentNode match {\r\n      case Some(n: ExprNode) =>\r\n        val parentDepth = n.depth\r\n        if (parentDepth >= depthLimit) throw new DepthLimitExceededException()\r\n        super.setParent(Some(n))\r\n      case None    => super.setParent(None)\r\n      case Some(n) => throw new NodeParentWrongTypeException(classOf[ExprNode], n.getClass)\r\n    }\r\n\r\n    override def getParent: Option[ExprNode] = {\r\n      if (!isParentInitialised) markRoot()\r\n      super.getParent match {\r\n        case Some(n: ExprNode) => Some(n)\r\n        case None              => None\r\n        case Some(n)           => throw new NodeParentWrongTypeException(classOf[ExprNode], n.getClass)\r\n      }\r\n    }\r\n\r\n    def depth: Int = getParent match {\r\n      case Some(value) => value.depth + 1\r\n      case None        => 0\r\n    }\r\n\r\n    private def checkDepthLimitWillBeExceeded(currDepth: Int = 0): Unit = {\r\n      if (currDepth + 1 >= depthLimit) throw new DepthLimitExceededException()\r\n\r\n      getVisibleChildren(DisplayMode.Evaluation).foreach({\r\n        case n: ExprNode => n.checkDepthLimitWillBeExceeded(currDepth + 1)\r\n        case _           =>\r\n      })\r\n    }\r\n\r\n    val exprName: String\r\n\r\n    def getExpr: Expr\r\n\r\n    lazy val getEditValueResult: Value = getExpr.eval(getEditEnv)\r\n\r\n    lazy val getValue: Value = getExpr.eval(getEvalEnv)\r\n\r\n    lazy val getType: Type = getExpr.typeCheck(getTypeEnv)\r\n\r\n    private def getCorrectEnv[T](\r\n      childrenFunction: Expr => Map[Variable, T] => List[(Term, Map[Variable, T])],\r\n      parentEnvFunction: ExprNode => Map[Variable, T]\r\n    ): Map[Variable, T] = getParent match {\r\n      case Some(value) =>\r\n        val parentEnv = parentEnvFunction(value)\r\n        val parentExpr = value.getExpr\r\n        val parentChildren = childrenFunction(parentExpr)(parentEnv)\r\n        parentChildren.find(_._1 eq getExpr).map(_._2).getOrElse(parentEnv)\r\n      case None => Map()\r\n    }\r\n\r\n    lazy val getEditEnv: Env = getCorrectEnv(_.getChildrenBase, _.getEditEnv)\r\n\r\n    lazy val getEvalEnv: Env = getCorrectEnv(_.getChildrenEval, _.getEvalEnv)\r\n\r\n    lazy val getTypeEnv: TypeEnv = getCorrectEnv(_.getChildrenTypeCheck, _.getTypeEnv)\r\n\r\n    def toHtmlAxiom(mode: DisplayMode): TypedTag[String] = {\r\n      div(\r\n        cls := \"subtree axiom\" + phantomClassName,\r\n        data(\"tree-path\") := treePathString,\r\n        data(\"node-string\") := toString,\r\n        divByMode(mode, true),\r\n        div(cls := \"annotation-axiom\", exprName)\r\n      )\r\n    }\r\n\r\n    def toHtmlSubtree(mode: DisplayMode): TypedTag[String] = {\r\n      if (mode == DisplayMode.Evaluation && getParent.isEmpty) {\r\n        // check whether depth limit will be exceeded\r\n        checkDepthLimitWillBeExceeded()\r\n      }\r\n\r\n      div(\r\n        cls := \"subtree\" + phantomClassName,\r\n        data(\"tree-path\") := treePathString,\r\n        data(\"node-string\") := toString,\r\n        divByMode(mode, false),\r\n        div(cls := \"args\", getVisibleChildren(mode).map(_.toHtml(mode)), div(cls := \"annotation-new\", exprName))\r\n      )\r\n    }\r\n\r\n    private val divByModeCache = collection.mutable.Map[(DisplayMode, Boolean), TypedTag[String]]()\r\n\r\n    private def divByMode(mode: DisplayMode, isAxiom: Boolean): TypedTag[String] = cacheQuery(\r\n      divByModeCache,\r\n      (mode, isAxiom),\r\n      mode match {\r\n        case DisplayMode.Edit       => editDiv(isAxiom)\r\n        case DisplayMode.Evaluation => evalDiv(isAxiom)\r\n        case DisplayMode.TypeCheck  => typeCheckDiv(isAxiom)\r\n      }\r\n    )\r\n\r\n    private def editDiv(isAxiom: Boolean): TypedTag[String] = div(\r\n      cls := (if (isAxiom) \"expr\" else \"node\"),\r\n      envDiv(DisplayMode.Edit),\r\n      if (isAxiom)\r\n        (if (!isPhantom) toHtmlLine(DisplayMode.Edit) else toHtmlLineReadOnly(DisplayMode.Edit)) (display := \"inline\")\r\n      else div(cls := \"expr\", if (!isPhantom) toHtmlLine(DisplayMode.Edit) else toHtmlLineReadOnly(DisplayMode.Edit)), {\r\n        val evalResult = getEditValueResult\r\n        if (!evalResult.isError && !evalResult.isPlaceholder) List(evalArrowSpan, editEvalResultDiv)\r\n        else List(typeCheckTurnstileSpan, typeCheckResultDiv)\r\n      }\r\n    )\r\n\r\n    private def typeCheckDiv(isAxiom: Boolean): TypedTag[String] = div(\r\n      cls := (if (isAxiom) \"expr\" else \"node\"),\r\n      envDiv(DisplayMode.TypeCheck),\r\n      if (isAxiom) toHtmlLine(DisplayMode.TypeCheck)(display := \"inline\")\r\n      else div(cls := \"expr\", toHtmlLine(DisplayMode.TypeCheck)),\r\n      typeCheckTurnstileSpan,\r\n      typeCheckResultDiv\r\n    )\r\n\r\n    private def evalDiv(isAxiom: Boolean): TypedTag[String] = div(\r\n      cls := (if (isAxiom) \"expr\" else \"node\"),\r\n      envDiv(DisplayMode.Evaluation),\r\n      if (isAxiom) {\r\n        (if (!isPhantom) toHtmlLine(DisplayMode.Evaluation) else toHtmlLineReadOnly(DisplayMode.Evaluation)) (\r\n          display := \"inline\"\r\n        )\r\n      } else {\r\n        div(\r\n          cls := \"expr\",\r\n          if (!isPhantom) toHtmlLine(DisplayMode.Evaluation) else toHtmlLineReadOnly(DisplayMode.Evaluation)\r\n        )\r\n      },\r\n      evalArrowSpan,\r\n      evalResultDiv\r\n    )\r\n\r\n    private lazy val typeCheckTurnstileSpan: TypedTag[String] =\r\n      span(paddingLeft := \"0.5ch\", paddingRight := \"0.5ch\", raw(\":\"))\r\n\r\n    private lazy val typeCheckResultDiv: TypedTag[String] =\r\n      div(cls := \"type-check-result\", display := \"inline\", getType.toHtml)\r\n\r\n    private lazy val evalArrowSpan: TypedTag[String] =\r\n      span(paddingLeft := \"1ch\", paddingRight := \"1ch\", raw(\"&DoubleDownArrow;\"))\r\n\r\n    private lazy val evalResultDiv: TypedTag[String] = div(cls := \"eval-result\", display := \"inline\", getValue.toHtml)\r\n\r\n    private lazy val editEvalResultDiv: TypedTag[String] =\r\n      div(cls := \"eval-result\", display := \"inline\", getEditValueResult.toHtml)\r\n\r\n    private def envDiv(mode: DisplayMode): TypedTag[String] = {\r\n      val env: Env | TypeEnv = mode match {\r\n        case DisplayMode.Edit       => getEditEnv\r\n        case DisplayMode.Evaluation => getEvalEnv\r\n        case DisplayMode.TypeCheck  => getTypeEnv\r\n      }\r\n      val envHtml: String =\r\n        (if (env.nonEmpty)\r\n           env.map((k: String, v: Value | Type) => s\"$k &rarr; ${v.toHtml}\").mkString(\"[\", \", \", \"]\")\r\n         else \"\") +\r\n          (if (mode == DisplayMode.TypeCheck) \" &#x22a2;\" else if (env.nonEmpty) \",\" else \"\")\r\n\r\n      div(\r\n        cls := \"scoped-variables\",\r\n        display := \"inline\",\r\n        raw(envHtml),\r\n        paddingRight := {\r\n          if (envHtml.isEmpty) \"0ch\" else \"0.5ch\"\r\n        }\r\n      )\r\n    }\r\n\r\n    private val visibleChildrenCache = collection.mutable.Map[DisplayMode, List[OuterNode]]()\r\n\r\n    override def getVisibleChildren(mode: DisplayMode): List[OuterNode] = cacheQuery(\r\n      visibleChildrenCache,\r\n      mode,\r\n      mode match {\r\n        case DisplayMode.Edit      => children\r\n        case DisplayMode.TypeCheck => children\r\n        case DisplayMode.Evaluation =>\r\n          val childExprList = getExpr.getChildrenEval(getEvalEnv).map(_._1)\r\n          var unconsumedChildren = children\r\n\r\n          childExprList.flatMap({ case expr: Expr =>\r\n            val matchingChild = unconsumedChildren.collectFirst {\r\n              case c: ExprNode if c.getExpr eq expr                       => c\r\n              case c: ExprChoiceNode if c.getExpr == expr && !c.isPhantom => c\r\n            }\r\n\r\n            matchingChild match {\r\n              case Some(childNode) =>\r\n                unconsumedChildren = unconsumedChildren.filter(_ ne childNode)\r\n                Some(childNode)\r\n              case None =>\r\n                val newNode = VariableNode.fromExpr(expr)\r\n                newNode.setParent(Some(this))\r\n                newNode.markPhantom()\r\n                Some(newNode)\r\n            }\r\n          })\r\n      }\r\n    )\r\n\r\n    private var isPhantomStore = false\r\n\r\n    private def markPhantom(): Unit = {\r\n      isPhantomStore = true\r\n    }\r\n\r\n    override def isPhantom: Boolean = isPhantomStore\r\n\r\n    private def phantomClassName: String = if (isPhantom) \" phantom\" else \"\"\r\n  }\r\n\r\n  case class VariableNode(exprName: String, args: List[InnerNode] = Nil) extends ExprNode {\r\n    override val children: List[OuterNode] = args.flatMap(_.children)\r\n\r\n    override def getExpr: Expr = exprOverride.getOrElse(expr)\r\n\r\n    private var exprOverride: Option[Expr] = None\r\n\r\n    def overrideExpr(e: Expr): Unit = {\r\n      exprOverride = Some(e)\r\n    }\r\n\r\n    private lazy val exprClass: Class[Expr] = exprNameToClass(exprName) match {\r\n      case Some(value) => value\r\n      case None =>\r\n        throw new IllegalArgumentException(s\"Unknown expression type for ${lang.getClass.getSimpleName}: $exprName\")\r\n    }\r\n\r\n    lazy val expr: Expr = {\r\n      val constructor = exprClass.getConstructors.head\r\n      val arguments = lang +: args.map {\r\n        case n: SubExprNode => n.node.getExpr\r\n        case n: LiteralNode => n.getLiteral\r\n        case n: SubTypeNode => n.node.getType\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Expr]\r\n    }\r\n\r\n    private val htmlLineCache = collection.mutable.Map[DisplayMode, TypedTag[String]]()\r\n    private val htmlLineReadOnlyCache = collection.mutable.Map[DisplayMode, TypedTag[String]]()\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] =\r\n      cacheQuery(htmlLineCache, mode, div(raw(getExprHtmlLine(mode))))\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] =\r\n      cacheQuery(htmlLineReadOnlyCache, mode, div(display := \"inline\", raw(getExprHtmlLineReadOnly(mode))))\r\n\r\n    private def getExprHtmlLine(mode: DisplayMode): String = {\r\n      val constructor = exprClass.getConstructors.head\r\n      val arguments = lang +: args.map {\r\n        case n: SubExprNode => ExprPlaceholder(n.toHtmlLineReadOnly(mode).toString)\r\n        case n: LiteralNode => LiteralAny(n.toHtmlLine(mode).toString)\r\n        case n: SubTypeNode => TypePlaceholder(n.node.toHtmlLineReadOnly(mode).toString)\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Expr].prettyPrint\r\n    }\r\n\r\n    private def getExprHtmlLineReadOnly(mode: DisplayMode): String = {\r\n      val constructor = exprClass.getConstructors.head\r\n      val arguments = lang +: args.map {\r\n        case n: SubExprNode => ExprPlaceholder(n.toHtmlLineReadOnly(mode).toString)\r\n        case n: LiteralNode => LiteralAny(n.toHtmlLineReadOnly(mode).toString)\r\n        case n: SubTypeNode => TypePlaceholder(n.node.toHtmlLineReadOnly(mode).toString)\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Expr].prettyPrint\r\n    }\r\n\r\n    override def toString: String = s\"VariableNode(${UtilityFunctions.quote(exprName)}, $args)\"\r\n\r\n    children.foreach(_.setParent(Some(this)))\r\n    args.foreach(_.setParent(Some(this)))\r\n  }\r\n\r\n  object VariableNode {\r\n    def createFromExprName(exprName: String): Option[VariableNode] = {\r\n      try {\r\n        val exprClass = exprNameToClass(exprName).get\r\n        val constructor = exprClass.getConstructors.head\r\n        val innerNodes = constructor.getParameterTypes\r\n          .map {\r\n            case c if classOf[AbstractNodeLanguage] isAssignableFrom c => None\r\n            case c if classOf[Expr] isAssignableFrom c                 => Some(SubExprNode(ExprChoiceNode()))\r\n            case c if classOf[Literal] isAssignableFrom c              => Some(LiteralNode(\"\"))\r\n            case c if classOf[Type] isAssignableFrom c                 => Some(SubTypeNode(TypeChoiceNode()))\r\n            case c => throw new Exception(s\"Unexpected parameter type in createFromExpr: $c\")\r\n          }\r\n          .filter(_.isDefined)\r\n          .map(_.get)\r\n        val result = VariableNode(exprName, innerNodes.toList)\r\n        innerNodes.foreach(_.setParent(Some(result)))\r\n        Some(result)\r\n      } catch {\r\n        case _ => None\r\n      }\r\n    }\r\n\r\n    def fromExpr(e: Expr): ExprNode = e match {\r\n      case blank: BlankExprDropDown => ExprChoiceNode()\r\n      case e =>\r\n        val exprClass = e.getClass\r\n        val constructor = exprClass.getConstructors()(0)\r\n        val innerNodes = e match {\r\n          case e0: Product =>\r\n            val values = e0.productIterator.toList\r\n            values.collect({\r\n              case c: Expr    => SubExprNode(VariableNode.fromExpr(c))\r\n              case c: Literal => LiteralNode(c.toString)\r\n              case c: Type    => SubTypeNode(TypeNode.fromType(c))\r\n            })\r\n        }\r\n        val result = VariableNode(e.getClass.getSimpleName, innerNodes)\r\n        result.overrideExpr(e)\r\n        innerNodes.foreach(_.setParent(Some(result)))\r\n        result\r\n    }\r\n  }\r\n\r\n  case class ExprChoiceNode() extends ExprNode {\r\n    override val args: List[InnerNode] = Nil\r\n\r\n    override val children: List[OuterNode] = Nil\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] =\r\n      BlankExprDropDown().toHtml(data(\"tree-path\") := treePathString)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] = toHtmlLine(mode)(readonly, disabled)\r\n\r\n    override val exprName: String = \"ExprChoice\"\r\n\r\n    override def getExpr: Expr = BlankExprDropDown()\r\n  }\r\n\r\n  abstract class InnerNode extends Node {}\r\n\r\n  case class SubExprNode(node: ExprNode) extends InnerNode {\r\n    override def setParent(parentNode: Option[OuterNode]): Unit = parentNode match {\r\n      case Some(n: ExprNode) => super.setParent(Some(n))\r\n      case None              => throw new InnerNodeCannotBeRootException()\r\n      case Some(n)           => throw new NodeParentWrongTypeException(classOf[ExprNode], n.getClass)\r\n    }\r\n\r\n    override def getParent: Option[ExprNode] = super.getParent match {\r\n      case Some(n: ExprNode) => Some(n)\r\n      case None              => None\r\n      case Some(n)           => throw new NodeParentWrongTypeException(classOf[ExprNode], n.getClass)\r\n    }\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] =\r\n      node.toHtmlLineReadOnly(mode)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] = toHtmlLine(mode)\r\n\r\n    override val children: List[ExprNode] = List(node)\r\n  }\r\n\r\n  case class LiteralNode(literalText: String) extends InnerNode {\r\n    private val htmlLineShared: TypedTag[String] = input(`type` := \"text\", cls := \"literal\", value := literalText)\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] =\r\n      htmlLineShared(width := Math.max(2, literalText.length) + \"ch\", data(\"tree-path\") := treePathString)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] =\r\n      htmlLineShared(width := Math.max(1, literalText.length) + \"ch\", readonly, disabled)\r\n\r\n    override val children: List[OuterNode] = Nil\r\n\r\n    override def toString: String = s\"LiteralNode(${UtilityFunctions.quote(literalText)})\"\r\n\r\n    lazy val getLiteral: Literal = Literal.fromString(literalText)\r\n  }\r\n\r\n  abstract class TypeNodeParent extends OuterNode {\r\n    lazy val getType: Type\r\n\r\n    lazy val getTypeName: String = getType.getClass.getSimpleName\r\n\r\n    override def getParent: Option[OuterNode] = {\r\n      if (!isParentInitialised) markRoot()\r\n      super.getParent match {\r\n        case Some(n) => Some(n)\r\n        case None    => None\r\n      }\r\n    }\r\n\r\n    def toHtmlAxiom(mode: DisplayMode): TypedTag[String] = {\r\n      div(\r\n        cls := \"subtree axiom\",\r\n        data(\"tree-path\") := treePathString,\r\n        data(\"node-string\") := toString,\r\n        div(cls := \"expr\", toHtmlLine(mode)(display := \"inline\")),\r\n        div(cls := \"annotation-axiom\", getTypeName)\r\n      )\r\n    }\r\n\r\n    def toHtmlSubtree(mode: DisplayMode): TypedTag[String] = {\r\n      div(\r\n        cls := \"subtree\",\r\n        data(\"tree-path\") := treePathString,\r\n        data(\"node-string\") := toString,\r\n        div(cls := \"node\", div(cls := \"expr\", toHtmlLine(mode))),\r\n        div(cls := \"args\", children.map(_.toHtml(mode)), div(cls := \"annotation-new\", getTypeName))\r\n      )\r\n    }\r\n  }\r\n\r\n  case class TypeNode(typeName: String, args: List[InnerNode]) extends TypeNodeParent {\r\n    override lazy val getType: Type = {\r\n      val constructor = typeClass.getConstructors()(0)\r\n      val arguments = lang +: args.map {\r\n        case tn: SubTypeNode => tn.node.getType\r\n        case ln: LiteralNode => ln.getLiteral\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Type]\r\n    }\r\n\r\n    private lazy val typeClass: Class[Type] = typeNameToClass(typeName) match {\r\n      case Some(value) => value\r\n      case None =>\r\n        throw new IllegalArgumentException(s\"Unknown expression type for ${lang.getClass.getSimpleName}: $typeName\")\r\n    }\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] = getType.toHtml(data(\"tree-path\") := treePathString)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] = toHtmlLine(mode)(readonly, disabled)\r\n\r\n    override val children: List[OuterNode] = args.filter(_.isInstanceOf[SubTypeNode]).flatMap(_.children)\r\n\r\n    override def toString: String = s\"TypeNode(${UtilityFunctions.quote(typeName)}, $args)\"\r\n\r\n    def getExprHtmlLine(mode: DisplayMode): String = {\r\n      val constructor = typeClass.getConstructors()(0)\r\n      val arguments = lang +: args.map {\r\n        case n: LiteralNode => LiteralAny(n.toHtmlLine(mode).toString)\r\n        case n: SubTypeNode => TypePlaceholder(n.node.toHtmlLine(mode).toString)\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Expr].prettyPrint\r\n    }\r\n\r\n    def getExprHtmlLineReadOnly(mode: DisplayMode): String = {\r\n      val constructor = typeClass.getConstructors()(0)\r\n      val arguments = lang +: args.map {\r\n        case n: LiteralNode => LiteralAny(n.toHtmlLineReadOnly(mode).toString)\r\n        case n: SubTypeNode => TypePlaceholder(n.node.toHtmlLineReadOnly(mode).toString)\r\n      }\r\n      constructor.newInstance(arguments: _*).asInstanceOf[Expr].prettyPrint\r\n    }\r\n\r\n    children.foreach(_.setParent(Some(this)))\r\n    args.foreach(_.setParent(Some(this)))\r\n  }\r\n\r\n  object TypeNode {\r\n    def fromTypeName(typeName: String): Option[TypeNode] = typeNameToClass(typeName) match {\r\n      case Some(typ) =>\r\n        val constructor = typ.getConstructors()(0)\r\n        val arguments = constructor.getParameterTypes\r\n          .map({\r\n            case c if classOf[Type] isAssignableFrom c             => Some(SubTypeNode(TypeChoiceNode()))\r\n            case c if classOf[Literal] isAssignableFrom c          => Some(LiteralNode(\"\"))\r\n            case c if classOf[AbstractLanguage] isAssignableFrom c => None\r\n          })\r\n          .filter(_.isDefined)\r\n          .map(_.get)\r\n          .toList\r\n        Some(TypeNode(typeName, arguments))\r\n      case None => None\r\n    }\r\n\r\n    def fromType(typ: Type): TypeNodeParent = typ match {\r\n      case blank: BlankTypeDropDown => TypeChoiceNode()\r\n      case _ =>\r\n        val typeClass = typ.getClass\r\n        val constructor = typeClass.getConstructors()(0)\r\n        val innerNodes = typ match {\r\n          case e0: Product =>\r\n            val values = e0.productIterator.toList\r\n            values.collect({\r\n              case c: Literal => LiteralNode(c.toString)\r\n              case c: Type    => SubTypeNode(TypeNode.fromType(c))\r\n            })\r\n        }\r\n        val result = TypeNode(typ.getClass.getSimpleName, innerNodes)\r\n        innerNodes.foreach(_.setParent(Some(result)))\r\n        result\r\n    }\r\n  }\r\n\r\n  case class TypeChoiceNode() extends TypeNodeParent {\r\n    override val args: List[InnerNode] = Nil\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] =\r\n      BlankTypeDropDown().toHtml(data(\"tree-path\") := treePathString)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] = toHtmlLine(mode)(readonly, disabled)\r\n\r\n    override lazy val getType: Type = UnknownType()\r\n  }\r\n\r\n  case class SubTypeNode(node: TypeNodeParent) extends InnerNode {\r\n    override val children: List[OuterNode] = List(node)\r\n\r\n    override def toHtmlLine(mode: DisplayMode): TypedTag[String] = node.toHtmlLineReadOnly(mode)\r\n\r\n    override def toHtmlLineReadOnly(mode: DisplayMode): TypedTag[String] = toHtmlLine(mode)(readonly, disabled)\r\n  }\r\n\r\n  private val depthLimit: Int = 100\r\n\r\n  class DepthLimitExceededException extends Exception(s\"Depth limit ($depthLimit) exceeded\")\r\n\r\n  class InvalidTreePathStringException(s: String) extends Exception(s\"Invalid tree path string: $s\")\r\n\r\n  class InvalidTreePathException(treePath: List[Int]) extends Exception(s\"Invalid tree path: $treePath\")\r\n\r\n  class NodeStringParseException(nodeString: String) extends Exception(s\"Could not parse node string: $nodeString\")\r\n\r\n  class NodeParentNotInitialisedException extends Exception(\"Node parent not initialised\")\r\n\r\n  class NodeParentWrongTypeException(expected: Class[_ <: OuterNode], actual: Class[_ <: OuterNode])\r\n      extends Exception(s\"Node parent has wrong type: expected $expected, got $actual\")\r\n\r\n  class InnerNodeCannotBeRootException extends Exception(\"Inner node cannot be root\")\r\n}\r\n","mutants":[{"id":"216","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":15,"column":23},"end":{"line":15,"column":29}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"217","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":15,"column":46},"end":{"line":15,"column":52}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"218","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":285,"column":11},"end":{"line":285,"column":43}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"219","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":285,"column":11},"end":{"line":285,"column":43}},"status":"Killed","statusReason":"be correct with single node tree should root should have subtree and axiom classes: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:35)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with single node tree should have a child '.annotation-axiom' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:118)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.annotation-axiom' div should should have the correct text: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:262)\n  Message: Set(\"subtree\") did not contain element \"axiom\"\n  Location: (NodeHTMLSpec.scala:260)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:306)\n  Message: Set(\"subtree\") did not contain element \"axiom\"\n  Location: (NodeHTMLSpec.scala:304)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: Set(\"subtree\") did not contain element \"axiom\"\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: Set(\"subtree\") did not contain element \"axiom\"\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:422)\n  Message: Set(\"subtree\") did not contain element \"axiom\"\n  Location: (NodeHTMLSpec.scala:420)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    element = JsoupElement(<div class=\"subtree\" data-tree-path=\"0\" data-node-string=\"VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))\">\n <div class=\"node\">\n  <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n   [x → <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     -4: Int\n    </div>\n    <div class=\"tooltip-text\">\n     NumV(-4): IntType()\n    </div></span>],\n  </div>\n  <div class=\"expr\">\n   <div>\n    <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">\n   </div>\n  </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n  <div class=\"eval-result\" style=\"display: inline;\">\n   <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     -4: Int\n    </div>\n    <div class=\"tooltip-text\">\n     NumV(-4): IntType()\n    </div></span>\n  </div>\n </div>\n <div class=\"args\">\n  <div class=\"annotation-new\">\n   Var\n  </div>\n </div>\n</div>),\n    index = 0\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["169","172","173","174","175","176","177","178","179","181","192","195","199","202","203","205","207","208","212"],"testsCompleted":100},{"id":"220","mutatorName":"MethodExpression","replacement":"getVisibleChildren(mode).nonEmpty","location":{"start":{"line":285,"column":11},"end":{"line":285,"column":43}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"221","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":87,"column":42},"end":{"line":87,"column":55}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":754,"column":11},"end":{"line":754,"column":31}},"status":"Killed","statusReason":"Nested TypeNodes have correct tree paths: List() did not equal List(1)","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["37"],"testsCompleted":23},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":754,"column":11},"end":{"line":754,"column":31}},"status":"Killed","statusReason":"Node parent should be none for root node: NodeParentNotInitialisedException was thrown during property evaluation. (NodeSpec.scala:44)\n  Message: Node parent not initialised\n  Occurred at table row 9 (zero based, not counting headings), which had values (\n    node = TypeNode(\"IntType\", List())\n  )\n\nTypeNode should convert to HTML without error with multiple levels: TestFailedException was thrown during property evaluation. (NodeSpec.scala:359)\n  Message: An unexpected languages.AbstractNodeLanguage$NodeParentNotInitialisedException was thrown.\n  Location: (NodeSpec.scala:356)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["54","66"],"testsCompleted":44},{"id":"224","mutatorName":"MethodExpression","replacement":"constructor.getParameterTypes.map({\r\n  case c if classOf[AbstractNodeLanguage] isAssignableFrom c =>\r\n    None\r\n  case c if classOf[Expr] isAssignableFrom c =>\r\n    Some(SubExprNode(ExprChoiceNode()))\r\n  case c if classOf[Literal] isAssignableFrom c =>\r\n    Some(LiteralNode(\"\"))\r\n  case c if classOf[Type] isAssignableFrom c =>\r\n    Some(SubTypeNode(TypeChoiceNode()))\r\n  case c =>\r\n    throw new Exception(s\"Unexpected parameter type in createFromExpr: $c\")\r\n}).filterNot(_.isDefined)","location":{"start":{"line":655,"column":26},"end":{"line":663,"column":31}},"status":"Killed","statusReason":"Can correctly replace a ExprChoiceNode: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["34"],"testsCompleted":13},{"id":"225","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":493,"column":19},"end":{"line":493,"column":26}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","187"],"testsCompleted":69},{"id":"226","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":493,"column":19},"end":{"line":493,"column":26}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","177","207"],"testsCompleted":69},{"id":"227","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":493,"column":28},"end":{"line":493,"column":34}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","177","207"],"testsCompleted":69},{"id":"228","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":493,"column":40},"end":{"line":493,"column":46}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","187"],"testsCompleted":69},{"id":"229","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":495,"column":11},"end":{"line":495,"column":18}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["186"],"testsCompleted":69},{"id":"230","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":495,"column":11},"end":{"line":495,"column":18}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["173","174","175","176","207"],"testsCompleted":69},{"id":"231","mutatorName":"MethodExpression","replacement":"Math.min","location":{"start":{"line":736,"column":31},"end":{"line":736,"column":39}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"232","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":736,"column":65},"end":{"line":736,"column":69}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"233","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":736,"column":76},"end":{"line":736,"column":87}},"status":"RuntimeError"},{"id":"234","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":194,"column":60},"end":{"line":194,"column":62}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: ExprChoiceNode()\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: LiteralNode()\n\nCan correctly read the parents of a Node tree: Could not parse node string: VariableNode(Num(1), List())","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"235","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":436,"column":16},"end":{"line":436,"column":31}},"status":"Killed","statusReason":"be correct with single node tree should root should have subtree and axiom classes: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:34)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with single node tree should have a child '.annotation-axiom' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:118)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.annotation-axiom' div should should have the correct text: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should root should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:200)\n  Message: List(JsoupElement(<div class=\"subtree\" data-tree-path=\"0\" data-node-string=\"VariableNode(&quot;Lambda&quot;, List(LiteralNode(&quot;x&quot;), SubTypeNode(TypeNode(&quot;IntType&quot;, List())), SubExprNode(VariableNode(&quot;Plus&quot;, List(SubExprNode(VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))), SubExprNode(VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;)))))))))\">\n <div class=\"node\">\n  <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n  <div class=\"expr\">\n   <div>\n    λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>. \n    <div style=\"display: inline;\">\n     (\n     <div style=\"display: inline;\">\n      <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n     </div> + \n     <div style=\"display: inline;\">\n      <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n     </div>)\n    </div>\n   </div>\n  </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n  <div class=\"eval-result\" style=\"display: inline;\">\n   <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     λx: <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       Int\n      </div>\n      <div class=\"tooltip-text\">\n       IntType()\n      </div></span>. <span>(x + 1)</span>\n    </div>\n    <div class=\"tooltip-text\">\n     LambdaV(x,IntType(),Plus(Var(x),Num(1)),Map()): Func(IntType(),IntType())\n    </div></span>\n  </div>\n </div>\n <div class=\"args\">\n  <div class=\"subtree axiom\" data-tree-path=\"0-1\" data-node-string=\"TypeNode(&quot;IntType&quot;, List())\">\n   <div class=\"expr\">\n    <span class=\"tooltip\" data-tree-path=\"0-1\" style=\"display: inline;\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>\n   </div>\n   <div class=\"annotation-axiom\">\n    IntType\n   </div>\n  </div>\n  <div class=\"subtree\" data-tree-path=\"0-2\" data-node-string=\"VariableNode(&quot;Plus&quot;, List(SubExprNode(VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))), SubExprNode(VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;))))))\">\n   <div class=\"node\">\n    <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n     [x → <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       ?: Int\n      </div>\n      <div class=\"tooltip-text\">\n       PlaceholderValue(IntType()): IntType()\n      </div></span>],\n    </div>\n    <div class=\"expr\">\n     <div>\n      (\n      <div style=\"display: inline;\">\n       <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n      </div> + \n      <div style=\"display: inline;\">\n       <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n      </div>)\n     </div>\n    </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n    <div class=\"type-check-result\" style=\"display: inline;\">\n     <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       Int\n      </div>\n      <div class=\"tooltip-text\">\n       IntType()\n      </div></span>\n    </div>\n   </div>\n   <div class=\"args\">\n    <div class=\"\" data-tree-path=\"0-2-0\" data-node-string=\"VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))\">\n     <div class=\"expr\">\n      <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n       [x → <span class=\"tooltip\">\n        <div style=\"display: inline;\">\n         ?: Int\n        </div>\n        <div class=\"tooltip-text\">\n         PlaceholderValue(IntType()): IntType()\n        </div></span>],\n      </div>\n      <div style=\"display: inline;\">\n       <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-2-0-0\">\n      </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n      <div class=\"type-check-result\" style=\"display: inline;\">\n       <span class=\"tooltip\">\n        <div style=\"display: inline;\">\n         Int\n        </div>\n        <div class=\"tooltip-text\">\n         IntType()\n        </div></span>\n      </div>\n     </div>\n     <div class=\"annotation-axiom\">\n      Var\n     </div>\n    </div>\n    <div class=\"\" data-tree-path=\"0-2-1\" data-node-string=\"VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;)))\">\n     <div class=\"expr\">\n      <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n       [x → <span class=\"tooltip\">\n        <div style=\"display: inline;\">\n         ?: Int\n        </div>\n        <div class=\"tooltip-text\">\n         PlaceholderValue(IntType()): IntType()\n        </div></span>],\n      </div>\n      <div style=\"display: inline;\">\n       <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 2ch;\" data-tree-path=\"0-2-1-0\">\n      </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n      <div class=\"eval-result\" style=\"display: inline;\">\n       <span class=\"tooltip\">\n        <div style=\"display: inline;\">\n         1: Int\n        </div>\n        <div class=\"tooltip-text\">\n         NumV(1): IntType()\n        </div></span>\n      </div>\n     </div>\n     <div class=\"annotation-axiom\">\n      Num\n     </div>\n    </div>\n    <div class=\"annotation-new\">\n     Plus\n    </div>\n   </div>\n  </div>\n  <div class=\"annotation-new\">\n   Lambda\n  </div>\n </div>\n</div>)) had size 1 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:198)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:306)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have 'data-tree-path' equal to '1': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:314)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have the correct 'data-node-string': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:323)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should be three subtrees: List(JsoupElement(<div class=\"subtree phantom\" data-tree-path=\"\" data-node-string=\"VariableNode(&quot;Plus&quot;, List(SubExprNode(VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))), SubExprNode(VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;))))))\">\n <div class=\"node\">\n  <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n   [x → <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     -4: Int\n    </div>\n    <div class=\"tooltip-text\">\n     NumV(-4): IntType()\n    </div></span>],\n  </div>\n  <div class=\"expr\">\n   <div style=\"display: inline;\">\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n  <div class=\"eval-result\" style=\"display: inline;\">\n   <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     -3: Int\n    </div>\n    <div class=\"tooltip-text\">\n     NumV(-3): IntType()\n    </div></span>\n  </div>\n </div>\n <div class=\"args\">\n  <div class=\"\" data-tree-path=\"0\" data-node-string=\"VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))\">\n   <div class=\"expr\">\n    <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n     [x → <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       -4: Int\n      </div>\n      <div class=\"tooltip-text\">\n       NumV(-4): IntType()\n      </div></span>],\n    </div>\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">\n    </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n    <div class=\"eval-result\" style=\"display: inline;\">\n     <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       -4: Int\n      </div>\n      <div class=\"tooltip-text\">\n       NumV(-4): IntType()\n      </div></span>\n    </div>\n   </div>\n   <div class=\"annotation-axiom\">\n    Var\n   </div>\n  </div>\n  <div class=\"\" data-tree-path=\"1\" data-node-string=\"VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;)))\">\n   <div class=\"expr\">\n    <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n     [x → <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       -4: Int\n      </div>\n      <div class=\"tooltip-text\">\n       NumV(-4): IntType()\n      </div></span>],\n    </div>\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n    </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n    <div class=\"eval-result\" style=\"display: inline;\">\n     <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       1: Int\n      </div>\n      <div class=\"tooltip-text\">\n       NumV(1): IntType()\n      </div></span>\n    </div>\n   </div>\n   <div class=\"annotation-axiom\">\n    Num\n   </div>\n  </div>\n  <div class=\"annotation-new\">\n   Plus\n  </div>\n </div>\n</div>)) had size 1 instead of expected size 3\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: List() had size 0 instead of expected size 2","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["169","172","173","174","175","176","177","178","179","181","189","192","199","200","201","202","203","204","205","206","207","208","209","212"],"testsCompleted":79},{"id":"236","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":437,"column":14},"end":{"line":437,"column":25}},"status":"RuntimeError"},{"id":"237","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":438,"column":14},"end":{"line":438,"column":27}},"status":"RuntimeError"},{"id":"238","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":439,"column":25},"end":{"line":439,"column":29}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","177","178","192","202","207"],"testsCompleted":79},{"id":"239","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":440,"column":20},"end":{"line":440,"column":38}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.annotation-axiom' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:118)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.annotation-axiom' div should should have the correct text: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["179","181","203"],"testsCompleted":79},{"id":"240","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":207,"column":50},"end":{"line":207,"column":82}},"status":"Survived","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":65},{"id":"241","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":207,"column":74},"end":{"line":207,"column":78}},"status":"Survived","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":65},{"id":"242","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":501,"column":18},"end":{"line":501,"column":24}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["186"],"testsCompleted":69},{"id":"243","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":502,"column":15},"end":{"line":502,"column":25}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":89},{"id":"244","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":502,"column":15},"end":{"line":502,"column":25}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":89},{"id":"245","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":733,"column":68},"end":{"line":733,"column":74}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: \"[]\" was not equal to \"[text]\"\n  Location: (NodeHTMLSpec.scala:71)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: \"[]\" was not equal to \"[text]\"\n  Location: (NodeHTMLSpec.scala:236)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: \"[]\" was not equal to \"[text]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["174","193","207"],"testsCompleted":159},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":733,"column":83},"end":{"line":733,"column":92}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":179},{"id":"247","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":577,"column":34},"end":{"line":577,"column":39}},"status":"RuntimeError"},{"id":"248","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":835,"column":88},"end":{"line":835,"column":90}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"249","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":377,"column":13},"end":{"line":377,"column":38}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Depth limit (100) exceeded\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Depth limit (100) exceeded","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"250","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":377,"column":13},"end":{"line":377,"column":38}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":214},{"id":"251","mutatorName":"EqualityOperator","replacement":">","location":{"start":{"line":377,"column":25},"end":{"line":377,"column":27}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":214},{"id":"252","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":377,"column":25},"end":{"line":377,"column":27}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Depth limit (100) exceeded\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Depth limit (100) exceeded","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"253","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":377,"column":25},"end":{"line":377,"column":27}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":214},{"id":"254","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":804,"column":37},"end":{"line":804,"column":92}},"status":"Killed","statusReason":"TypeNode should correctly convert to and from a string: TestFailedException was thrown during property evaluation. (NodeSpec.scala:414)\n  Message: None was not equal to Some()\n  Location: (NodeSpec.scala:413)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    node = \n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["69"],"testsCompleted":31},{"id":"255","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":451,"column":16},"end":{"line":451,"column":25}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have '.subtree' class, but no '.axiom' class: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Set(\"\") did not contain element \"subtree\"\n  Location: (NodeHTMLSpec.scala:142)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should root should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:200)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:198)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should not be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:209)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:219)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:251)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:249)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:262)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should not be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:284)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:306)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have 'data-tree-path' equal to '1': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:314)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have the correct 'data-node-string': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:323)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should be three subtrees: List() had size 0 instead of expected size 3\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should not be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: List() had size 0 instead of expected size 2","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["182","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"testsCompleted":79},{"id":"256","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":452,"column":14},"end":{"line":452,"column":25}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:219)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["183","191","198"],"testsCompleted":79},{"id":"257","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":453,"column":14},"end":{"line":453,"column":27}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have the correct 'data-node-string': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:219)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["184","191","198"],"testsCompleted":79},{"id":"258","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":454,"column":25},"end":{"line":454,"column":30}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n   <div style=\"display: inline;\">\n    Int\n   </div>\n   <div class=\"tooltip-text\">\n    IntType()\n   </div></span>. \n  <div style=\"display: inline;\">\n   (\n   <div style=\"display: inline;\">\n    <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n   </div> + \n   <div style=\"display: inline;\">\n    <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n   </div>)\n  </div>\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    λx: <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>. <span>(x + 1)</span>\n   </div>\n   <div class=\"tooltip-text\">\n    LambdaV(x,IntType(),Plus(Var(x),Num(1)),Map()): Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    -4: Int\n   </div>\n   <div class=\"tooltip-text\">\n    NumV(-4): IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n   <div style=\"display: inline;\">\n    Int\n   </div>\n   <div class=\"tooltip-text\">\n    IntType()\n   </div></span>. \n  <div style=\"display: inline;\">\n   (\n   <div style=\"display: inline;\">\n    <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n   </div> + \n   <div style=\"display: inline;\">\n    <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n   </div>)\n  </div>\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    λx: <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>. <span>(x + 1)</span>\n   </div>\n   <div class=\"tooltip-text\">\n    LambdaV(x,IntType(),Plus(Var(x),Num(1)),Map()): Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    -4: Int\n   </div>\n   <div class=\"tooltip-text\">\n    NumV(-4): IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","187","188","192","193","202"],"testsCompleted":79},{"id":"259","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":455,"column":20},"end":{"line":455,"column":26}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should root should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:200)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:198)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should not be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:209)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:219)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:251)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:249)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:262)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should not be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:284)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:306)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have 'data-tree-path' equal to '1': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:314)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have the correct 'data-node-string': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:323)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should be three subtrees: List() had size 0 instead of expected size 3\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should not be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: List() had size 0 instead of expected size 2","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"testsCompleted":79},{"id":"260","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":455,"column":85},"end":{"line":455,"column":101}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"261","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":531,"column":52},"end":{"line":531,"column":76}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":74},{"id":"262","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":139,"column":103},"end":{"line":139,"column":105}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected java.lang.IllegalArgumentException was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"263","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":602,"column":44},"end":{"line":602,"column":116}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"264","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":89,"column":50},"end":{"line":89,"column":52}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: Some(UnknownType()) was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"265","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":228,"column":36},"end":{"line":228,"column":50}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"266","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":228,"column":37},"end":{"line":228,"column":38}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","description":"[0:0, 0:1) Negate the character class `[A-Za-z]` to `[^A-Za-z]`","static":true},{"id":"267","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":228,"column":47},"end":{"line":228,"column":48}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","description":"[0:10, 0:11) Remove the quantifier from `\\w*` to `\\w`","static":true},{"id":"268","mutatorName":"RegularExpression","replacement":"\\W","location":{"start":{"line":228,"column":45},"end":{"line":228,"column":47}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","description":"[0:8, 0:10) Negate the predefined character class `\\w` to `\\W`","static":true},{"id":"269","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":270,"column":12},"end":{"line":270,"column":14}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: InvalidTreePathStringException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Invalid tree path string: \n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    string = ,\n    path = Some(List())\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["74"],"testsCompleted":21},{"id":"270","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":49,"column":12},"end":{"line":49,"column":27}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"271","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":50,"column":21},"end":{"line":50,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"272","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":50,"column":25},"end":{"line":50,"column":41}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"273","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":516,"column":27},"end":{"line":516,"column":32}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"274","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":516,"column":50},"end":{"line":516,"column":55}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"275","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":516,"column":61},"end":{"line":516,"column":80}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"276","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":255,"column":77},"end":{"line":255,"column":109}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"277","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":255,"column":101},"end":{"line":255,"column":105}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"278","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":536,"column":16},"end":{"line":536,"column":34}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: List() was empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"279","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":537,"column":20},"end":{"line":537,"column":28}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"280","mutatorName":"MethodExpression","replacement":"Math.min","location":{"start":{"line":739,"column":31},"end":{"line":739,"column":39}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"281","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":739,"column":65},"end":{"line":739,"column":69}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"282","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":510,"column":27},"end":{"line":510,"column":34}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"283","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":510,"column":52},"end":{"line":510,"column":59}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"284","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":510,"column":65},"end":{"line":510,"column":68}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"285","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":644,"column":37},"end":{"line":644,"column":96}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":23},{"id":"286","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":156,"column":37},"end":{"line":156,"column":42}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Node parent not initialised\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Node parent not initialised","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"287","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":478,"column":13},"end":{"line":478,"column":61}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"288","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":478,"column":13},"end":{"line":478,"column":61}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["177","187"],"testsCompleted":79},{"id":"289","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":478,"column":33},"end":{"line":478,"column":35}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"290","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":384,"column":11},"end":{"line":384,"column":31}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Map() did not equal Map(\"factorial\" -> RecV(factorial, n, IntType(), IntType(), IfThenElse(Eq(Var(n), Num(0)), Num(1), Times(Var(n), Apply(Var(factorial), Plus(Var(n), Num(-1))))), Map()), \"n\" -> NumV(3))\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"291","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":384,"column":11},"end":{"line":384,"column":31}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Node parent not initialised\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Node parent not initialised","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"292","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":530,"column":14},"end":{"line":530,"column":26}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"[]\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"293","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":530,"column":14},"end":{"line":530,"column":26}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"294","mutatorName":"MethodExpression","replacement":"env.isEmpty","location":{"start":{"line":530,"column":14},"end":{"line":530,"column":26}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"[]\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"295","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":531,"column":87},"end":{"line":531,"column":90}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"296","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":531,"column":92},"end":{"line":531,"column":96}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"297","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":531,"column":98},"end":{"line":531,"column":101}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"298","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":532,"column":15},"end":{"line":532,"column":17}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"Stryker was here!\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"299","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":533,"column":16},"end":{"line":533,"column":45}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"⊢\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"300","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":533,"column":16},"end":{"line":533,"column":45}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"301","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":533,"column":21},"end":{"line":533,"column":23}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"⊢\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"302","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":533,"column":47},"end":{"line":533,"column":58}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"303","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":533,"column":68},"end":{"line":533,"column":80}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \",\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"304","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":533,"column":68},"end":{"line":533,"column":80}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"305","mutatorName":"MethodExpression","replacement":"env.isEmpty","location":{"start":{"line":533,"column":68},"end":{"line":533,"column":80}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \",\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"306","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":533,"column":82},"end":{"line":533,"column":85}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"307","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":533,"column":91},"end":{"line":533,"column":93}},"status":"Killed","statusReason":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty: \"Stryker was here!\" was not empty","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["245"],"testsCompleted":134},{"id":"308","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":250,"column":60},"end":{"line":250,"column":63}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"309","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":250,"column":87},"end":{"line":250,"column":98}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"310","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":250,"column":90},"end":{"line":250,"column":91}},"status":"Survived","description":"[0:2, 0:3) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"311","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":250,"column":88},"end":{"line":250,"column":90}},"status":"Survived","description":"[0:0, 0:2) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"312","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":250,"column":94},"end":{"line":250,"column":95}},"status":"Survived","description":"[0:6, 0:7) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"313","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":250,"column":92},"end":{"line":250,"column":94}},"status":"Survived","description":"[0:4, 0:6) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"314","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":250,"column":104},"end":{"line":250,"column":107}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~)\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~)\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: (((SubExprNode~()~List(Some(ExprChoiceNode())))~)\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: (((LiteralNode~()~List())~)\n\nCan correctly read the parents of a Node tree: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~)","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"315","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":251,"column":23},"end":{"line":251,"column":26}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: (((SubExprNode~()~List(Some(ExprChoiceNode())))~))\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: (((LiteralNode~()~List())~))\n\nCan correctly read the parents of a Node tree: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"316","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":251,"column":36},"end":{"line":251,"column":39}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: (((SubExprNode~()~List(Some(ExprChoiceNode())))~))\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: (((LiteralNode~()~List())~))\n\nCan correctly read the parents of a Node tree: Could not parse node string: (((SubExprNode~()~List(Some(VariableNode(\"Num(1)\", List()))))~))","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"317","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":540,"column":15},"end":{"line":540,"column":30}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"318","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":540,"column":15},"end":{"line":540,"column":30}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"319","mutatorName":"MethodExpression","replacement":"envHtml.nonEmpty","location":{"start":{"line":540,"column":15},"end":{"line":540,"column":30}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"320","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":540,"column":32},"end":{"line":540,"column":37}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"321","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":540,"column":43},"end":{"line":540,"column":50}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"322","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":98,"column":47},"end":{"line":98,"column":50}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"323","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":98,"column":65},"end":{"line":98,"column":76}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(Func(IntType(), IntType()))\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    type = Func(IntType(),IntType())\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"324","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":98,"column":68},"end":{"line":98,"column":69}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(Func(IntType(), IntType()))\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    type = Func(IntType(),IntType())\n  )","description":"[0:2, 0:3) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"325","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":98,"column":66},"end":{"line":98,"column":68}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(Func(Func(IntType(), IntType()), BoolType()))\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    type = Func(Func(IntType(),IntType()),BoolType())\n  )","description":"[0:0, 0:2) Negate the predefined character class `\\s` to `\\S`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"326","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":98,"column":72},"end":{"line":98,"column":73}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(Func(IntType(), IntType()))\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    type = Func(IntType(),IntType())\n  )","description":"[0:6, 0:7) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"327","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":98,"column":70},"end":{"line":98,"column":72}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(Func(IntType(), IntType()))\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    type = Func(IntType(),IntType())\n  )","description":"[0:4, 0:6) Negate the predefined character class `\\s` to `\\S`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"328","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":98,"column":82},"end":{"line":98,"column":85}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"329","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":99,"column":21},"end":{"line":99,"column":24}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"330","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":99,"column":34},"end":{"line":99,"column":37}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"331","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":868,"column":39},"end":{"line":868,"column":50}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":20},{"id":"332","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":240,"column":45},"end":{"line":240,"column":58}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"333","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":240,"column":61},"end":{"line":240,"column":74}},"status":"Killed","statusReason":"Can correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["31","33"],"testsCompleted":13},{"id":"334","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":240,"column":77},"end":{"line":240,"column":90}},"status":"Killed","statusReason":"TypeNode should correctly convert to and from a string: TestFailedException was thrown during property evaluation. (NodeSpec.scala:414)\n  Message: None was not equal to Some(TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"IntType\", List())), SubTypeNode(TypeNode(\"BoolType\", List())))))\n  Location: (NodeSpec.scala:413)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    node = TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"IntType\", List())), SubTypeNode(TypeNode(\"BoolType\", List()))))\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["69"],"testsCompleted":34},{"id":"335","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":272,"column":13},"end":{"line":272,"column":51}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: TestFailedException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Expected exception languages.AbstractNodeLanguage$InvalidTreePathStringException to be thrown, but java.lang.NumberFormatException was thrown\n  Location: (NodeSpec.scala:515)\n  Occurred at table row 6 (zero based, not counting headings), which had values (\n    string = x,\n    path = None\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"336","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":272,"column":13},"end":{"line":272,"column":51}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: InvalidTreePathStringException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Invalid tree path string: 0\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    string = 0,\n    path = Some(List(0))\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"337","mutatorName":"MethodExpression","replacement":"s.split(\"-\").exists(_.matches(\"\\\\d+\"))","location":{"start":{"line":272,"column":13},"end":{"line":272,"column":51}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: TestFailedException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Expected exception languages.AbstractNodeLanguage$InvalidTreePathStringException to be thrown, but java.lang.NumberFormatException was thrown\n  Location: (NodeSpec.scala:515)\n  Occurred at table row 9 (zero based, not counting headings), which had values (\n    string = 0-e,\n    path = None\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"338","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":272,"column":21},"end":{"line":272,"column":24}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: InvalidTreePathStringException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Invalid tree path string: 0-1\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    string = 0-1,\n    path = Some(List(0, 1))\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"339","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":272,"column":43},"end":{"line":272,"column":49}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: InvalidTreePathStringException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: Invalid tree path string: 0\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    string = 0,\n    path = Some(List(0))\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"340","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":272,"column":61},"end":{"line":272,"column":64}},"status":"Killed","statusReason":"Tree paths should string is correctly interpreted: NumberFormatException was thrown during property evaluation. (NodeSpec.scala:517)\n  Message: For input string: \"-\"\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    string = 0-1,\n    path = Some(List(0, 1))\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["74"],"testsCompleted":21},{"id":"341","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":661,"column":43},"end":{"line":661,"column":93}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"342","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":580,"column":24},"end":{"line":580,"column":28}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: false did not equal true","coveredBy":["0","1","2","3","4","5","6","7","8","9","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["5"],"testsCompleted":10},{"id":"343","mutatorName":"MethodExpression","replacement":"args.filterNot(_ != None)","location":{"start":{"line":232,"column":13},"end":{"line":232,"column":35}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Num(2)\", List()))))\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(ExprChoiceNode()))))))\n\nCan correctly read a VariableNode with a ExprChoiceNode: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(ExprChoiceNode())))\n\nCan correctly read a VariableNode with a LiteralNode: VariableNode(\"Num\", List()) did not equal VariableNode(\"Num\", List(LiteralNode(\"\")))\n\nCan correctly read the parents of a Node tree: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\"))))))))))))","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"344","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":232,"column":27},"end":{"line":232,"column":29}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Num(2)\", List()))))\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(ExprChoiceNode()))))))\n\nCan correctly read a VariableNode with a ExprChoiceNode: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(ExprChoiceNode())))\n\nCan correctly read a VariableNode with a LiteralNode: VariableNode(\"Num\", List()) did not equal VariableNode(\"Num\", List(LiteralNode(\"\")))\n\nCan correctly read the parents of a Node tree: VariableNode(\"Plus\", List()) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\"))))))))))))","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"345","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":109,"column":75},"end":{"line":109,"column":80}},"status":"Killed","statusReason":"Can correctly load expressions in LIf: TestFailedException was thrown during property evaluation. (LIfTest.scala:96)\n  Message: Bool(true) did not equal Bool(false)\n  Location: (LIfTest.scala:95)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    expressions = Bool(false)\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["127"],"testsCompleted":25},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":398,"column":11},"end":{"line":398,"column":38}},"status":"Killed","statusReason":"IfThenElse tree can be converted to HTML without error: Depth limit (100) exceeded","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["131"],"testsCompleted":35},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":398,"column":11},"end":{"line":398,"column":38}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"348","mutatorName":"EqualityOperator","replacement":">","location":{"start":{"line":398,"column":25},"end":{"line":398,"column":27}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"349","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":398,"column":25},"end":{"line":398,"column":27}},"status":"Killed","statusReason":"IfThenElse tree can be converted to HTML without error: Depth limit (100) exceeded","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["131"],"testsCompleted":35},{"id":"350","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":398,"column":25},"end":{"line":398,"column":27}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"351","mutatorName":"MethodExpression","replacement":"_.children.forall(_ eq n)","location":{"start":{"line":320,"column":44},"end":{"line":320,"column":69}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"352","mutatorName":"MethodExpression","replacement":"args.filterNot(_.isInstanceOf[SubTypeNode])","location":{"start":{"line":802,"column":46},"end":{"line":802,"column":86}},"status":"Killed","statusReason":"Nested TypeNodes have correct tree paths: List() did not equal List(1, 0)","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["37"],"testsCompleted":23},{"id":"353","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":365,"column":15},"end":{"line":365,"column":24}},"status":"Survived","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":64},{"id":"354","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":365,"column":15},"end":{"line":365,"column":24}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have '.subtree' class, but no '.axiom' class: Exception was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have the correct 'data-tree-path': Exception was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have the correct 'data-node-string': Exception was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should exist: Exception was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: Exception was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: Exception was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: Could not find self in parent node's args\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should be three subtrees: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should not be an axiom: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: Could not find self in parent node's args\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: Could not find self in parent node's args","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["182","183","184","185","186","187","204","205","206","207","208","209","210","211","212"],"testsCompleted":44},{"id":"355","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":365,"column":55},"end":{"line":365,"column":98}},"status":"Survived","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":64},{"id":"356","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":513,"column":18},"end":{"line":513,"column":37}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["178","188"],"testsCompleted":79},{"id":"357","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":513,"column":50},"end":{"line":513,"column":58}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"358","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":622,"column":62},"end":{"line":622,"column":70}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"359","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":364,"column":13},"end":{"line":364,"column":24}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected java.lang.Exception was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"360","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":364,"column":13},"end":{"line":364,"column":24}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":168},{"id":"361","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":364,"column":19},"end":{"line":364,"column":21}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected java.lang.Exception was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"362","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":223,"column":62},"end":{"line":223,"column":94}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"363","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":223,"column":86},"end":{"line":223,"column":90}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"364","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":238,"column":45},"end":{"line":238,"column":61}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"365","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":238,"column":64},"end":{"line":238,"column":78}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"366","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":238,"column":81},"end":{"line":238,"column":97}},"status":"Killed","statusReason":"TypeNode should correctly convert to and from a string: TestFailedException was thrown during property evaluation. (NodeSpec.scala:414)\n  Message: None was not equal to Some(TypeNode(\"IntType\", List()))\n  Location: (NodeSpec.scala:413)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    node = TypeNode(\"IntType\", List())\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["69"],"testsCompleted":34},{"id":"367","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":238,"column":100},"end":{"line":238,"column":110}},"status":"Killed","statusReason":"TypeNode should correctly convert to and from a string: TestFailedException was thrown during property evaluation. (NodeSpec.scala:414)\n  Message: None was not equal to Some(TypeNode(\"IntType\", List()))\n  Location: (NodeSpec.scala:413)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    node = TypeNode(\"IntType\", List())\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["69"],"testsCompleted":34},{"id":"368","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":57,"column":12},"end":{"line":57,"column":27}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"369","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":58,"column":21},"end":{"line":58,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"370","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":58,"column":25},"end":{"line":58,"column":41}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"371","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":521,"column":18},"end":{"line":521,"column":31}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["177","187"],"testsCompleted":79},{"id":"372","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":521,"column":44},"end":{"line":521,"column":52}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"373","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":103,"column":34},"end":{"line":103,"column":48}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"374","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":103,"column":35},"end":{"line":103,"column":36}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","description":"[0:0, 0:1) Negate the character class `[A-Za-z]` to `[^A-Za-z]`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"375","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":103,"column":45},"end":{"line":103,"column":46}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","description":"[0:10, 0:11) Remove the quantifier from `\\w*` to `\\w`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"376","mutatorName":"RegularExpression","replacement":"\\W","location":{"start":{"line":103,"column":43},"end":{"line":103,"column":45}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","description":"[0:8, 0:10) Negate the predefined character class `\\w` to `\\W`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"377","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":81,"column":58},"end":{"line":81,"column":60}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: IllegalArgumentException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"378","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":700,"column":39},"end":{"line":700,"column":50}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"379","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":169,"column":27},"end":{"line":169,"column":31}},"status":"Killed","statusReason":"Applying with Rec correctly shows a phantom tree: Map() did not equal Map(\"factorial\" -> RecV(factorial, n, IntType(), IntType(), IfThenElse(Eq(Var(n), Num(0)), Num(1), Times(Var(n), Apply(Var(factorial), Plus(Var(n), Num(-1))))), Map()), \"n\" -> NumV(3))\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["5","7"],"testsCompleted":10},{"id":"380","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":85,"column":64},"end":{"line":85,"column":66}},"status":"Timeout","statusReason":"Timeout of 6 seconds and 771 milliseconds exceeded."},{"id":"381","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":109,"column":9},"end":{"line":109,"column":15}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: IllegalArgumentException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: wrong number of arguments\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"382","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":109,"column":46},"end":{"line":109,"column":53}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: IllegalArgumentException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"383","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":231,"column":11},"end":{"line":231,"column":16}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"384","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":231,"column":35},"end":{"line":231,"column":42}},"status":"RuntimeError"},{"id":"385","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":231,"column":66},"end":{"line":231,"column":77}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","33"],"testsCompleted":13},{"id":"386","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":231,"column":69},"end":{"line":231,"column":70}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","description":"[0:2, 0:3) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","33"],"testsCompleted":13},{"id":"387","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":231,"column":67},"end":{"line":231,"column":69}},"status":"Killed","statusReason":"TypeNode should correctly convert to and from a string: TestFailedException was thrown during property evaluation. (NodeSpec.scala:414)\n  Message: None was not equal to Some(TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"IntType\", List())), SubTypeNode(TypeNode(\"IntType\", List()))))), SubTypeNode(TypeNode(\"BoolType\", List())))))\n  Location: (NodeSpec.scala:413)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    node = TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"Func\", List(SubTypeNode(TypeNode(\"IntType\", List())), SubTypeNode(TypeNode(\"IntType\", List()))))), SubTypeNode(TypeNode(\"BoolType\", List()))))\n  )","description":"[0:0, 0:2) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["69"],"testsCompleted":34},{"id":"388","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":231,"column":73},"end":{"line":231,"column":74}},"status":"Survived","description":"[0:6, 0:7) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"389","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":231,"column":71},"end":{"line":231,"column":73}},"status":"Survived","description":"[0:4, 0:6) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"390","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":231,"column":83},"end":{"line":231,"column":86}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"391","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":141,"column":103},"end":{"line":141,"column":105}},"status":"Killed","statusReason":"VariableNode should correctly return its expression: TestFailedException was thrown during property evaluation. (NodeSpec.scala:308)\n  Message: Lambda(z, UnknownType(), Var(z)) was not equal to Lambda(z, IntType(), Var(z))\n  Location: (NodeSpec.scala:307)\n  Occurred at table row 4 (zero based, not counting headings), which had values (\n    node = VariableNode(\"Lambda\", List(LiteralNode(\"z\"), SubTypeNode(TypeNode(\"IntType\", List())), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"z\")))))),\n    expr = Lambda(z,IntType(),Var(z))\n  )\n\nTypeNode should convert to HTML without error with multiple levels: TestFailedException was thrown during property evaluation. (NodeSpec.scala:359)\n  Message: An unexpected java.lang.IllegalArgumentException was thrown.\n  Location: (NodeSpec.scala:356)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nTypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: UnknownType() was not equal to IntType()\n  Location: (NodeSpec.scala:367)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["61","66","67"],"testsCompleted":31},{"id":"392","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":798,"column":88},"end":{"line":798,"column":99}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":95},{"id":"393","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":362,"column":37},"end":{"line":362,"column":42}},"status":"Killed","statusReason":"Nested TypeNodes have correct tree paths: List(0) did not equal List(1)","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["37"],"testsCompleted":23},{"id":"394","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":773,"column":16},"end":{"line":773,"column":25}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"395","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":774,"column":14},"end":{"line":774,"column":25}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"396","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":775,"column":14},"end":{"line":775,"column":27}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"397","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":776,"column":20},"end":{"line":776,"column":26}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"398","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":776,"column":39},"end":{"line":776,"column":45}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"399","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":777,"column":20},"end":{"line":777,"column":26}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"400","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":777,"column":69},"end":{"line":777,"column":85}},"status":"Survived","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"testsCompleted":21},{"id":"401","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":763,"column":16},"end":{"line":763,"column":31}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:251)\n  Message: List(JsoupElement(<div class=\"subtree\" data-tree-path=\"0-2\" data-node-string=\"VariableNode(&quot;Plus&quot;, List(SubExprNode(VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))), SubExprNode(VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;))))))\">\n <div class=\"node\">\n  <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n   [x → <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     ?: Int\n    </div>\n    <div class=\"tooltip-text\">\n     PlaceholderValue(IntType()): IntType()\n    </div></span>],\n  </div>\n  <div class=\"expr\">\n   <div>\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n  <div class=\"type-check-result\" style=\"display: inline;\">\n   <span class=\"tooltip\">\n    <div style=\"display: inline;\">\n     Int\n    </div>\n    <div class=\"tooltip-text\">\n     IntType()\n    </div></span>\n  </div>\n </div>\n <div class=\"args\">\n  <div class=\"subtree axiom\" data-tree-path=\"0-2-0\" data-node-string=\"VariableNode(&quot;Var&quot;, List(LiteralNode(&quot;x&quot;)))\">\n   <div class=\"expr\">\n    <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n     [x → <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       ?: Int\n      </div>\n      <div class=\"tooltip-text\">\n       PlaceholderValue(IntType()): IntType()\n      </div></span>],\n    </div>\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-2-0-0\">\n    </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n    <div class=\"type-check-result\" style=\"display: inline;\">\n     <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       Int\n      </div>\n      <div class=\"tooltip-text\">\n       IntType()\n      </div></span>\n    </div>\n   </div>\n   <div class=\"annotation-axiom\">\n    Var\n   </div>\n  </div>\n  <div class=\"subtree axiom\" data-tree-path=\"0-2-1\" data-node-string=\"VariableNode(&quot;Num&quot;, List(LiteralNode(&quot;1&quot;)))\">\n   <div class=\"expr\">\n    <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n     [x → <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       ?: Int\n      </div>\n      <div class=\"tooltip-text\">\n       PlaceholderValue(IntType()): IntType()\n      </div></span>],\n    </div>\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 2ch;\" data-tree-path=\"0-2-1-0\">\n    </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n    <div class=\"eval-result\" style=\"display: inline;\">\n     <span class=\"tooltip\">\n      <div style=\"display: inline;\">\n       1: Int\n      </div>\n      <div class=\"tooltip-text\">\n       NumV(1): IntType()\n      </div></span>\n    </div>\n   </div>\n   <div class=\"annotation-axiom\">\n    Num\n   </div>\n  </div>\n  <div class=\"annotation-new\">\n   Plus\n  </div>\n </div>\n</div>)) had size 1 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:249)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:262)\n  Message: Set(\"subtree\") did not contain element \"axiom\"\n  Location: (NodeHTMLSpec.scala:260)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: \"0-[2]\" was not equal to \"0-[1]\"\n  Location: (NodeHTMLSpec.scala:268)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should not be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:284)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["194","195","196","197","198"],"testsCompleted":75},{"id":"402","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":764,"column":14},"end":{"line":764,"column":25}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["196"],"testsCompleted":75},{"id":"403","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":765,"column":14},"end":{"line":765,"column":27}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["196"],"testsCompleted":75},{"id":"404","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":766,"column":20},"end":{"line":766,"column":26}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":95},{"id":"405","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":766,"column":56},"end":{"line":766,"column":64}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":95},{"id":"406","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":767,"column":20},"end":{"line":767,"column":38}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":95},{"id":"407","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":303,"column":13},"end":{"line":303,"column":41}},"status":"Killed","statusReason":"Nested TypeNodes have correct tree paths: Invalid tree path: List(1)","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["37"],"testsCompleted":13},{"id":"408","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":303,"column":13},"end":{"line":303,"column":41}},"status":"Killed","statusReason":"Tree paths should error on invalid paths: TestFailedException was thrown during property evaluation. (NodeSpec.scala:494)\n  Message: Expected exception languages.AbstractNodeLanguage$InvalidTreePathException to be thrown, but java.lang.IndexOutOfBoundsException was thrown\n  Location: (NodeSpec.scala:493)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    path = List(-1)\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["73"],"testsCompleted":50},{"id":"409","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":183,"column":57},"end":{"line":183,"column":60}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: \"0[]0\" was not equal to \"0[-]0\"\n  Location: (NodeHTMLSpec.scala:237)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: \"0[]1\" was not equal to \"0[-]1\"\n  Location: (NodeHTMLSpec.scala:268)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: \"0[]2\" was not equal to \"0[-]2\"\n  Location: (NodeHTMLSpec.scala:290)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: \"0[]0\" was not equal to \"0[-]0\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["193","196","198","207"],"testsCompleted":100},{"id":"410","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":370,"column":30},"end":{"line":370,"column":35}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"411","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":203,"column":17},"end":{"line":203,"column":82}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: ExprChoiceNode()\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: LiteralNode()\n\nCan correctly read the parents of a Node tree: Could not parse node string: VariableNode(Num(1), List())","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"412","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":203,"column":17},"end":{"line":203,"column":82}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"413","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":585,"column":48},"end":{"line":585,"column":57}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"414","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":585,"column":48},"end":{"line":585,"column":57}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: Set(\"subtree\") did not contain element \"phantom\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["211"],"testsCompleted":79},{"id":"415","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":585,"column":59},"end":{"line":585,"column":69}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: Set(\"subtree\") did not contain element \"phantom\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["211"],"testsCompleted":79},{"id":"416","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":585,"column":75},"end":{"line":585,"column":77}},"status":"Killed","statusReason":"be correct with single node tree should root should have subtree and axiom classes: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:35)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have '.subtree' class, but no '.axiom' class: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: Set(\"subtreeStryker\", \"was\", \"here!\") did not contain element \"subtree\"\n  Location: (NodeHTMLSpec.scala:142)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should root should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:200)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:198)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should not be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:209)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:219)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should have two subtrees: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:251)\n  Message: List() had size 0 instead of expected size 2\n  Location: (NodeHTMLSpec.scala:249)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:262)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:272)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should not be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:284)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:294)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom: IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:306)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have 'data-tree-path' equal to '1': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:314)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have the correct 'data-node-string': IndexOutOfBoundsException was thrown during property evaluation. (NodeHTMLSpec.scala:323)\n  Message: 1\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:339)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:337)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should be three subtrees: List() had size 0 instead of expected size 3\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should not be an axiom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom: head of empty list\n\nbe correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees: List() had size 0 instead of expected size 2","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["169","182","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"testsCompleted":79},{"id":"417","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":105,"column":40},"end":{"line":105,"column":60}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: IllegalArgumentException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"418","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":105,"column":41},"end":{"line":105,"column":42}},"status":"Killed","statusReason":"TypeNode should be able to parse types from strings: TestFailedException was thrown during property evaluation. (NodeSpec.scala:369)\n  Message: None was not equal to Some(IntType())\n  Location: (NodeSpec.scala:368)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    type = IntType()\n  )","description":"[0:0, 0:1) Negate the character class `[A-Za-z_$]` to `[^A-Za-z_$]`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["67"],"testsCompleted":21},{"id":"419","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":105,"column":57},"end":{"line":105,"column":58}},"status":"Killed","statusReason":"Lambda expression string can be correctly read: None did not equal Some(Lambda(x, IntType(), Plus(Var(x), Num(1))))","description":"[0:16, 0:17) Remove the quantifier from `[\\w_$]*` to `[\\w_$]`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["224"],"testsCompleted":41},{"id":"420","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":105,"column":51},"end":{"line":105,"column":52}},"status":"Killed","statusReason":"Lambda expression string can be correctly read: None did not equal Some(Lambda(x, IntType(), Plus(Var(x), Num(1))))","description":"[0:10, 0:11) Negate the character class `[\\w_$]` to `[^\\w_$]`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["224"],"testsCompleted":41},{"id":"421","mutatorName":"RegularExpression","replacement":"\\W","location":{"start":{"line":105,"column":52},"end":{"line":105,"column":54}},"status":"Killed","statusReason":"Lambda expression string can be correctly read: None did not equal Some(Lambda(x, IntType(), Plus(Var(x), Num(1))))","description":"[0:11, 0:13) Negate the predefined character class `\\w` to `\\W`","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["224"],"testsCompleted":41},{"id":"422","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":206,"column":17},"end":{"line":206,"column":73}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: ExprChoiceNode()\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: LiteralNode()\n\nCan correctly read the parents of a Node tree: Could not parse node string: VariableNode(Num(1), List())","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"423","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":206,"column":17},"end":{"line":206,"column":73}},"status":"Killed","statusReason":"Invalid actions creation should throw an error when attempting to create an action with an invalid node string: TableDrivenPropertyCheckFailedException was thrown during property evaluation. (ActionSpec.scala:599)\n  Message: TestFailedException was thrown during property evaluation. (ActionSpec.scala:598)\n  Message: java.lang.IllegalArgumentException was not instance of languages.LLam.NodeStringParseException, and java.lang.IllegalArgumentException was not instance of languages.LLam.ActionInvocationException\n  Location: (ActionSpec.scala:597)\n  Occurred at table row 5 (zero based, not counting headings), which had values (\n    nodeString = VariableNode()\n  )\n  Location: (ActionSpec.scala:598)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    actionName = SelectExprAction\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["165"],"testsCompleted":89},{"id":"424","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":206,"column":54},"end":{"line":206,"column":56}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: VariableNode(Num(1), List())\n\nCan correctly read a VariableNode with a ExprChoiceNode: Could not parse node string: ExprChoiceNode()\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: LiteralNode()\n\nCan correctly read the parents of a Node tree: Could not parse node string: VariableNode(Num(1), List())","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"425","mutatorName":"MethodExpression","replacement":"unconsumedChildren.filterNot(_ ne childNode)","location":{"start":{"line":565,"column":38},"end":{"line":565,"column":79}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node: \"[]\" was not equal to \"[1]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["209"],"testsCompleted":79},{"id":"426","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":704,"column":37},"end":{"line":704,"column":49}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":160},{"id":"427","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":216,"column":27},"end":{"line":216,"column":30}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"428","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":216,"column":54},"end":{"line":216,"column":65}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"429","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":216,"column":57},"end":{"line":216,"column":58}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","description":"[0:2, 0:3) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"430","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":216,"column":55},"end":{"line":216,"column":57}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Could not parse node string: VariableNode(Num(1), List(), SubExprNode(VariableNode(\"Num(2)\", List())))\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Could not parse node string: VariableNode(Num(1), List(), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(ExprChoiceNode())))))\n\nCan correctly read the parents of a Node tree: Could not parse node string: VariableNode(Num(1), List(), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\")))))))))))","description":"[0:0, 0:2) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","33"],"testsCompleted":13},{"id":"431","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":216,"column":61},"end":{"line":216,"column":62}},"status":"Survived","description":"[0:6, 0:7) Remove the quantifier from `\\s*` to `\\s`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"432","mutatorName":"RegularExpression","replacement":"\\S","location":{"start":{"line":216,"column":59},"end":{"line":216,"column":61}},"status":"Survived","description":"[0:4, 0:6) Negate the predefined character class `\\s` to `\\S`","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"433","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":216,"column":71},"end":{"line":216,"column":74}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: java.lang.ClassCastException@678a9516\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: java.lang.ClassCastException@5bf9ea6b\n\nCan correctly read a VariableNode with a ExprChoiceNode: java.lang.ClassCastException@b950f82\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: java.lang.ClassCastException@5d352de0","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"434","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":217,"column":25},"end":{"line":217,"column":28}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: java.lang.ClassCastException@16ee9aa7\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: java.lang.ClassCastException@4e424582\n\nCan correctly read a VariableNode with a ExprChoiceNode: java.lang.ClassCastException@58dad04a\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: java.lang.ClassCastException@73e776b7","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"435","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":217,"column":38},"end":{"line":217,"column":41}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: java.lang.ClassCastException@55736cfe\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: java.lang.ClassCastException@5a566922\n\nCan correctly read a VariableNode with a ExprChoiceNode: java.lang.ClassCastException@6f7a2a5\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: java.lang.ClassCastException@42ed89da","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"436","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":560,"column":51},"end":{"line":560,"column":53}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"437","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":560,"column":59},"end":{"line":560,"column":61}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"438","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","location":{"start":{"line":659,"column":92},"end":{"line":659,"column":94}},"status":"Killed","statusReason":"Can correctly replace a ExprChoiceNode: VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"Stryker was here!\")))), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\")))))))))))) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"\")))), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\"))))))))))))","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["34"],"testsCompleted":13},{"id":"439","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":445,"column":11},"end":{"line":445,"column":62}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected languages.AbstractNodeLanguage$DepthLimitExceededException was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"440","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":445,"column":11},"end":{"line":445,"column":62}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"441","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":445,"column":16},"end":{"line":445,"column":18}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected languages.AbstractNodeLanguage$DepthLimitExceededException was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"442","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":445,"column":42},"end":{"line":445,"column":44}},"status":"Killed","statusReason":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: An unexpected languages.AbstractNodeLanguage$DepthLimitExceededException was thrown.","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["7"],"testsCompleted":10},{"id":"443","mutatorName":"MethodExpression","replacement":"getParent.nonEmpty","location":{"start":{"line":445,"column":45},"end":{"line":445,"column":62}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"444","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":795,"column":44},"end":{"line":795,"column":116}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"445","mutatorName":"MethodExpression","replacement":"constructor.getParameterTypes.map({\r\n  case c if classOf[Type] isAssignableFrom c =>\r\n    Some(SubTypeNode(TypeChoiceNode()))\r\n  case c if classOf[Literal] isAssignableFrom c =>\r\n    Some(LiteralNode(\"\"))\r\n  case c if classOf[AbstractLanguage] isAssignableFrom c =>\r\n    None\r\n}).filterNot(_.isDefined)","location":{"start":{"line":832,"column":25},"end":{"line":838,"column":31}},"status":"Killed","statusReason":"SelectTypeAction should replace a root TypeChoiceNode with selection: NoSuchElementException was thrown during property evaluation. (ActionSpec.scala:173)\n  Message: None.get\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    typeChoiceName = IntType\n  )\n\nSelectTypeAction should replace a nested TypeChoiceNode with selection: NoSuchElementException was thrown during property evaluation. (ActionSpec.scala:209)\n  Message: None.get\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeChoiceNode()), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\")))))),\n    treePath = List(1),\n    typeChoiceName = IntType,\n    result = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeNode(\"IntType\", List())), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\"))))))\n  )\n\nSelectTypeAction should throw an error when attempting to replace something other than a TypeChoiceNode: TestFailedException was thrown during property evaluation. (ActionSpec.scala:232)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectTargetException to be thrown, but java.util.NoSuchElementException was thrown\n  Location: (ActionSpec.scala:231)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Num\", List(LiteralNode(\"1\"))),\n    treePath = List(),\n    typeChoiceName = IntType\n  )","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["149","150","151"],"testsCompleted":30},{"id":"446","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":109,"column":37},"end":{"line":109,"column":41}},"status":"Killed","statusReason":"Can correctly load expressions in LIf: TestFailedException was thrown during property evaluation. (LIfTest.scala:96)\n  Message: Bool(false) did not equal Bool(true)\n  Location: (LIfTest.scala:95)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    expressions = Bool(true)\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["127"],"testsCompleted":25},{"id":"447","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":484,"column":19},"end":{"line":484,"column":26}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n  ⊢\n </div>\n <div class=\"expr\">\n  <div>\n   λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n    <div style=\"display: inline;\">\n     Int\n    </div>\n    <div class=\"tooltip-text\">\n     IntType()\n    </div></span>. \n   <div style=\"display: inline;\">\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div>\n </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n <div class=\"type-check-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span> → <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>\n   </div>\n   <div class=\"tooltip-text\">\n    Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n  ⊢\n </div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n <div class=\"type-check-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    Int\n   </div>\n   <div class=\"tooltip-text\">\n    IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n  ⊢\n </div>\n <div class=\"expr\">\n  <div>\n   λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n    <div style=\"display: inline;\">\n     Int\n    </div>\n    <div class=\"tooltip-text\">\n     IntType()\n    </div></span>. \n   <div style=\"display: inline;\">\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div>\n </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n <div class=\"type-check-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span> → <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>\n   </div>\n   <div class=\"tooltip-text\">\n    Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0.5ch;\">\n  ⊢\n </div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 0.5ch; padding-right: 0.5ch;\">:</span>\n <div class=\"type-check-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    Int\n   </div>\n   <div class=\"tooltip-text\">\n    IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","188","192","193","202"],"testsCompleted":79},{"id":"448","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":484,"column":19},"end":{"line":484,"column":26}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","178","192","202"],"testsCompleted":79},{"id":"449","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":484,"column":28},"end":{"line":484,"column":34}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","178","192","202"],"testsCompleted":79},{"id":"450","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":484,"column":40},"end":{"line":484,"column":46}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode: List() had size 0 instead of expected size 1\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","188","193"],"testsCompleted":79},{"id":"451","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":486,"column":11},"end":{"line":486,"column":18}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["186","193"],"testsCompleted":79},{"id":"452","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":486,"column":11},"end":{"line":486,"column":18}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["173","174","175","176"],"testsCompleted":79},{"id":"453","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":486,"column":65},"end":{"line":486,"column":73}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"454","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":487,"column":23},"end":{"line":487,"column":29}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = TypeCheck\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["186","193"],"testsCompleted":79},{"id":"455","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":472,"column":19},"end":{"line":472,"column":26}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div class=\"expr\">\n  <div>\n   λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n    <div style=\"display: inline;\">\n     Int\n    </div>\n    <div class=\"tooltip-text\">\n     IntType()\n    </div></span>. \n   <div style=\"display: inline;\">\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div>\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    λx: <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>. <span>(x + 1)</span>\n   </div>\n   <div class=\"tooltip-text\">\n    LambdaV(x,IntType(),Plus(Var(x),Num(1)),Map()): Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    -4: Int\n   </div>\n   <div class=\"tooltip-text\">\n    NumV(-4): IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List(JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div class=\"expr\">\n  <div>\n   λ<input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 2ch;\" data-tree-path=\"0-0\">: <span class=\"tooltip\" data-tree-path=\"0-1\" readonly disabled>\n    <div style=\"display: inline;\">\n     Int\n    </div>\n    <div class=\"tooltip-text\">\n     IntType()\n    </div></span>. \n   <div style=\"display: inline;\">\n    (\n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"x\" style=\"width: 1ch;\" readonly disabled>\n    </div> + \n    <div style=\"display: inline;\">\n     <input type=\"text\" class=\"literal\" value=\"1\" style=\"width: 1ch;\" readonly disabled>\n    </div>)\n   </div>\n  </div>\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    λx: <span class=\"tooltip\">\n     <div style=\"display: inline;\">\n      Int\n     </div>\n     <div class=\"tooltip-text\">\n      IntType()\n     </div></span>. <span>(x + 1)</span>\n   </div>\n   <div class=\"tooltip-text\">\n    LambdaV(x,IntType(),Plus(Var(x),Num(1)),Map()): Func(IntType(),IntType())\n   </div></span>\n </div>\n</div>), JsoupElement(<div class=\"expr\">\n <div class=\"scoped-variables\" style=\"display: inline; padding-right: 0ch;\"></div>\n <div style=\"display: inline;\">\n  <input type=\"text\" class=\"literal\" value=\"-4\" style=\"width: 2ch;\" data-tree-path=\"1-0\">\n </div><span style=\"padding-left: 1ch; padding-right: 1ch;\">⇓</span>\n <div class=\"eval-result\" style=\"display: inline;\">\n  <span class=\"tooltip\">\n   <div style=\"display: inline;\">\n    -4: Int\n   </div>\n   <div class=\"tooltip-text\">\n    NumV(-4): IntType()\n   </div></span>\n </div>\n</div>)) had size 2 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","187","192","193","202"],"testsCompleted":79},{"id":"456","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":472,"column":19},"end":{"line":472,"column":26}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","177","192","202"],"testsCompleted":79},{"id":"457","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":472,"column":28},"end":{"line":472,"column":34}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:56)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:227)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:225)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:331)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:329)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["172","173","174","175","176","177","192","202"],"testsCompleted":79},{"id":"458","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":472,"column":40},"end":{"line":472,"column":46}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:164)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["185","186","187","193"],"testsCompleted":79},{"id":"459","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":474,"column":11},"end":{"line":474,"column":18}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["186","193"],"testsCompleted":79},{"id":"460","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":474,"column":11},"end":{"line":474,"column":18}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:65)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: head of empty list\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["173","174","175","176"],"testsCompleted":79},{"id":"461","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":475,"column":14},"end":{"line":475,"column":24}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"462","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":475,"column":14},"end":{"line":475,"column":24}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path': NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["175"],"testsCompleted":79},{"id":"463","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":475,"column":110},"end":{"line":475,"column":118}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"464","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":476,"column":23},"end":{"line":476,"column":29}},"status":"Killed","statusReason":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:22)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:170)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["186","193"],"testsCompleted":79},{"id":"465","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":476,"column":35},"end":{"line":476,"column":45}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":134},{"id":"466","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":476,"column":35},"end":{"line":476,"column":45}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: NoSuchElementException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: \"None\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["193"],"testsCompleted":79},{"id":"467","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":743,"column":37},"end":{"line":743,"column":91}},"status":"Killed","statusReason":"Can correctly read a VariableNode with a LiteralNode: VariableNode(\"Num\", List()) did not equal VariableNode(\"Num\", List())\n\nCan correctly read the parents of a Node tree: VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Num\", List())))))))))) did not equal VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num(1)\", List())), SubExprNode(VariableNode(\"Times\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Plus\", List(SubExprNode(ExprChoiceNode()), SubExprNode(VariableNode(\"Num\", List()))))))))))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["31","33"],"testsCompleted":23},{"id":"468","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":496,"column":14},"end":{"line":496,"column":24}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":124},{"id":"469","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":496,"column":14},"end":{"line":496,"column":24}},"status":"RuntimeError"},{"id":"470","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":497,"column":22},"end":{"line":497,"column":30}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":124},{"id":"471","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":518,"column":67},"end":{"line":518,"column":80}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    mode = Evaluation\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["177","187"],"testsCompleted":69},{"id":"472","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":518,"column":93},"end":{"line":518,"column":101}},"status":"Survived","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":124}],"language":"scala"},"src/main/scala/languages/AbstractLanguage.scala":{"source":"package languages\r\n\r\nimport scalatags.Text.TypedTag\r\nimport scalatags.Text.all.*\r\n\r\nimport scala.collection.immutable.List\r\n\r\ntrait AbstractLanguage {\r\n\r\n  /** A variable name.\r\n    *\r\n    * Case sensitive.\r\n    */\r\n  type Variable = String\r\n\r\n  /** The evaluation environment at a particular point.\r\n    *\r\n    * Contains variables with bound values.\r\n    */\r\n  type Env = Map[Variable, Value]\r\n\r\n  /** The type environment at a particular point.\r\n    *\r\n    * Contains variables with bound types.\r\n    */\r\n  type TypeEnv = Map[Variable, Type]\r\n\r\n  trait Term {\r\n    lazy val toHtml: TypedTag[String] = span(raw(prettyPrint))\r\n\r\n    def getChildrenBase(env: Env = Map()): List[(Term, Env)] = Nil\r\n\r\n    def getChildrenEval(env: Env = Map()): List[(Term, Env)] = Nil\r\n\r\n    def getChildrenTypeCheck(tEnv: TypeEnv = Map()): List[(Term, TypeEnv)] = Nil\r\n\r\n    def isPlaceholder: Boolean = false\r\n\r\n    def prettyPrint: String = toHtml.toString\r\n  }\r\n\r\n  /** An unevaluated expression.\r\n    */\r\n  abstract class Expr extends Term {\r\n    private def getExprFields(e: Expr): List[Expr] = {\r\n      e match {\r\n        case e0: Product =>\r\n          val values = e0.productIterator.toList\r\n          values.collect({ case e: Expr => e })\r\n        case _ => Nil\r\n      }\r\n    }\r\n\r\n    override def getChildrenBase(env: Env = Map()): List[(Term, Env)] =\r\n      getExprFields(this).zip(LazyList.continually(env))\r\n\r\n    override def getChildrenEval(env: Env = Map()): List[(Term, Env)] =\r\n      getExprFields(this).zip(LazyList.continually(env))\r\n\r\n    override def getChildrenTypeCheck(tEnv: TypeEnv): List[(Term, TypeEnv)] =\r\n      getExprFields(this).zip(LazyList.continually(tEnv))\r\n\r\n    lazy val childVersion: Expr = this\r\n\r\n    /** Function which evaluates this `Expr` to a `Value`, given an environment.\r\n      *\r\n      * @param env\r\n      *   The environment to evaluate in.\r\n      * @return\r\n      *   The `Value` resulting from evaluating this.\r\n      */\r\n    final def eval(env: Env = Map()): Value = {\r\n      try {\r\n        evalInner(env)\r\n      } catch {\r\n        case e: StackOverflowError => stackOverflowEvalError\r\n      }\r\n    }\r\n\r\n    protected def evalInner(env: Env): Value = UnexpectedExpr(toString)\r\n\r\n    /** Function to perform type checking on this `Expr` in the given type environment.\r\n      *\r\n      * @param tEnv\r\n      *   The type environment in which type checking is done.\r\n      * @return\r\n      *   The `Type` of this expression after type checking.\r\n      */\r\n    final def typeCheck(tEnv: TypeEnv = Map()): Type = {\r\n      try {\r\n        typeCheckInner(tEnv)\r\n      } catch {\r\n        case e: StackOverflowError => stackOverflowTypeError\r\n      }\r\n    }\r\n\r\n    protected def typeCheckInner(tEnv: TypeEnv): Type = UnexpectedExprType(toString)\r\n  }\r\n\r\n  case class MissingExpr() extends Expr\r\n\r\n  case class ExprPlaceholder(content: String) extends Expr {\r\n    override def prettyPrint: String = content\r\n  }\r\n\r\n  /** A value resulting from an expression being evaluated.\r\n    */\r\n  abstract class Value extends Term {\r\n    override lazy val toHtml: TypedTag[String] =\r\n      span(cls := \"tooltip\", valueText(display := \"inline\"), div(cls := \"tooltip-text\", tooltipText))\r\n\r\n    lazy val tooltipText: String = toString + \": \" + typ.toString\r\n\r\n    lazy val valueText: TypedTag[String] = div(prettyPrint + \": \" + typ.prettyPrint)\r\n\r\n    val typ: Type\r\n\r\n    val isError: Boolean = false\r\n\r\n    override def prettyPrint: String = toHtml.toString\r\n  }\r\n\r\n  /** The type of a value.\r\n    */\r\n  abstract class Type extends Term {\r\n    override lazy val toHtml: TypedTag[String] =\r\n      span(cls := \"tooltip\", valueText(display := \"inline\"), div(cls := \"tooltip-text\", tooltipText))\r\n\r\n    lazy val tooltipText: String = toString\r\n\r\n    lazy val valueText: TypedTag[String] = div(prettyPrint)\r\n\r\n    val isError: Boolean = false\r\n  }\r\n\r\n  case class UnknownType() extends Type {\r\n    override def prettyPrint: String = \"Unknown\"\r\n  }\r\n\r\n  case class TypePlaceholder(content: String) extends Type {\r\n    override def prettyPrint: String = content\r\n  }\r\n\r\n  trait TermError extends Term {\r\n    val message: String = \"Error\"\r\n  }\r\n\r\n  /** An error resulting from an expression being evaluated.\r\n    */\r\n  abstract class EvalError extends Value, TermError {\r\n    override lazy val toHtml: TypedTag[String] =\r\n      span(cls := \"tooltip\", valueText, div(cls := \"tooltip-text\", tooltipText), cls := \"error-origin\")\r\n\r\n    override lazy val tooltipText: String = message\r\n\r\n    override lazy val valueText: TypedTag[String] = div(\"?\")\r\n\r\n    override val isError: Boolean = true\r\n  }\r\n\r\n  /** An error that occurs due to attempting to process an unknown `Expr`.\r\n    *\r\n    * @param message\r\n    *   The error message.\r\n    */\r\n  case class UnexpectedExpr(override val message: String) extends EvalError {\r\n    override val typ: Type = UnexpectedExprType(message)\r\n  }\r\n\r\n  case class EvalException(override val message: String) extends EvalError {\r\n    override val typ: Type = TypeException(message)\r\n  }\r\n\r\n  private val stackOverflowEvalError: EvalError = EvalException(\"Stack overflow\")\r\n  private val stackOverflowTypeError: TypeError = TypeException(\"Stack overflow\")\r\n\r\n  /** An error resulting from an expression being type checked.\r\n    */\r\n  abstract class TypeError extends Type, TermError {\r\n    override lazy val toHtml: TypedTag[String] = span(\r\n      cls := \"tooltip\",\r\n      valueText(display := \"inline\"),\r\n      div(cls := \"tooltip-text\", tooltipText),\r\n      cls := \"error-origin\"\r\n    )\r\n\r\n    override lazy val tooltipText: String = message\r\n\r\n    override lazy val valueText: TypedTag[String] = div(\"?\")\r\n\r\n    override val isError: Boolean = true\r\n\r\n    override def prettyPrint: String = message\r\n  }\r\n\r\n  /** An error that occurs due to attempting to process an unknown `Expr`.\r\n    *\r\n    * @param message\r\n    *   The error message.\r\n    */\r\n  case class UnexpectedExprType(override val message: String) extends TypeError\r\n\r\n  case class TypeException(override val message: String) extends TypeError\r\n\r\n  abstract class Literal extends Term {\r\n    val value: Any\r\n\r\n    override lazy val toHtml: TypedTag[String] = p(value.toString)\r\n\r\n    override lazy val toString: String = value.toString\r\n\r\n    override def prettyPrint: String = toString\r\n  }\r\n\r\n  object Literal {\r\n    def fromString(s: String): Literal = {\r\n      if (List(\"true\", \"false\").contains(s.toLowerCase)) {\r\n        LiteralBool(s.toBoolean)\r\n      } else if (s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\") && s.length > 1) {\r\n        LiteralString(s.substring(1, s.length - 1))\r\n      } else if (\"-?\\\\d+\".r.matches(s)) {\r\n        LiteralInt(BigInt(s))\r\n      } else if (\"[A-Za-z_$][\\\\w_$]*\".r.matches(s)) {\r\n        LiteralIdentifier(s)\r\n      } else {\r\n        LiteralAny(s)\r\n      }\r\n    }\r\n  }\r\n\r\n  case class LiteralInt(value: BigInt) extends Literal\r\n\r\n  case class LiteralBool(value: Boolean) extends Literal\r\n\r\n  case class LiteralString(value: String) extends Literal {\r\n    //    override lazy val toHtml: TypedTag[String] = p(s\"\"\"\"$value\"\"\"\")\r\n\r\n    override lazy val toString: String = s\"\"\"\"$value\"\"\"\"\r\n  }\r\n\r\n  case class LiteralIdentifier(value: String) extends Literal {\r\n    override lazy val toString: String = value\r\n  }\r\n\r\n  case class LiteralAny(value: String) extends Literal {\r\n    override lazy val toString: String = value\r\n  }\r\n\r\n  def envToTypeEnv(env: Env): TypeEnv = env.map((k: String, v: Value) => (k, v.typ))\r\n\r\n  enum DisplayMode:\r\n    case Edit, Evaluation, TypeCheck\r\n\r\n  object DisplayMode {\r\n    def fromString(s: String): DisplayMode = s match {\r\n      case \"edit\"       => Edit\r\n      case \"eval\"       => Evaluation\r\n      case \"type-check\" => TypeCheck\r\n      case _            => throw new IllegalArgumentException(s\"Unknown display mode: $s\")\r\n    }\r\n  }\r\n}\r\n","mutants":[{"id":"159","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":152,"column":19},"end":{"line":152,"column":28}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"160","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":152,"column":52},"end":{"line":152,"column":66}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"161","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":152,"column":89},"end":{"line":152,"column":103}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"162","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":137,"column":40},"end":{"line":137,"column":49}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":20},{"id":"163","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":127,"column":19},"end":{"line":127,"column":28}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":120},{"id":"164","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":127,"column":51},"end":{"line":127,"column":59}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":120},{"id":"165","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":127,"column":73},"end":{"line":127,"column":87}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":120},{"id":"166","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":110,"column":19},"end":{"line":110,"column":28}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"167","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":110,"column":51},"end":{"line":110,"column":59}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"168","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":110,"column":73},"end":{"line":110,"column":87}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"169","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":118,"column":28},"end":{"line":118,"column":33}},"status":"Killed","statusReason":"Let with single Let in expression evaluates correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:33)\n  Message: BoolV(false) was not equal to BoolV(true)\n  Location: (TestTemplate.scala:32)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    expressions = Let(gh2,Bool(false),Eq(Var(gh2),Bool(false))),\n    results = BoolV(true),\n    types = BoolType()\n  )\n\nLet with multiple Lets in expression evaluates correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:33)\n  Message: NumV(43) was not equal to NumV(55)\n  Location: (TestTemplate.scala:32)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    expressions = Let(x,Num(43),Let(y,Num(12),Plus(Var(x),Var(y)))),\n    results = NumV(55),\n    types = IntType()\n  )\n\nIf the assign expression in a Let is an error, then that error is returned: NumV(1) was not an instance of languages.LArith$UnexpectedArgValue, but an instance of languages.LArith$NumV","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["43","45","50"],"testsCompleted":39},{"id":"170","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":145,"column":27},"end":{"line":145,"column":34}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":228},{"id":"171","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":175,"column":65},"end":{"line":175,"column":81}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"172","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":114,"column":62},"end":{"line":114,"column":66}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"173","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":217,"column":11},"end":{"line":217,"column":56}},"status":"Killed","statusReason":"languages.LRecTest: For input string: \"n\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":[],"testsCompleted":1},{"id":"174","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":217,"column":11},"end":{"line":217,"column":56}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with incomplete or incorrect literal values: Times(Num(true), Plus(Num(2), Num(\"3\"))) did not equal Times(Num(true), Plus(Num(2), Num(\"3\")))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["36"],"testsCompleted":23},{"id":"175","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":217,"column":16},"end":{"line":217,"column":22}},"status":"Killed","statusReason":"Rec returns an error when the function or parameter names are not valid identifiers: IllegalArgumentException was thrown during property evaluation. (LRecTest.scala:214)\n  Message: For input string: \"\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    identifier = \n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["8"],"testsCompleted":10},{"id":"176","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":217,"column":24},"end":{"line":217,"column":31}},"status":"Killed","statusReason":"Rec returns an error when the function or parameter names are not valid identifiers: IllegalArgumentException was thrown during property evaluation. (LRecTest.scala:214)\n  Message: For input string: \"\"\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    identifier = \n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["8"],"testsCompleted":10},{"id":"177","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":219,"column":18},"end":{"line":219,"column":72}},"status":"Killed","statusReason":"languages.LRecTest: begin 1, end 0, length 1","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":[],"testsCompleted":1},{"id":"178","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":219,"column":18},"end":{"line":219,"column":72}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with incomplete or incorrect literal values: Plus(Num(), Num(\"Hello!\")) did not equal Plus(Num(), Num(\"Hello!\"))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["36"],"testsCompleted":23},{"id":"179","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":219,"column":31},"end":{"line":219,"column":35}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\"\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\\\"\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    literalString = \\\"\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":60},{"id":"180","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":219,"column":37},"end":{"line":219,"column":39}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\"\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\\\"\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    literalString = \\\"\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":60},{"id":"181","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":219,"column":51},"end":{"line":219,"column":55}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\"Hello\"!, \"World\"\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\"Hello\"!, \"World\"!\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 7 (zero based, not counting headings), which had values (\n    literalString = \"Hello\"!, \"World\"!\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":60},{"id":"182","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":219,"column":57},"end":{"line":219,"column":59}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(\"actoria\") did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(\"actoria\") did not equal RecV(\"actoria\", n, IntType(), IntType(), IfThenElse(Eq(Var(n), Num(0)), Num(1), Times(Var(n), Apply(Var(\"actoria\"), Plus(Var(n), Num(-1))))), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(\"actoria\") was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(\"actoria\")) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(\"actoria\")) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nRec pretty prints correctly: \"rec [\"actoria\"(n: Int): Int. (if (n == 0) then 1 else (n × ((\"actoria\"]) (n + -1))))\" did not equal \"rec [factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial]) (n + -1))))\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","9"],"testsCompleted":10},{"id":"183","mutatorName":"EqualityOperator","replacement":">=","location":{"start":{"line":219,"column":69},"end":{"line":219,"column":70}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: StringIndexOutOfBoundsException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: begin 1, end 0, length 1\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    literalString = \"\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":60},{"id":"184","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":219,"column":69},"end":{"line":219,"column":70}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with incomplete or incorrect literal values: Plus(Num(), Num(\"Hello!\")) did not equal Plus(Num(), Num(\"Hello!\"))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["36"],"testsCompleted":23},{"id":"185","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":219,"column":69},"end":{"line":219,"column":70}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with incomplete or incorrect literal values: Plus(Num(), Num(\"Hello!\")) did not equal Plus(Num(), Num(\"Hello!\"))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["36"],"testsCompleted":23},{"id":"186","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":221,"column":18},"end":{"line":221,"column":39}},"status":"Killed","statusReason":"languages.LRecTest: For input string: \"n\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":[],"testsCompleted":1},{"id":"187","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":221,"column":18},"end":{"line":221,"column":39}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with all children completed: Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3)))) did not equal Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3))))\n\nCorrectly read expression from VariableNode with incomplete or incorrect literal values: Times(Num(true), Plus(Num(2), Num(\"3\"))) did not equal Times(Num(true), Plus(Num(2), Num(\"3\")))","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["35","36"],"testsCompleted":23},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":221,"column":18},"end":{"line":221,"column":26}},"status":"Killed","statusReason":"Rec returns an error when the function or parameter names are not valid identifiers: NumberFormatException was thrown during property evaluation. (LRecTest.scala:214)\n  Message: Zero length BigInteger\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    identifier = \n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["8"],"testsCompleted":10},{"id":"189","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":221,"column":20},"end":{"line":221,"column":21}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with all children completed: Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3)))) did not equal Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3))))\n\nCorrectly read expression from VariableNode with incomplete or incorrect literal values: Times(Num(true), Plus(Num(2), Num(\"3\"))) did not equal Times(Num(true), Plus(Num(2), Num(\"3\")))","description":"[0:1, 0:2) Remove the quantifier from `-?` to `-`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["35","36"],"testsCompleted":23},{"id":"190","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":221,"column":23},"end":{"line":221,"column":24}},"status":"Killed","statusReason":"Correctly read expression from VariableNode with all children completed: Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3)))) did not equal Plus(Num(75), Times(Num(3), Plus(Num(2), Num(3))))","description":"[0:4, 0:5) Remove the quantifier from `\\d+` to `\\d`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["35"],"testsCompleted":23},{"id":"191","mutatorName":"RegularExpression","replacement":"\\D","location":{"start":{"line":221,"column":21},"end":{"line":221,"column":23}},"status":"Killed","statusReason":"languages.LRecTest: For input string: \"n\"","description":"[0:2, 0:4) Negate the predefined character class `\\d` to `\\D`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":[],"testsCompleted":1},{"id":"192","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":223,"column":18},"end":{"line":223,"column":51}},"status":"Killed","statusReason":"Rec returns an error when the function or parameter names are not valid identifiers: TestFailedException was thrown during property evaluation. (LRecTest.scala:204)\n  Message: Func(IntType(), IntType()) was not an instance of languages.LLet$InvalidIdentifierTypeError, but an instance of languages.LLam$Func\n  Location: (LRecTest.scala:202)\n  Occurred at table row 8 (zero based, not counting headings), which had values (\n    expr = Rec( x,y,IntType(),IntType(),Num(1))\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["8"],"testsCompleted":10},{"id":"193","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":223,"column":18},"end":{"line":223,"column":51}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(f) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(f) did not equal RecV(f, x, IntType(), IntType(), Num(1), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nInfinite recursion results in a stack overflow error: ApplyToNonFunctionError(InvalidIdentifierEvalError(f)) was not an instance of languages.AbstractLanguage$EvalException, but an instance of languages.LLam$ApplyToNonFunctionError\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","6","7","9"],"testsCompleted":10},{"id":"194","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":223,"column":18},"end":{"line":223,"column":38}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(f) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(f) did not equal RecV(f, x, IntType(), IntType(), Num(1), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nInfinite recursion results in a stack overflow error: ApplyToNonFunctionError(InvalidIdentifierEvalError(f)) was not an instance of languages.AbstractLanguage$EvalException, but an instance of languages.LLam$ApplyToNonFunctionError\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown\n\nRec returns an error when the function or parameter names are not valid identifiers: TestFailedException was thrown during property evaluation. (LRecTest.scala:214)\n  Message: Func(IntType(), IntType()) was not an instance of languages.LLet$InvalidIdentifierTypeError, but an instance of languages.LLam$Func\n  Location: (LRecTest.scala:209)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    identifier = \n  )\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","6","7","8","9"],"testsCompleted":10},{"id":"195","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":223,"column":19},"end":{"line":223,"column":20}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(f) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(f) did not equal RecV(f, x, IntType(), IntType(), Num(1), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nInfinite recursion results in a stack overflow error: ApplyToNonFunctionError(InvalidIdentifierEvalError(f)) was not an instance of languages.AbstractLanguage$EvalException, but an instance of languages.LLam$ApplyToNonFunctionError\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown\n\nRec returns an error when the function or parameter names are not valid identifiers: TestFailedException was thrown during property evaluation. (LRecTest.scala:214)\n  Message: Func(IntType(), IntType()) was not an instance of languages.LLet$InvalidIdentifierTypeError, but an instance of languages.LLam$Func\n  Location: (LRecTest.scala:209)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    identifier = .\n  )\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","description":"[0:0, 0:1) Negate the character class `[A-Za-z_$]` to `[^A-Za-z_$]`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","6","7","8","9"],"testsCompleted":10},{"id":"196","mutatorName":"RegularExpression","replacement":"","location":{"start":{"line":223,"column":35},"end":{"line":223,"column":36}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(f) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(f) did not equal RecV(f, x, IntType(), IntType(), Num(1), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nInfinite recursion results in a stack overflow error: ApplyToNonFunctionError(InvalidIdentifierEvalError(f)) was not an instance of languages.AbstractLanguage$EvalException, but an instance of languages.LLam$ApplyToNonFunctionError\n\nInfinite recursion in nodes results in a DepthLimitExceededException in evaluation mode: Expected exception languages.AbstractNodeLanguage$DepthLimitExceededException to be thrown, but no exception was thrown\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","description":"[0:16, 0:17) Remove the quantifier from `[\\w_$]*` to `[\\w_$]`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","6","7","9"],"testsCompleted":10},{"id":"197","mutatorName":"RegularExpression","replacement":"[^","location":{"start":{"line":223,"column":29},"end":{"line":223,"column":30}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(factorial) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(factorial) did not equal RecV(factorial, n, IntType(), IntType(), IfThenElse(Eq(Var(n), Num(0)), Num(1), Times(Var(n), Apply(Var(factorial), Plus(Var(n), Num(-1))))), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","description":"[0:10, 0:11) Negate the character class `[\\w_$]` to `[^\\w_$]`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","9"],"testsCompleted":10},{"id":"198","mutatorName":"RegularExpression","replacement":"\\W","location":{"start":{"line":223,"column":30},"end":{"line":223,"column":32}},"status":"Killed","statusReason":"Rec type-checks correctly: InvalidIdentifierTypeError(factorial) did not equal Func(IntType(), IntType())\n\nRec evaluates correctly: InvalidIdentifierEvalError(factorial) did not equal RecV(factorial, n, IntType(), IntType(), IfThenElse(Eq(Var(n), Num(0)), Num(1), Times(Var(n), Apply(Var(factorial), Plus(Var(n), Num(-1))))), Map())\n\nRec verifies that its expression matches the reported type: InvalidIdentifierTypeError(factorial) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLet$InvalidIdentifierTypeError\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(InvalidIdentifierTypeError(factorial)) did not equal IntType()\n\nApplying with Rec evaluates correctly: ApplyToNonFunctionError(InvalidIdentifierEvalError(factorial)) did not equal NumV(120)\n\nApplying with Rec correctly shows a phantom tree: 2 did not equal 3\n\nRec pretty prints correctly: \"[<span class=\"tooltip error-origin\"><div>?</div><div class=\"tooltip-text\">Invalid identifier 'factorial'</div></span>]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","description":"[0:11, 0:13) Negate the predefined character class `\\w` to `\\W`","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["0","1","2","3","4","5","9"],"testsCompleted":10},{"id":"199","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":238,"column":42},"end":{"line":238,"column":57}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\"test\"\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 5 (zero based, not counting headings), which had values (\n    literalString = \"test\"\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"killedBy":["71"],"testsCompleted":31},{"id":"200","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":259,"column":63},"end":{"line":259,"column":90}},"status":"Survived","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":35},{"id":"201","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":191,"column":37},"end":{"line":191,"column":41}},"status":"Killed","statusReason":"Plus and Times pass errors on: UnexpectedArgType(\"Plus cannot accept (UnexpectedArgType(Num can only accept LiteralInt, not \"invalid\"), IntType())\") did not equal UnexpectedArgType(\"Num can only accept LiteralInt, not \"invalid\"\")\n\nAttempting to evaluate an expression not defined in LArith results in an error: UnexpectedArgType(\"Plus cannot accept (UnexpectedExprType(BlankExprDropDown()), IntType())\") was not an instance of languages.AbstractLanguage$UnexpectedExprType, but an instance of languages.LArith$UnexpectedArgType","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["106","107"],"testsCompleted":74},{"id":"202","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":256,"column":12},"end":{"line":256,"column":18}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should return a successful response: 400 Bad Request was not equal to 200 OK\n\nThe process-action endpoint should handle POST requests should return a response with nodeString and html fields: text/plain; charset=UTF-8 was not equal to application/json\n\nThe process-action endpoint should handle POST requests should return a response with correct nodeString: Could not unmarshal response to type 'app.NodeResponse' for `responseAs` assertion: akka.http.scaladsl.unmarshalling.Unmarshaller$UnsupportedContentTypeException: Unsupported Content-Type [Some(text/plain; charset=UTF-8)], supported: application/json\n\nResponse was: HttpResponse(400 Bad Request,List(),HttpEntity.Strict(text/plain; charset=UTF-8,62 bytes total),HttpProtocol(HTTP/1.1))\n\nThe process-action endpoint should handle POST requests should return consistent responses: Could not unmarshal response to type 'app.NodeResponse' for `responseAs` assertion: akka.http.scaladsl.unmarshalling.Unmarshaller$UnsupportedContentTypeException: Unsupported Content-Type [Some(text/plain; charset=UTF-8)], supported: application/json\n\nResponse was: HttpResponse(400 Bad Request,List(),HttpEntity.Strict(text/plain; charset=UTF-8,62 bytes total),HttpProtocol(HTTP/1.1))\n\nThe process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes: 400 Bad Request was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["252","253","254","255","256"],"testsCompleted":35},{"id":"203","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":257,"column":12},"end":{"line":257,"column":18}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes: 400 Bad Request was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["256"],"testsCompleted":35},{"id":"204","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":258,"column":12},"end":{"line":258,"column":24}},"status":"Killed","statusReason":"The process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes: 400 Bad Request was not equal to 200 OK","coveredBy":["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["256"],"testsCompleted":35},{"id":"205","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":37,"column":34},"end":{"line":37,"column":39}},"status":"Killed","statusReason":"be correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:99)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:97)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:179)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:177)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["177","187"],"testsCompleted":79},{"id":"206","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":189,"column":57},"end":{"line":189,"column":60}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"207","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":112,"column":47},"end":{"line":112,"column":51}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":99},{"id":"208","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":158,"column":37},"end":{"line":158,"column":41}},"status":"Killed","statusReason":"Var results an error when variable not found: UnexpectedArgValue(\"Plus cannot accept (UnknownVariableEvalError(foo), NumV(1))\") was not an instance of languages.LLet$UnknownVariableEvalError, but an instance of languages.LArith$UnexpectedArgValue","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["46"],"testsCompleted":39},{"id":"209","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":156,"column":57},"end":{"line":156,"column":60}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"210","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":181,"column":14},"end":{"line":181,"column":23}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"211","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":182,"column":28},"end":{"line":182,"column":36}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"212","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":183,"column":18},"end":{"line":183,"column":32}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"213","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":184,"column":14},"end":{"line":184,"column":28}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":55},{"id":"214","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":133,"column":28},"end":{"line":133,"column":33}},"status":"Killed","statusReason":"Let with single Let in expression type-checks correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:27)\n  Message: BoolType() was not equal to IntType()\n  Location: (TestTemplate.scala:26)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    expressions = Let(gri3hga3,Bool(true),IfThenElse(Var(gri3hga3),Num(1),Num(2))),\n    results = NumV(1),\n    types = IntType()\n  )\n\nLet with multiple Lets in expression type-checks correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:27)\n  Message: IntType() was not equal to BoolType()\n  Location: (TestTemplate.scala:26)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    expressions = Let(hello,Plus(Let(world,Num(2),Times(Var(world),Num(-1))),Num(6)),Eq(Num(4),Var(hello))),\n    results = BoolV(true),\n    types = BoolType()\n  )\n\nIf the assign expression in a Let is an error, then that error is returned: IntType() was not an instance of languages.LArith$UnexpectedArgType, but an instance of languages.LArith$IntType","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["42","44","50"],"testsCompleted":39},{"id":"215","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":174,"column":65},"end":{"line":174,"column":81}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true}],"language":"scala"},"src/main/scala/languages/LLet.scala":{"source":"package languages\r\n\r\nclass LLet extends LIf {\r\n  // expressions\r\n\r\n  case class Var(v: Literal) extends Expr {\r\n    override def evalInner(env: Env): Value = v match {\r\n      case LiteralIdentifier(identifier) => env.getOrElse(identifier, UnknownVariableEvalError(v))\r\n      case _                             => InvalidIdentifierEvalError(v)\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = v match {\r\n      case LiteralIdentifier(identifier) => tEnv.getOrElse(identifier, UnknownVariableTypeError(v))\r\n      case _                             => InvalidIdentifierTypeError(v)\r\n    }\r\n\r\n    override def prettyPrint: String = v.toString\r\n  }\r\n\r\n  object Var {\r\n    def apply(v: Variable): Var = new Var(Literal.fromString(v))\r\n  }\r\n\r\n  case class Let(v: Literal, assign: Expr, bound: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = v match {\r\n      case LiteralIdentifier(identifier) =>\r\n        val assign_val: Value = assign.eval(env)\r\n        if (assign_val.isError) assign_val else bound.eval(env + (identifier -> assign_val))\r\n      case _ => InvalidIdentifierEvalError(v)\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = v match {\r\n      case LiteralIdentifier(identifier) =>\r\n        val assign_type: Type = assign.typeCheck(tEnv)\r\n        if (assign_type.isError) assign_type else bound.typeCheck(tEnv + (identifier -> assign_type))\r\n      case _ => InvalidIdentifierTypeError(v)\r\n    }\r\n\r\n    override def getChildrenBase(env: Env): List[(Term, Env)] =\r\n      List((v, env), (assign, env), (bound, env + (v.toString -> assign.eval(env))))\r\n\r\n    override def getChildrenEval(env: Env): List[(Term, Env)] =\r\n      List((assign, env), (bound, env + (v.toString -> assign.eval(env))))\r\n\r\n    override def getChildrenTypeCheck(tEnv: TypeEnv): List[(Term, TypeEnv)] =\r\n      List((assign, tEnv), (bound, tEnv + (v.toString -> assign.typeCheck(tEnv))))\r\n\r\n    override def prettyPrint: String = {\r\n      val assignExprString = assign match {\r\n        case _: Var => assign.prettyPrint\r\n        case _: Num => assign.prettyPrint\r\n        case _: Bool => assign.prettyPrint\r\n        case _ => s\"(${assign.prettyPrint})\"\r\n      }\r\n      s\"let $v = $assignExprString in ${bound.prettyPrint}\"\r\n    }\r\n  }\r\n\r\n  object Let {\r\n    def apply(v: Variable, assign: Expr, bound: Expr): Let = new Let(Literal.fromString(v), assign, bound)\r\n  }\r\n\r\n  // errors\r\n\r\n  case class UnknownVariableEvalError(v: Literal) extends EvalError {\r\n    override val message: String = s\"Unknown variable identifier '$v'\"\r\n\r\n    override val typ: Type = UnknownVariableTypeError(v)\r\n  }\r\n\r\n  case class UnknownVariableTypeError(v: Literal) extends TypeError {\r\n    override val message: String = s\"Unknown variable identifier '$v'\"\r\n\r\n    override def prettyPrint: String = s\"UnknownVariable($v)\"\r\n  }\r\n\r\n  case class InvalidIdentifierEvalError(v: Literal) extends EvalError {\r\n    override val message: String = s\"Invalid identifier '$v'\"\r\n\r\n    override val typ: Type = InvalidIdentifierTypeError(v)\r\n  }\r\n\r\n  case class InvalidIdentifierTypeError(v: Literal) extends TypeError {\r\n    override val message: String = s\"Invalid identifier '$v'\"\r\n  }\r\n\r\n  override def calculateExprClassList: List[Class[Expr]] = {\r\n    super.calculateExprClassList ++ List(classOf[Var], classOf[Let]).map(_.asInstanceOf[Class[Expr]])\r\n  }\r\n}\r\n\r\nobject LLet extends LLet {}\r\n","mutants":[{"id":"525","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":84,"column":36},"end":{"line":84,"column":62}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":46},{"id":"526","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":74,"column":40},"end":{"line":74,"column":62}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"527","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":78,"column":36},"end":{"line":78,"column":62}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":46},{"id":"528","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":28,"column":13},"end":{"line":28,"column":31}},"status":"Killed","statusReason":"Let with single Let in expression evaluates correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:33)\n  Message: BoolV(false) was not equal to BoolV(true)\n  Location: (TestTemplate.scala:32)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    expressions = Let(gh2,Bool(false),Eq(Var(gh2),Bool(false))),\n    results = BoolV(true),\n    types = BoolType()\n  )\n\nLet with multiple Lets in expression evaluates correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:33)\n  Message: NumV(43) was not equal to NumV(55)\n  Location: (TestTemplate.scala:32)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    expressions = Let(x,Num(43),Let(y,Num(12),Plus(Var(x),Var(y)))),\n    results = NumV(55),\n    types = IntType()\n  )","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"killedBy":["43","45"],"testsCompleted":16},{"id":"529","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":28,"column":13},"end":{"line":28,"column":31}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"testsCompleted":16},{"id":"530","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":72,"column":36},"end":{"line":72,"column":71}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":36},{"id":"531","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":66,"column":36},"end":{"line":66,"column":71}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":36},{"id":"532","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":35,"column":13},"end":{"line":35,"column":32}},"status":"Killed","statusReason":"Let with single Let in expression type-checks correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:27)\n  Message: BoolType() was not equal to IntType()\n  Location: (TestTemplate.scala:26)\n  Occurred at table row 3 (zero based, not counting headings), which had values (\n    expressions = Let(gri3hga3,Bool(true),IfThenElse(Var(gri3hga3),Num(1),Num(2))),\n    results = NumV(1),\n    types = IntType()\n  )\n\nLet with multiple Lets in expression type-checks correctly: TestFailedException was thrown during property evaluation. (TestTemplate.scala:27)\n  Message: IntType() was not equal to BoolType()\n  Location: (TestTemplate.scala:26)\n  Occurred at table row 1 (zero based, not counting headings), which had values (\n    expressions = Let(hello,Plus(Let(world,Num(2),Times(Var(world),Num(-1))),Num(6)),Eq(Num(4),Var(hello))),\n    results = BoolV(true),\n    types = BoolType()\n  )","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"killedBy":["42","44"],"testsCompleted":16},{"id":"533","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":35,"column":13},"end":{"line":35,"column":32}},"status":"Survived","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"testsCompleted":16},{"id":"534","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":53,"column":19},"end":{"line":53,"column":45}},"status":"Killed","statusReason":"Let pretty prints correctly: \"let x = [] in x\" did not equal \"let x = [(let y = 3 in y)] in x\"","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"killedBy":["52"],"testsCompleted":16},{"id":"535","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":55,"column":7},"end":{"line":55,"column":60}},"status":"Killed","statusReason":"Let pretty prints correctly: \"[]\" did not equal \"[let x = 1 in x]\"","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"killedBy":["52"],"testsCompleted":16}],"language":"scala"},"src/main/scala/app/UtilityFunctions.scala":{"source":"package app\r\n\r\nobject UtilityFunctions {\r\n  // String escaping\r\n  // https://stackoverflow.com/a/40073137\r\n\r\n  def quote(s: String): String = \"\\\"\" + escape(s) + \"\\\"\"\r\n  private def escape(s: String): String = s.flatMap(escapedChar)\r\n\r\n  private def escapedChar(ch: Char): String = ch match {\r\n    case '\\b' => \"\\\\b\"\r\n    case '\\t' => \"\\\\t\"\r\n    case '\\n' => \"\\\\n\"\r\n    case '\\f' => \"\\\\f\"\r\n    case '\\r' => \"\\\\r\"\r\n    case '\"'  => \"\\\\\\\"\"\r\n    case '\\'' => \"\\\\\\'\"\r\n    case '\\\\' => \"\\\\\\\\\"\r\n    case _ =>\r\n      if (ch.isControl) \"\\\\0\" + Integer.toOctalString(ch.toInt)\r\n      else String.valueOf(ch)\r\n  }\r\n\r\n  def unquote(s: String): String = if (s.length > 1 && s.startsWith(\"\\\"\") && s.endsWith(\"\\\"\")) {\r\n    unescape(s.substring(1, s.length - 1))\r\n  } else {\r\n    throw new Exception(\"Invalid string literal\")\r\n  }\r\n\r\n  private def unescape(s: String): String = {\r\n    val res = new StringBuilder\r\n    var i = 0\r\n    var escaped = false\r\n\r\n    s.foreach(c => {\r\n      if (escaped) {\r\n        c match {\r\n          case 'b'  => res += '\\b'\r\n          case 't'  => res += '\\t'\r\n          case 'n'  => res += '\\n'\r\n          case 'f'  => res += '\\f'\r\n          case 'r'  => res += '\\r'\r\n          case '\"'  => res += '\"'\r\n          case '\\'' => res += '\\''\r\n          case '\\\\' => res += '\\\\'\r\n          case _    => throw new Exception(\"Invalid escape sequence\")\r\n        }\r\n        escaped = false\r\n      } else {\r\n        if (c == '\\\\') {\r\n          escaped = true\r\n        } else {\r\n          res += c\r\n        }\r\n      }\r\n    })\r\n\r\n    if (escaped) {\r\n      throw new Exception(\"Invalid escape sequence\")\r\n    }\r\n\r\n    res.toString\r\n  }\r\n}\r\n","mutants":[{"id":"0","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":59,"column":27},"end":{"line":59,"column":52}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"1","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":36,"column":11},"end":{"line":36,"column":18}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid escape sequence\n\nCan correctly read a VariableNode with a LiteralNode: Invalid escape sequence\n\nCan correctly read the parents of a Node tree: Invalid escape sequence","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"10","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":24,"column":40},"end":{"line":24,"column":94}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"11","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":24,"column":40},"end":{"line":24,"column":94}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid string literal\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid string literal\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid string literal\n\nCan correctly read a VariableNode with a LiteralNode: Invalid string literal\n\nCan correctly read the parents of a Node tree: Invalid string literal","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"12","mutatorName":"EqualityOperator","replacement":">=","location":{"start":{"line":24,"column":49},"end":{"line":24,"column":50}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"13","mutatorName":"EqualityOperator","replacement":"<","location":{"start":{"line":24,"column":49},"end":{"line":24,"column":50}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid string literal\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid string literal\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid string literal\n\nCan correctly read a VariableNode with a LiteralNode: Invalid string literal\n\nCan correctly read the parents of a Node tree: Invalid string literal","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"14","mutatorName":"EqualityOperator","replacement":"==","location":{"start":{"line":24,"column":49},"end":{"line":24,"column":50}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid string literal\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid string literal\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid string literal\n\nCan correctly read a VariableNode with a LiteralNode: Invalid string literal\n\nCan correctly read the parents of a Node tree: Invalid string literal","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"15","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":24,"column":53},"end":{"line":24,"column":55}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"16","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":24,"column":69},"end":{"line":24,"column":73}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"17","mutatorName":"LogicalOperator","replacement":"||","location":{"start":{"line":24,"column":75},"end":{"line":24,"column":77}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"18","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":24,"column":89},"end":{"line":24,"column":93}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"19","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":18,"column":18},"end":{"line":18,"column":24}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\\\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    literalString = \\\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"killedBy":["71"],"testsCompleted":21},{"id":"2","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":36,"column":11},"end":{"line":36,"column":18}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: Exception was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Invalid escape sequence\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    literalString = \\\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":34},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":15,"column":18},"end":{"line":15,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"21","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":14,"column":18},"end":{"line":14,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"22","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":33,"column":19},"end":{"line":33,"column":24}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid escape sequence\n\nCan correctly read a VariableNode with a LiteralNode: Invalid escape sequence\n\nCan correctly read the parents of a Node tree: Invalid escape sequence","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"23","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":17,"column":18},"end":{"line":17,"column":24}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"1\\\".--;\\\"\\\\\\4 \\t \\\\\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"1\\\"'.--';\\\"\\\\\\4 \\t \\\\\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 8 (zero based, not counting headings), which had values (\n    literalString = 1\\\"'.--';\\\"\\\\\\4 \\t \\\\\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"killedBy":["71"],"testsCompleted":21},{"id":"24","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":20,"column":11},"end":{"line":20,"column":23}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":23},{"id":"25","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":20,"column":11},"end":{"line":20,"column":23}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":198},{"id":"26","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":20,"column":25},"end":{"line":20,"column":30}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":198},{"id":"27","mutatorName":"BooleanLiteral","replacement":"true","location":{"start":{"line":48,"column":19},"end":{"line":48,"column":24}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: Exception was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Invalid escape sequence\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    literalString = \\\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"killedBy":["71"],"testsCompleted":21},{"id":"28","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":27,"column":25},"end":{"line":27,"column":49}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"29","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":7,"column":34},"end":{"line":7,"column":38}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: None.get\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":23},{"id":"3","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":16,"column":18},"end":{"line":16,"column":24}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\"\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 2 (zero based, not counting headings), which had values (\n    literalString = \"\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"killedBy":["71"],"testsCompleted":21},{"id":"30","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":7,"column":53},"end":{"line":7,"column":57}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: None.get\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: None.get\n\nCan correctly read a VariableNode with a ExprChoiceNode: None.get\n\nCan correctly read a VariableNode with a LiteralNode: Could not parse node string: VariableNode(Num, List(LiteralNode()\n\nCan correctly read the parents of a Node tree: None.get","coveredBy":["0","1","2","3","4","5","6","7","8","9","25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":23},{"id":"31","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":11,"column":18},"end":{"line":11,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"32","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":58,"column":9},"end":{"line":58,"column":16}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid escape sequence\n\nCan correctly read a VariableNode with a LiteralNode: Invalid escape sequence\n\nCan correctly read the parents of a Node tree: Invalid escape sequence","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"33","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":58,"column":9},"end":{"line":58,"column":16}},"status":"Survived","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":144},{"id":"34","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":51,"column":21},"end":{"line":51,"column":25}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\\\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    literalString = \\\n  )","coveredBy":["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"killedBy":["71"],"testsCompleted":21},{"id":"4","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":12,"column":18},"end":{"line":12,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"5","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":13,"column":18},"end":{"line":13,"column":23}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"6","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":50,"column":13},"end":{"line":50,"column":22}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid escape sequence\n\nCan correctly read a VariableNode with a LiteralNode: Invalid escape sequence\n\nCan correctly read the parents of a Node tree: Invalid escape sequence","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"7","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":50,"column":13},"end":{"line":50,"column":22}},"status":"Killed","statusReason":"LiteralNode should correctly convert to and from a string with escapes: TestFailedException was thrown during property evaluation. (NodeSpec.scala:427)\n  Message: Some(VariableNode(\"Num\", List(LiteralNode(\"\\\\\")))) was not equal to Some(VariableNode(\"Num\", List(LiteralNode(\"\\\"))))\n  Location: (NodeSpec.scala:422)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    literalString = \\\n  )","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["71"],"testsCompleted":34},{"id":"8","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":50,"column":15},"end":{"line":50,"column":17}},"status":"Killed","statusReason":"Can correctly read a VariableNode with 2 VariableNode children from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String: Invalid escape sequence\n\nCan correctly read a VariableNode with a ExprChoiceNode: Invalid escape sequence\n\nCan correctly read a VariableNode with a LiteralNode: Invalid escape sequence\n\nCan correctly read the parents of a Node tree: Invalid escape sequence","coveredBy":["25","26","27","28","29","30","31","32","33","34","35","36","37","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["28","29","30","31","33"],"testsCompleted":13},{"id":"9","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":46,"column":44},"end":{"line":46,"column":69}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true}],"language":"scala"},"src/main/scala/languages/LRec.scala":{"source":"package languages\r\n\r\nimport scalatags.Text\r\nimport scalatags.Text.TypedTag\r\nimport scalatags.Text.all.*\r\n\r\nclass LRec extends LLam {\r\n  // expressions\r\n  case class Rec(f: Literal, v: Literal, inType: Type, outType: Type, e: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = f match {\r\n      case LiteralIdentifier(f_id) =>\r\n        v match {\r\n          case LiteralIdentifier(v_id) => RecV(f, v, inType, outType, e, env)\r\n          case _                       => InvalidIdentifierEvalError(v)\r\n        }\r\n      case _ => InvalidIdentifierEvalError(f)\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = f match {\r\n      case LiteralIdentifier(f_id) =>\r\n        v match {\r\n          case LiteralIdentifier(v_id) =>\r\n            val determinedOutType = e.typeCheck(tEnv + (f.toString -> Func(inType, outType)) + (v.toString -> inType))\r\n            if (outType == determinedOutType) Func(inType, outType)\r\n            else RecursiveFunctionExpressionOutTypeMismatch(outType, determinedOutType)\r\n          case _ => InvalidIdentifierTypeError(v)\r\n        }\r\n      case _ => InvalidIdentifierTypeError(f)\r\n    }\r\n\r\n    override def getChildrenBase(env: Env): List[(Term, Env)] = List(\r\n      (f, env),\r\n      (v, env),\r\n      (inType, env),\r\n      (outType, env),\r\n      (e, env ++ Map(f.toString -> PlaceholderValue(Func(inType, outType)), v.toString -> PlaceholderValue(inType)))\r\n    )\r\n\r\n    override def getChildrenTypeCheck(tEnv: TypeEnv): List[(Term, TypeEnv)] = List(\r\n      (e, tEnv ++ Map(f.toString -> Func(inType, outType), v.toString -> inType))\r\n    )\r\n\r\n    override def getChildrenEval(env: Env): List[(Term, Env)] = Nil\r\n\r\n    override def prettyPrint: String = prettyPrintRec(f, v, inType, outType, e)\r\n  }\r\n\r\n  object Rec {\r\n    def apply(f: String, v: String, in_typ: Type, out_typ: Type, e: Expr): Rec =\r\n      Rec(Literal.fromString(f), Literal.fromString(v), in_typ, out_typ, e)\r\n  }\r\n\r\n  // values\r\n  case class RecV(f: Literal, v: Literal, in_typ: Type, out_typ: Type, e: Expr, env: Env) extends FunctionValue {\r\n    override val typ: Type = Func(in_typ, out_typ)\r\n\r\n    override def getFunctionEvaluation(applyValue: Value): (Expr, Env) =\r\n      (e, env ++ Map(f.toString -> this, v.toString -> applyValue))\r\n\r\n    override def evalApply(value: Value): Value = e.eval(env ++ Map(f.toString -> this, v.toString -> value))\r\n\r\n    override lazy val valueText: Text.TypedTag[String] = div(\r\n      raw(\r\n        RecV(\r\n          f,\r\n          v,\r\n          TypePlaceholder(in_typ.toHtml.toString),\r\n          TypePlaceholder(out_typ.toHtml.toString),\r\n          ExprPlaceholder(e.toHtml.toString),\r\n          env\r\n        ).prettyPrint\r\n      )\r\n    )\r\n\r\n    override def prettyPrint: String = prettyPrintRec(f, v, in_typ, out_typ, e)\r\n  }\r\n\r\n  private def prettyPrintRec(f: Literal, v: Literal, in_typ: Type, out_typ: Type, e: Expr) =\r\n    s\"rec $f($v: ${in_typ.prettyPrint}): ${out_typ.prettyPrint}. ${e.prettyPrint}\"\r\n\r\n  override def calculateExprClassList: List[Class[Expr]] = {\r\n    super.calculateExprClassList ++ List(classOf[Rec]).map(_.asInstanceOf[Class[Expr]])\r\n  }\r\n\r\n  class RecursiveFunctionExpressionOutTypeMismatch(declared: Type, actual: Type) extends TypeError {\r\n    override val message: String =\r\n      s\"Recursive function expression declared return type $declared does not match actual return type $actual\"\r\n  }\r\n}\r\n\r\nobject LRec extends LRec {}\r\n","mutants":[{"id":"536","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":24,"column":17},"end":{"line":24,"column":45}},"status":"Killed","statusReason":"Rec verifies that its expression matches the reported type: Func(IntType(), IntType()) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLam$Func","coveredBy":["0","1","2","3","4","5","6","7","8","9","78"],"killedBy":["2"],"testsCompleted":10},{"id":"537","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":24,"column":17},"end":{"line":24,"column":45}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@b9d018b did not equal Func(IntType(), IntType())\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@429aeac1) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","78"],"killedBy":["0","3"],"testsCompleted":10},{"id":"538","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":24,"column":25},"end":{"line":24,"column":27}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@79eeff87 did not equal Func(IntType(), IntType())\n\nRec verifies that its expression matches the reported type: Func(IntType(), IntType()) was not an instance of languages.LRec$RecursiveFunctionExpressionOutTypeMismatch, but an instance of languages.LLam$Func\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@6b4fc2d1) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","78"],"killedBy":["0","2","3"],"testsCompleted":10},{"id":"539","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":79,"column":5},"end":{"line":79,"column":83}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"[]\" did not equal \"[rec factorial(n: Int): Int. (if (n == 0) then 1 else (n × ((factorial) (n + -1))))]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9"],"killedBy":["9"],"testsCompleted":10},{"id":"540","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":87,"column":7},"end":{"line":87,"column":112}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9"],"testsCompleted":10}],"language":"scala"},"src/main/scala/languages/ClickDeduceLanguage.scala":{"source":"package languages\r\n\r\n/** Parent trait for all languages designed to be loaded in ClickDeduce.\r\n  */\r\ntrait ClickDeduceLanguage extends AbstractActionLanguage {\r\n  lang =>\r\n\r\n}\r\n","mutants":[],"language":"scala"},"src/main/scala/languages/AbstractActionLanguage.scala":{"source":"package languages\r\n\r\ntrait AbstractActionLanguage extends AbstractNodeLanguage {\r\n  private def getActionClass(actionName: String): Class[Action] = (actionName match {\r\n    case \"SelectExprAction\"  => classOf[SelectExprAction]\r\n    case \"SelectTypeAction\"  => classOf[SelectTypeAction]\r\n    case \"EditLiteralAction\" => classOf[EditLiteralAction]\r\n    case \"DeleteAction\"      => classOf[DeleteAction]\r\n    case \"PasteAction\"       => classOf[PasteAction]\r\n    case \"IdentityAction\"    => classOf[IdentityAction]\r\n    case _                   => throw new ActionInvocationException(s\"Unknown action name: $actionName\")\r\n  }).asInstanceOf[Class[Action]]\r\n\r\n  def createAction(\r\n    actionName: String,\r\n    nodeString: String,\r\n    treePathString: String,\r\n    extraArgs: List[String],\r\n    modeName: String = \"edit\"\r\n  ): Action = {\r\n    val node = Node.read(nodeString) match {\r\n      case Some(n: OuterNode) => n\r\n      case Some(n)            => throw new ActionInvocationException(s\"Expected OuterNode, got $n\")\r\n      case _                  => throw new NodeStringParseException(nodeString)\r\n    }\r\n    val treePath = Node.readPathString(treePathString)\r\n    val actionClass = getActionClass(actionName)\r\n    val constructor = actionClass.getConstructors.headOption match {\r\n      case Some(c) => c\r\n      case None    => throw new ActionInvocationException(s\"No constructor found for $actionClass\")\r\n    }\r\n    var remainingExtraArgs = extraArgs\r\n    val arguments = constructor.getParameterTypes.map {\r\n      case c if classOf[AbstractActionLanguage] isAssignableFrom c => this\r\n      case c if classOf[Node] isAssignableFrom c                   => node\r\n      case c if classOf[List[Int]] isAssignableFrom c              => treePath\r\n      case c if classOf[String] isAssignableFrom c =>\r\n        if (remainingExtraArgs.isEmpty) {\r\n          throw new ActionInvocationException(s\"Missing parameter for $actionClass\")\r\n        }\r\n        val arg = remainingExtraArgs.head\r\n        remainingExtraArgs = remainingExtraArgs.tail\r\n        arg\r\n      case c => throw new ActionInvocationException(s\"Unexpected parameter type in createAction: $c\")\r\n    }\r\n    if (remainingExtraArgs.nonEmpty) {\r\n      throw new ActionInvocationException(s\"Too many parameters for $actionClass\")\r\n    }\r\n    try {\r\n      val result = constructor.newInstance(arguments: _*)\r\n      result.asInstanceOf[Action]\r\n    } catch {\r\n      case e: Exception => throw new ActionInvocationException(s\"Error invoking constructor for $actionClass: $e\")\r\n    }\r\n  }\r\n\r\n  abstract class Action(val originalTree: OuterNode, val treePath: List[Int]) {\r\n    lazy val newTree: OuterNode\r\n  }\r\n\r\n  case class SelectExprAction(\r\n    override val originalTree: OuterNode,\r\n    override val treePath: List[Int],\r\n    exprChoiceName: String\r\n  ) extends Action(originalTree, treePath) {\r\n    override lazy val newTree: OuterNode = {\r\n      val exprNode = VariableNode.createFromExprName(exprChoiceName)\r\n      if (exprNode.isEmpty) throw new InvalidSelectValueNameException(exprChoiceName)\r\n      originalTree.findChild(treePath) match {\r\n        case Some(exprChoiceNode: ExprChoiceNode) =>\r\n          originalTree.replace(treePath, exprNode.get)\r\n        case other => throw new InvalidSelectTargetException(other)\r\n      }\r\n    }\r\n  }\r\n\r\n  case class SelectTypeAction(\r\n    override val originalTree: OuterNode,\r\n    override val treePath: List[Int],\r\n    typeChoiceName: String\r\n  ) extends Action(originalTree, treePath) {\r\n    override lazy val newTree: OuterNode = {\r\n      val typeNode = TypeNode.fromTypeName(typeChoiceName)\r\n      if (typeNode.isEmpty) throw new InvalidSelectValueNameException(typeChoiceName)\r\n      originalTree.findChild(treePath) match {\r\n        case Some(typeChoiceNode: TypeChoiceNode) =>\r\n          originalTree.replace(treePath, typeNode.get)\r\n        case other => throw new InvalidSelectTargetException(other)\r\n      }\r\n    }\r\n  }\r\n\r\n  case class EditLiteralAction(\r\n    override val originalTree: OuterNode,\r\n    override val treePath: List[Int],\r\n    newLiteralText: String\r\n  ) extends Action(originalTree, treePath) {\r\n    override lazy val newTree: OuterNode = originalTree.findChild(treePath) match {\r\n      case Some(literalNode: LiteralNode) => originalTree.replace(treePath, LiteralNode(newLiteralText))\r\n      case other                          => throw new InvalidEditTargetException(other)\r\n    }\r\n  }\r\n\r\n  case class DeleteAction(override val originalTree: OuterNode, override val treePath: List[Int])\r\n      extends Action(originalTree, treePath) {\r\n    override lazy val newTree: OuterNode = originalTree.findChild(treePath) match {\r\n      case Some(_: ExprNode)       => originalTree.replace(treePath, ExprChoiceNode())\r\n      case Some(_: TypeNodeParent) => originalTree.replace(treePath, TypeChoiceNode())\r\n      case other                   => throw new InvalidDeleteTargetException(other)\r\n    }\r\n  }\r\n\r\n  case class PasteAction(\r\n    override val originalTree: OuterNode,\r\n    override val treePath: List[Int],\r\n    pasteNodeString: String\r\n  ) extends Action(originalTree, treePath) {\r\n    private val pasteNode: Node = Node.read(pasteNodeString).get\r\n\r\n    override lazy val newTree: OuterNode = originalTree.findChild(treePath) match {\r\n      case Some(_: ExprNode) =>\r\n        pasteNode match {\r\n          case _: ExprNode => originalTree.replace(treePath, pasteNode)\r\n          case _           => throw new InvalidPasteTargetException(Some(pasteNode))\r\n        }\r\n      case Some(_: TypeNodeParent) =>\r\n        pasteNode match {\r\n          case _: TypeNodeParent => originalTree.replace(treePath, pasteNode)\r\n          case _                 => throw new InvalidPasteTargetException(Some(pasteNode))\r\n        }\r\n      case other => throw new InvalidPasteTargetException(other)\r\n    }\r\n  }\r\n\r\n  case class IdentityAction(override val originalTree: OuterNode, override val treePath: List[Int])\r\n      extends Action(originalTree, treePath) {\r\n    override lazy val newTree: OuterNode = originalTree\r\n  }\r\n\r\n  class ActionInvocationException(message: String) extends Exception(message)\r\n\r\n  class InvalidSelectTargetException(found: Option[Node]) extends Exception(s\"Invalid select target: $found\")\r\n\r\n  class InvalidSelectValueNameException(valueName: String) extends Exception(s\"Invalid select value name: $valueName\")\r\n\r\n  class InvalidEditTargetException(found: Option[Node]) extends Exception(s\"Invalid literal edit target: $found\")\r\n\r\n  class InvalidDeleteTargetException(found: Option[Node]) extends Exception(s\"Invalid delete target: $found\")\r\n\r\n  class InvalidPasteTargetException(found: Option[Node]) extends Exception(s\"Invalid paste target: $found\")\r\n}\r\n","mutants":[{"id":"134","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":38,"column":13},"end":{"line":38,"column":39}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Missing parameter for class languages.AbstractActionLanguage$SelectExprAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["130"],"testsCompleted":25},{"id":"135","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":38,"column":13},"end":{"line":38,"column":39}},"status":"Killed","statusReason":"Invalid actions creation should throw an error when not provided with too few extra arguments: TestFailedException was thrown during property evaluation. (ActionSpec.scala:626)\n  Message: Expected exception languages.AbstractActionLanguage$ActionInvocationException to be thrown, but java.util.NoSuchElementException was thrown\n  Location: (ActionSpec.scala:625)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    actionName = SelectExprAction,\n    extraArgs = List()\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["167"],"testsCompleted":55},{"id":"136","mutatorName":"MethodExpression","replacement":"remainingExtraArgs.nonEmpty","location":{"start":{"line":38,"column":13},"end":{"line":38,"column":39}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Missing parameter for class languages.AbstractActionLanguage$SelectExprAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["130"],"testsCompleted":25},{"id":"137","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":47,"column":43},"end":{"line":47,"column":82}},"status":"Survived","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"testsCompleted":30},{"id":"138","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":23,"column":70},"end":{"line":23,"column":99}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"139","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":68,"column":11},"end":{"line":68,"column":27}},"status":"Killed","statusReason":"Let behaviour is correct with actions: Invalid select value name: Num","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["47"],"testsCompleted":16},{"id":"140","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":68,"column":11},"end":{"line":68,"column":27}},"status":"Killed","statusReason":"SelectExprAction should throw an error if the expression kind is not defined in the language: TestFailedException was thrown during property evaluation. (ActionSpec.scala:152)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectValueNameException to be thrown, but java.util.NoSuchElementException was thrown\n  Location: (ActionSpec.scala:149)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    langName = LRec,\n    exprName = fake\n  )","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["148"],"testsCompleted":71},{"id":"141","mutatorName":"MethodExpression","replacement":"exprNode.nonEmpty","location":{"start":{"line":68,"column":11},"end":{"line":68,"column":27}},"status":"Killed","statusReason":"Let behaviour is correct with actions: Invalid select value name: Num","coveredBy":["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["47"],"testsCompleted":16},{"id":"142","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":11,"column":69},"end":{"line":11,"column":104}},"status":"Survived","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"testsCompleted":65},{"id":"143","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":84,"column":11},"end":{"line":84,"column":27}},"status":"Killed","statusReason":"SelectTypeAction should replace a root TypeChoiceNode with selection: InvalidSelectValueNameException was thrown during property evaluation. (ActionSpec.scala:173)\n  Message: Invalid select value name: IntType\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    typeChoiceName = IntType\n  )\n\nSelectTypeAction should replace a nested TypeChoiceNode with selection: InvalidSelectValueNameException was thrown during property evaluation. (ActionSpec.scala:209)\n  Message: Invalid select value name: IntType\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeChoiceNode()), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\")))))),\n    treePath = List(1),\n    typeChoiceName = IntType,\n    result = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeNode(\"IntType\", List())), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\"))))))\n  )\n\nSelectTypeAction should throw an error when attempting to replace something other than a TypeChoiceNode: TestFailedException was thrown during property evaluation. (ActionSpec.scala:232)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectTargetException to be thrown, but languages.AbstractActionLanguage$InvalidSelectValueNameException was thrown\n  Location: (ActionSpec.scala:231)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Num\", List(LiteralNode(\"1\"))),\n    treePath = List(),\n    typeChoiceName = IntType\n  )","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["149","150","151"],"testsCompleted":30},{"id":"144","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":84,"column":11},"end":{"line":84,"column":27}},"status":"Killed","statusReason":"SelectTypeAction should throw an error if the type kind is not defined in the language: TestFailedException was thrown during property evaluation. (ActionSpec.scala:245)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectValueNameException to be thrown, but java.util.NoSuchElementException was thrown\n  Location: (ActionSpec.scala:240)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    typeName = fake\n  )","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["152"],"testsCompleted":30},{"id":"145","mutatorName":"MethodExpression","replacement":"typeNode.nonEmpty","location":{"start":{"line":84,"column":11},"end":{"line":84,"column":27}},"status":"Killed","statusReason":"SelectTypeAction should replace a root TypeChoiceNode with selection: InvalidSelectValueNameException was thrown during property evaluation. (ActionSpec.scala:173)\n  Message: Invalid select value name: IntType\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    typeChoiceName = IntType\n  )\n\nSelectTypeAction should replace a nested TypeChoiceNode with selection: InvalidSelectValueNameException was thrown during property evaluation. (ActionSpec.scala:209)\n  Message: Invalid select value name: IntType\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeChoiceNode()), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\")))))),\n    treePath = List(1),\n    typeChoiceName = IntType,\n    result = VariableNode(\"Lambda\", List(LiteralNode(\"x\"), SubTypeNode(TypeNode(\"IntType\", List())), SubExprNode(VariableNode(\"Var\", List(LiteralNode(\"x\"))))))\n  )\n\nSelectTypeAction should throw an error when attempting to replace something other than a TypeChoiceNode: TestFailedException was thrown during property evaluation. (ActionSpec.scala:232)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectTargetException to be thrown, but languages.AbstractActionLanguage$InvalidSelectValueNameException was thrown\n  Location: (ActionSpec.scala:231)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    tree = VariableNode(\"Num\", List(LiteralNode(\"1\"))),\n    treePath = List(),\n    typeChoiceName = IntType\n  )\n\nSelectTypeAction should throw an error if the type kind is not defined in the language: TestFailedException was thrown during property evaluation. (ActionSpec.scala:245)\n  Message: Expected exception languages.AbstractActionLanguage$InvalidSelectValueNameException to be thrown, but java.util.NoSuchElementException was thrown\n  Location: (ActionSpec.scala:240)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    typeName = fake\n  )","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["149","150","151","152"],"testsCompleted":30},{"id":"146","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":5,"column":10},"end":{"line":5,"column":28}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Unknown action name: SelectExprAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["130"],"testsCompleted":25},{"id":"147","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":6,"column":10},"end":{"line":6,"column":28}},"status":"Killed","statusReason":"Can create Actions using createAction should create a SelectTypeAction: Unknown action name: SelectTypeAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["140"],"testsCompleted":55},{"id":"148","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":7,"column":10},"end":{"line":7,"column":29}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Unknown action name: EditLiteralAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["130"],"testsCompleted":25},{"id":"149","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":8,"column":10},"end":{"line":8,"column":24}},"status":"Killed","statusReason":"Can create Actions using createAction should create a DeleteAction: Unknown action name: DeleteAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["142"],"testsCompleted":55},{"id":"150","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":9,"column":10},"end":{"line":9,"column":23}},"status":"Killed","statusReason":"Can create Actions using createAction should create a PasteAction: Unknown action name: PasteAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["143"],"testsCompleted":55},{"id":"151","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":10,"column":10},"end":{"line":10,"column":26}},"status":"Killed","statusReason":"Can create Actions using createAction should create an IdentityAction: ActionInvocationException was thrown during property evaluation. (ActionSpec.scala:70)\n  Message: Unknown action name: IdentityAction\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    node = VariableNode(\"Plus\", List(SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"1\")))), SubExprNode(VariableNode(\"Times\", List(SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"2\")))), SubExprNode(VariableNode(\"Num\", List(LiteralNode(\"3\")))))))))\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["144"],"testsCompleted":55},{"id":"152","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":46,"column":9},"end":{"line":46,"column":36}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Too many parameters for class languages.AbstractActionLanguage$SelectExprAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["130"],"testsCompleted":25},{"id":"153","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":46,"column":9},"end":{"line":46,"column":36}},"status":"Killed","statusReason":"Invalid actions creation should throw an error when provided with too many extra arguments: TestFailedException was thrown during property evaluation. (ActionSpec.scala:643)\n  Message: Expected exception languages.AbstractActionLanguage$ActionInvocationException to be thrown, but no exception was thrown\n  Location: (ActionSpec.scala:642)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    actionName = SelectExprAction,\n    extraArgs = List(Eq, foo)\n  )","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["168"],"testsCompleted":55},{"id":"154","mutatorName":"MethodExpression","replacement":"remainingExtraArgs.isEmpty","location":{"start":{"line":46,"column":9},"end":{"line":46,"column":36}},"status":"Killed","statusReason":"IfThenElse behaviour is correct when using actions: Too many parameters for class languages.AbstractActionLanguage$SelectExprAction","coveredBy":["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"killedBy":["130"],"testsCompleted":25},{"id":"155","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":44,"column":53},"end":{"line":44,"column":101}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"156","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":53,"column":64},"end":{"line":53,"column":114}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"157","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":30,"column":59},"end":{"line":30,"column":99}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"158","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":39,"column":47},"end":{"line":39,"column":84}},"status":"Survived","coveredBy":["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"testsCompleted":30}],"language":"scala"},"src/main/scala/languages/LLam.scala":{"source":"package languages\r\n\r\nimport scalatags.Text\r\nimport scalatags.Text.TypedTag\r\nimport scalatags.Text.all.*\r\n\r\nimport scala.collection.immutable.List\r\n\r\nclass LLam extends LLet {\r\n  // expressions\r\n  case class Apply(e1: Expr, e2: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = e1.eval(env) match {\r\n      case v1: FunctionValue => v1.evalApply(e2.eval(env))\r\n      case v1                => ApplyToNonFunctionError(v1)\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = e1.typeCheck(tEnv) match {\r\n      case t1: FunctionType => t1.typeOfApply(e2.typeCheck(tEnv))\r\n      case t1               => ApplyToNonFunctionErrorType(t1)\r\n    }\r\n\r\n    override def getChildrenEval(env: Env = Map()): List[(Term, Env)] = (e1.eval(env), e2.eval(env)) match {\r\n      case (v1: FunctionValue, v2) => List((e1, env), (e2, env), v1.getFunctionEvaluation(v2))\r\n      case _                       => List((e1, env), (e2, env))\r\n    }\r\n\r\n    override def prettyPrint: String = s\"((${e1.prettyPrint}) ${e2.prettyPrint})\"\r\n  }\r\n\r\n  case class Lambda(v: Literal, typ: Type, e: Expr) extends Expr {\r\n    override def evalInner(env: Env): Value = v match {\r\n      case LiteralIdentifier(identifier) => LambdaV(identifier, typ, e, env)\r\n      case _                             => InvalidIdentifierEvalError(v)\r\n    }\r\n\r\n    override def typeCheckInner(tEnv: TypeEnv): Type = v match {\r\n      case LiteralIdentifier(identifier) => Func(typ, e.typeCheck(tEnv + (identifier -> typ)))\r\n      case _                             => InvalidIdentifierTypeError(v)\r\n    }\r\n\r\n    override def getChildrenBase(env: Env): List[(Term, Env)] =\r\n      List((v, env), (typ, env), (e, env + (v.toString -> PlaceholderValue(typ))))\r\n\r\n    override def getChildrenEval(env: Env): List[(Term, Env)] = Nil\r\n\r\n    override def getChildrenTypeCheck(tEnv: TypeEnv): List[(Term, TypeEnv)] = List((e, tEnv + (v.toString -> typ)))\r\n\r\n    override def prettyPrint: String = s\"λ$v: ${typ.prettyPrint}. ${e.prettyPrint}\"\r\n  }\r\n\r\n  object Lambda {\r\n    def apply(v: Variable, typ: Type, e: Expr): Lambda = new Lambda(Literal.fromString(v), typ, e)\r\n  }\r\n\r\n  // types\r\n  trait FunctionType extends Type {\r\n    def typeOfApply(argType: Type): Type\r\n  }\r\n\r\n  case class Func(in: Type, out: Type) extends FunctionType {\r\n    override def typeOfApply(argType: Type): Type = if (argType == in) {\r\n      out\r\n    } else {\r\n      IncompatibleTypeErrorType(in, argType)\r\n    }\r\n\r\n    override lazy val valueText: TypedTag[String] = div(in.toHtml, raw(\" → \"), out.toHtml)\r\n\r\n    override def prettyPrint: String = s\"(${in.prettyPrint} → ${out.prettyPrint})\"\r\n  }\r\n\r\n  case class ApplyToNonFunctionErrorType(wrongType: Type) extends TypeError {\r\n    override val message: String = s\"Cannot apply with left expression being ${wrongType.prettyPrint}\"\r\n\r\n    override def prettyPrint: String = s\"CannotApplyError(${wrongType.prettyPrint})\"\r\n  }\r\n\r\n  case class IncompatibleTypeErrorType(typ1: Type, typ2: Type) extends TypeError {\r\n    override val message: String = s\"mismatched types for applying function (expected $typ1 but got $typ2)\"\r\n\r\n    override def prettyPrint: String = s\"IncompatibleTypes(${typ1.prettyPrint}, ${typ2.prettyPrint})\"\r\n  }\r\n\r\n  // values\r\n  trait FunctionValue extends Value {\r\n    def getFunctionEvaluation(applyValue: Value): (Expr, Env)\r\n\r\n    def evalApply(value: Value): Value\r\n  }\r\n\r\n  case class LambdaV(v: Variable, inputType: Type, e: Expr, env: Env) extends FunctionValue {\r\n    override val typ: Type = Func(inputType, e.typeCheck(envToTypeEnv(env) + (v -> inputType)))\r\n\r\n    override def getFunctionEvaluation(applyValue: Value): (Expr, Env) = (e, env + (v -> applyValue))\r\n\r\n    override def evalApply(value: Value): Value = e.eval(env + (v -> value))\r\n\r\n    override lazy val valueText: TypedTag[String] = div(\r\n      raw(LambdaV(v, TypePlaceholder(inputType.toHtml.toString), ExprPlaceholder(e.toHtml.toString), env).prettyPrint)\r\n    )\r\n\r\n    override def prettyPrint: String = {\r\n      val eString: String = if (e == BlankExprDropDown()) \"?\" else e.prettyPrint\r\n      s\"λ$v: ${inputType.prettyPrint}. $eString\"\r\n    }\r\n  }\r\n\r\n  case class ApplyToNonFunctionError(value: Value) extends EvalError {\r\n    override val message: String = s\"Cannot apply with left expression being ${value.prettyPrint}\"\r\n\r\n    override val typ: Type = ApplyToNonFunctionErrorType(value.typ)\r\n  }\r\n\r\n  case class PlaceholderValue(override val typ: Type) extends Value {\r\n    override def isPlaceholder: Boolean = true\r\n\r\n    override def prettyPrint: String = \"?\"\r\n  }\r\n\r\n  override def calculateExprClassList: List[Class[Expr]] = {\r\n    super.calculateExprClassList ++ List(classOf[Lambda], classOf[Apply]).map(_.asInstanceOf[Class[Expr]])\r\n  }\r\n\r\n  override def calculateTypeClassList: List[Class[Type]] = {\r\n    super.calculateTypeClassList ++ List(classOf[Func]).map(_.asInstanceOf[Class[Type]])\r\n  }\r\n}\r\n\r\nobject LLam extends LLam {}\r\n","mutants":[{"id":"506","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":61,"column":57},"end":{"line":61,"column":70}},"status":"Killed","statusReason":"Apply results in error when the right side does not match the function input type: TestFailedException was thrown during property evaluation. (LLamTest.scala:90)\n  Message: IntType() was not an instance of languages.LLam$IncompatibleTypeErrorType, but an instance of languages.LArith$IntType\n  Location: (LLamTest.scala:89)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    expr = Apply(Lambda(x,IntType(),Plus(Var(x),Num(1))),Bool(true))\n  )","coveredBy":["0","1","2","3","4","5","6","7","8","9","78","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["220"],"testsCompleted":75},{"id":"507","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":61,"column":57},"end":{"line":61,"column":70}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@6cfbbff7 did not equal Func(IntType(), IntType())\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@30db5536) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","78","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"508","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":61,"column":65},"end":{"line":61,"column":67}},"status":"Killed","statusReason":"Rec type-checks correctly: languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@45b32dfe did not equal Func(IntType(), IntType())\n\nApplying with Rec type-checks correctly: ApplyToNonFunctionErrorType(languages.LRec$RecursiveFunctionExpressionOutTypeMismatch@136ccbfe) did not equal IntType()","coveredBy":["0","1","2","3","4","5","6","7","8","9","78","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["0","3"],"testsCompleted":10},{"id":"509","mutatorName":"ConditionalExpression","replacement":"true","location":{"start":{"line":103,"column":33},"end":{"line":103,"column":57}},"status":"Killed","statusReason":"Lambda pretty prints correctly: \"λx: Int. [?]\" did not equal \"λx: Int. [(x + 1)]\"","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["230"],"testsCompleted":64},{"id":"510","mutatorName":"ConditionalExpression","replacement":"false","location":{"start":{"line":103,"column":33},"end":{"line":103,"column":57}},"status":"Survived","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":64},{"id":"511","mutatorName":"EqualityOperator","replacement":"!=","location":{"start":{"line":103,"column":35},"end":{"line":103,"column":37}},"status":"Killed","statusReason":"Lambda pretty prints correctly: \"λx: Int. [?]\" did not equal \"λx: Int. [(x + 1)]\"","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["230"],"testsCompleted":64},{"id":"512","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":103,"column":59},"end":{"line":103,"column":62}},"status":"Survived","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":64},{"id":"513","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":48,"column":40},"end":{"line":48,"column":84}},"status":"Killed","statusReason":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name: TestFailedException was thrown during property evaluation. (NodeHTMLSpec.scala:240)\n  Message: List() had size 0 instead of expected size 1\n  Location: (NodeHTMLSpec.scala:234)\n  Occurred at table row 0 (zero based, not counting headings), which had values (\n    mode = Edit\n  )\n\nbe correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name: List() had size 0 instead of expected size 1","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["193","207"],"testsCompleted":44},{"id":"514","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":67,"column":72},"end":{"line":67,"column":77}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":95},{"id":"515","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":117,"column":40},"end":{"line":117,"column":43}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":74},{"id":"516","mutatorName":"BooleanLiteral","replacement":"false","location":{"start":{"line":115,"column":43},"end":{"line":115,"column":47}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":74},{"id":"517","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":109,"column":36},"end":{"line":109,"column":99}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":30},{"id":"518","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":69,"column":40},"end":{"line":69,"column":83}},"status":"Killed","statusReason":"Lambda pretty prints correctly: \"λf: []. λx: Int. ((f) ((f)...\" did not equal \"λf: [(Int → Int)]. λx: Int. ((f) ((f)...\"\n\nApply pretty prints correctly: \"((λf: []. λx: Int. ((f) ((f)...\" did not equal \"((λf: [(Int → Int)]. λx: Int. ((f) ((f)...\"\n\nFunc pretty prints correctly: \"[]\" did not equal \"[(Int → Int)]\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["230","231","232"],"testsCompleted":30},{"id":"519","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":104,"column":7},"end":{"line":104,"column":49}},"status":"Killed","statusReason":"Lambda pretty prints correctly: \"[]\" did not equal \"[λx: Int. (x + 1)]\"","coveredBy":["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["230"],"testsCompleted":64},{"id":"520","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":73,"column":36},"end":{"line":73,"column":103}},"status":"Survived","coveredBy":["0","1","2","3","4","5","6","7","8","9","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":30},{"id":"521","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":79,"column":36},"end":{"line":79,"column":108}},"status":"Survived","coveredBy":["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"testsCompleted":20},{"id":"522","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":81,"column":40},"end":{"line":81,"column":102}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"523","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":75,"column":40},"end":{"line":75,"column":85}},"status":"Ignored","statusReason":"This is a 'static' mutant and can not be tested. If you still want to have this mutant tested, change your code to make this value initialize each time it is called.","static":true},{"id":"524","mutatorName":"StringLiteral","replacement":"\"\"","location":{"start":{"line":27,"column":40},"end":{"line":27,"column":82}},"status":"Killed","statusReason":"Rec pretty prints correctly: \"...0) then 1 else (n × []))\" did not equal \"...0) then 1 else (n × [((factorial) (n + -1))]))\"","coveredBy":["0","1","2","3","4","5","6","7","8","9","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232"],"killedBy":["9"],"testsCompleted":10}],"language":"scala"}},"testFiles":{"languages/NodeTreeTest.scala":{"tests":[{"id":"25","name":"Can correctly represent a complete simple addition tree"},{"id":"26","name":"Can correctly represent a simple arithmetic tree with a literal field open"},{"id":"27","name":"Can correctly represent an arithmetic tree with an unselected sub-expression"},{"id":"28","name":"Can correctly read a VariableNode with 2 VariableNode children from a String"},{"id":"29","name":"Can correctly read a VariableNode with a VariableNode and a VariableNode with a ExprChoiceNode child from a String"},{"id":"30","name":"Can correctly read a VariableNode with a ExprChoiceNode"},{"id":"31","name":"Can correctly read a VariableNode with a LiteralNode"},{"id":"32","name":"Created Node trees have correct parents"},{"id":"33","name":"Can correctly read the parents of a Node tree"},{"id":"34","name":"Can correctly replace a ExprChoiceNode"},{"id":"35","name":"Correctly read expression from VariableNode with all children completed"},{"id":"36","name":"Correctly read expression from VariableNode with incomplete or incorrect literal values"},{"id":"37","name":"Nested TypeNodes have correct tree paths"}]},"languages/LLetTest.scala":{"tests":[{"id":"38","name":"Var correctly type-checks with simple environment"},{"id":"39","name":"Var correctly type-checks with big environment"},{"id":"40","name":"Var correctly evaluates with simple environment"},{"id":"41","name":"Var correctly evaluates with big environment"},{"id":"42","name":"Let with single Let in expression type-checks correctly"},{"id":"43","name":"Let with single Let in expression evaluates correctly"},{"id":"44","name":"Let with multiple Lets in expression type-checks correctly"},{"id":"45","name":"Let with multiple Lets in expression evaluates correctly"},{"id":"46","name":"Var results an error when variable not found"},{"id":"47","name":"Let behaviour is correct with actions"},{"id":"48","name":"Invalid variable names result in an error"},{"id":"49","name":"Edit tree with bound variables is correct with IfThenElse in edit mode"},{"id":"50","name":"If the assign expression in a Let is an error, then that error is returned"},{"id":"51","name":"Var pretty prints correctly"},{"id":"52","name":"Let pretty prints correctly"},{"id":"53","name":"Let has the correct children"}]},"languages/LArithTest.scala":{"tests":[{"id":"79","name":"Num type-checks to IntType"},{"id":"80","name":"Num correctly evaluates to NumV"},{"id":"81","name":"Plus type-checks correctly"},{"id":"82","name":"Plus evaluates correctly"},{"id":"83","name":"Times type-checks correctly"},{"id":"84","name":"Times evaluates correctly"},{"id":"85","name":"0-depth nested arithmetic operations type-checks correctly"},{"id":"86","name":"0-depth nested arithmetic operations evaluates correctly"},{"id":"87","name":"1-depth nested arithmetic operations type-checks correctly"},{"id":"88","name":"1-depth nested arithmetic operations evaluates correctly"},{"id":"89","name":"2-depth nested arithmetic operations type-checks correctly"},{"id":"90","name":"2-depth nested arithmetic operations evaluates correctly"},{"id":"91","name":"3-depth nested arithmetic operations type-checks correctly"},{"id":"92","name":"3-depth nested arithmetic operations evaluates correctly"},{"id":"93","name":"4-depth nested arithmetic operations type-checks correctly"},{"id":"94","name":"4-depth nested arithmetic operations evaluates correctly"},{"id":"95","name":"5-depth nested arithmetic operations type-checks correctly"},{"id":"96","name":"5-depth nested arithmetic operations evaluates correctly"},{"id":"97","name":"6-depth nested arithmetic operations type-checks correctly"},{"id":"98","name":"6-depth nested arithmetic operations evaluates correctly"},{"id":"99","name":"Commutativity of expressions"},{"id":"100","name":"Identity expressions have no effect"},{"id":"101","name":"Arithmetic expressions should print appropriately"},{"id":"102","name":"Children of arithmetic expressions is accurate"},{"id":"103","name":"Num with non-integer literal inputs results in errors"},{"id":"104","name":"Num with integer literal inputs is correctly interpreted"},{"id":"105","name":"Num can accept integers at least 100 digits long"},{"id":"106","name":"Plus and Times pass errors on"},{"id":"107","name":"Attempting to evaluate an expression not defined in LArith results in an error"},{"id":"108","name":"Num should pretty print correctly"},{"id":"109","name":"Plus should pretty print correctly"},{"id":"110","name":"Times should pretty print correctly"},{"id":"111","name":"Mixed Plus and Times should pretty print correctly"},{"id":"112","name":"NumV should pretty print correctly"},{"id":"113","name":"IntType should pretty print correctly"}]},"languages/ReadExprTest.scala":{"tests":[{"id":"75","name":"can load a simple addition of 2 numbers using LArith correctly"},{"id":"76","name":"can load an LArith expression with multiple nested operations correctly"},{"id":"77","name":"can load an LArith expression with a very large integer literal"}]},"languages/NodeHTMLSpec.scala":{"tests":[{"id":"169","name":"be correct with single node tree should root should have subtree and axiom classes"},{"id":"170","name":"be correct with single node tree should root should have an empty 'data-tree-path' attribute"},{"id":"171","name":"be correct with single node tree should root should have the correct 'data-node-string'"},{"id":"172","name":"be correct with single node tree should have a child '.expr' div should should exist"},{"id":"173","name":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should exist"},{"id":"174","name":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have 'text' input type"},{"id":"175","name":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct 'data-tree-path'"},{"id":"176","name":"be correct with single node tree should have a child '.expr' div should contain a div which contains an input should should have the correct value"},{"id":"177","name":"be correct with single node tree should have a child '.expr' div should contain a result div should have eval results in edit and eval modes should should exist"},{"id":"178","name":"be correct with single node tree should have a child '.expr' div should contain a result div should have type-check results in type-check mode should should exist"},{"id":"179","name":"be correct with single node tree should have a child '.annotation-axiom' div should should exist"},{"id":"180","name":"be correct with single node tree should have a child '.annotation-axiom' div should should have no children"},{"id":"181","name":"be correct with single node tree should have a child '.annotation-axiom' div should should have the correct text"},{"id":"182","name":"be correct with a complex node tree should root should have '.subtree' class, but no '.axiom' class"},{"id":"183","name":"be correct with a complex node tree should root should have the correct 'data-tree-path'"},{"id":"184","name":"be correct with a complex node tree should root should have the correct 'data-node-string'"},{"id":"185","name":"be correct with a complex node tree should root should have a correct '.node' div should should exist"},{"id":"186","name":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.expr' div"},{"id":"187","name":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.eval-result' div in edit/eval mode"},{"id":"188","name":"be correct with a complex node tree should root should have a correct '.node' div should should contain a '.type-check-result' div in type-checking mode"},{"id":"189","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should root should have two subtrees"},{"id":"190","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should not be an axiom"},{"id":"191","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should match the node"},{"id":"192","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an '.expr' div"},{"id":"193","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have an input for the lambda variable name"},{"id":"194","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should have two subtrees"},{"id":"195","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should be an axiom"},{"id":"196","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should left subtree (IntType) should match the node"},{"id":"197","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should not be an axiom"},{"id":"198","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should left subtree should have correct subtrees should right subtree (Plus(Var(x), Num(1))) should match the node"},{"id":"199","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should be an axiom"},{"id":"200","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have 'data-tree-path' equal to '1'"},{"id":"201","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have the correct 'data-node-string'"},{"id":"202","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.expr' div"},{"id":"203","name":"be correct with a complex node tree should subtrees in edit/type-checking mode should right subtree should have an '.annotation-axiom' div"},{"id":"204","name":"be correct with a complex node tree should subtrees in eval mode should be three subtrees"},{"id":"205","name":"be correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should be an axiom"},{"id":"206","name":"be correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should match the node"},{"id":"207","name":"be correct with a complex node tree should subtrees in eval mode should have correct left subtree (Lambda(x, IntType(), Plus(Var(x), Num(1))) should have an input for the lambda variable name"},{"id":"208","name":"be correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should be an axiom"},{"id":"209","name":"be correct with a complex node tree should subtrees in eval mode should have correct middle subtree (Num(-4)) should match the node"},{"id":"210","name":"be correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should not be an axiom"},{"id":"211","name":"be correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should be a phantom"},{"id":"212","name":"be correct with a complex node tree should subtrees in eval mode should have correct right subtree (phantom apply) should have correct subtrees"}]},"languages/NodeSpec.scala":{"tests":[{"id":"54","name":"Node parent should be none for root node"},{"id":"55","name":"Node parent should be the root node for first level children"},{"id":"56","name":"Node parent should be the first level children for the second level children"},{"id":"57","name":"Node parent should be the second level children for the third level children"},{"id":"58","name":"VariableNode should create a new node from an expression name"},{"id":"59","name":"VariableNode should correctly convert from an expression (without types)"},{"id":"60","name":"VariableNode should correctly convert from an expression (with types)"},{"id":"61","name":"VariableNode should correctly return its expression"},{"id":"62","name":"VariableNode should correctly return its depth"},{"id":"63","name":"SubExprNode should correctly return its parent"},{"id":"64","name":"SubExprNode should not be able to have a TypeNode as a parent"},{"id":"65","name":"SubExprNode should cannot be a root node"},{"id":"66","name":"TypeNode should convert to HTML without error with multiple levels"},{"id":"67","name":"TypeNode should be able to parse types from strings"},{"id":"68","name":"TypeNode should correctly convert from a type"},{"id":"69","name":"TypeNode should correctly convert to and from a string"},{"id":"70","name":"LiteralNode should correctly convert to and from a string without escapes"},{"id":"71","name":"LiteralNode should correctly convert to and from a string with escapes"},{"id":"72","name":"Tree paths should return the correct child"},{"id":"73","name":"Tree paths should error on invalid paths"},{"id":"74","name":"Tree paths should string is correctly interpreted"}]},"app/RouteSpec.scala":{"tests":[{"id":"233","name":"The start-node-blank endpoint should handle POST requests should return a successful response"},{"id":"234","name":"The start-node-blank endpoint should handle POST requests should return a response with nodeString and html fields for requests with a langName parameter"},{"id":"235","name":"The start-node-blank endpoint should handle POST requests should return a response where nodeString is ExprChoiceNode() for requests with a valid langName parameter"},{"id":"236","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should has at least 1 div"},{"id":"237","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should has a subtree + axiom div with the correct node string data"},{"id":"238","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should has only one subtree div"},{"id":"239","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a blank tree-path"},{"id":"240","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a child .expr div"},{"id":"241","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the subtree has a child .expr div which has a child .expr-dropdown select"},{"id":"242","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should there is only one .expr-dropdown select"},{"id":"243","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the .expr-dropdown select's first option has a blank value"},{"id":"244","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the .expr-dropdown select has multiple options"},{"id":"245","name":"The start-node-blank endpoint should handle POST requests should return valid HTML that should the contents of the .scoped-variables div should be empty"},{"id":"246","name":"The get-lang-selector endpoint should handle GET requests should return a successful response"},{"id":"247","name":"The get-lang-selector endpoint should handle GET requests should return a response with langSelectorHtml field"},{"id":"248","name":"The get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should has no divs"},{"id":"249","name":"The get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should has a single select element"},{"id":"250","name":"The get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should the select element has an option for each language"},{"id":"251","name":"The get-lang-selector endpoint should handle GET requests should return a response with a valid langSelectorHtml field should each option in the select has value and text matching the languages in order"},{"id":"252","name":"The process-action endpoint should handle POST requests should return a successful response"},{"id":"253","name":"The process-action endpoint should handle POST requests should return a response with nodeString and html fields"},{"id":"254","name":"The process-action endpoint should handle POST requests should return a response with correct nodeString"},{"id":"255","name":"The process-action endpoint should handle POST requests should return consistent responses"},{"id":"256","name":"The process-action endpoint should handle POST requests should accept requests with 'edit', 'type-check', and 'eval' modes"},{"id":"257","name":"The process-action endpoint should handle POST requests should return an error response for an invalid language"},{"id":"258","name":"The process-action endpoint should handle POST requests should return an error response for an invalid display mode"},{"id":"259","name":"The process-action endpoint should handle POST requests should return an error response for an invalid action kind"},{"id":"260","name":"The process-action endpoint should handle POST requests should return an error response for an invalid node string"},{"id":"261","name":"The GET requests should return appropriate files should return the index.html file for the '/' path"},{"id":"262","name":"The GET requests should return appropriate files should return the 'images/zoom_to_fit.svg' file"},{"id":"263","name":"The GET requests should return appropriate files should return the contents of 'dist/bundle.js'"},{"id":"264","name":"The GET requests should return appropriate files should return 'dist/bundle.js' when requesting 'bundle.js'"},{"id":"265","name":"The GET requests should return appropriate files should does not return contents from '/scripts/'"},{"id":"266","name":"The GET requests should return appropriate files should does not return contents from '/styles/'"},{"id":"267","name":"The GET requests should return appropriate files should does not return contents from '/pages/'"}]},"languages/LRecTest.scala":{"tests":[{"id":"0","name":"Rec type-checks correctly"},{"id":"1","name":"Rec evaluates correctly"},{"id":"2","name":"Rec verifies that its expression matches the reported type"},{"id":"3","name":"Applying with Rec type-checks correctly"},{"id":"4","name":"Applying with Rec evaluates correctly"},{"id":"5","name":"Applying with Rec correctly shows a phantom tree"},{"id":"6","name":"Infinite recursion results in a stack overflow error"},{"id":"7","name":"Infinite recursion in nodes results in a DepthLimitExceededException in evaluation mode"},{"id":"8","name":"Rec returns an error when the function or parameter names are not valid identifiers"},{"id":"9","name":"Rec pretty prints correctly"}]},"languages/LIfTest.scala":{"tests":[{"id":"114","name":"Bool type-checks correctly"},{"id":"115","name":"Bool evaluates correctly"},{"id":"116","name":"BoolV's type is BoolType"},{"id":"117","name":"Basic IfThenElse expressions type-checks correctly"},{"id":"118","name":"Basic IfThenElse expressions evaluates correctly"},{"id":"119","name":"IfThenElse correctly type-checks when both branches have the same type"},{"id":"120","name":"IfThenElse type-checks to an error when the branches have different types"},{"id":"121","name":"IfThenElse type-checks to an error when the condition is not a BoolType"},{"id":"122","name":"Eq type-checks to BoolType when both sides have the same type"},{"id":"123","name":"Eq type-checks to an error when the sides have different types"},{"id":"124","name":"Eq evaluates to an error when the sides have different types"},{"id":"125","name":"Basic Eq expression type-checks correctly"},{"id":"126","name":"Basic Eq expression evaluates correctly"},{"id":"127","name":"Can correctly load expressions in LIf"},{"id":"128","name":"Can create VariableNode for expression kinds in LIf"},{"id":"129","name":"IfThenElse.getChildrenEval returns the appropriate children"},{"id":"130","name":"IfThenElse behaviour is correct when using actions"},{"id":"131","name":"IfThenElse tree can be converted to HTML without error"},{"id":"132","name":"Plus and Times return an error when given an argument other than a NumV"},{"id":"133","name":"Bool returns an error when given an argument other than a LiteralBool"},{"id":"134","name":"Bool pretty prints correctly"},{"id":"135","name":"Eq pretty prints correctly"},{"id":"136","name":"IfThenElse pretty prints correctly"},{"id":"137","name":"BoolType pretty prints correctly"},{"id":"138","name":"BoolV pretty prints correctly"}]},"app/ArgsHandlingSpec.scala":{"tests":[{"id":"10","name":"Port number should have a default value"},{"id":"11","name":"Port number should be settable"},{"id":"12","name":"Port number should not allow invalid port values"},{"id":"13","name":"Port number should be settable by command line argument"},{"id":"14","name":"Port number should cause an error with invalid command line argument"},{"id":"15","name":"Binding address should have a default value"},{"id":"16","name":"Binding address should be settable"},{"id":"17","name":"Binding address should not allow invalid addresses"},{"id":"18","name":"Binding address should remove leading zeroes"},{"id":"19","name":"Binding address should be settable by command line argument"},{"id":"20","name":"Binding address should cause an error with invalid command line argument"},{"id":"21","name":"Skip bundle scripts option should default to false"},{"id":"22","name":"Skip bundle scripts option should be settable"},{"id":"23","name":"Skip bundle scripts option should be settable by command line argument"},{"id":"24","name":"Multiple options should be settable by command line arguments"}]},"languages/LLamTest.scala":{"tests":[{"id":"213","name":"Lambda type-checks correctly"},{"id":"214","name":"Lambda evaluates correctly"},{"id":"215","name":"Lambda correctly type-checks with existing environment"},{"id":"216","name":"Lambda correctly evaluates with existing environment"},{"id":"217","name":"Apply correctly type-checks"},{"id":"218","name":"Apply correctly evaluates"},{"id":"219","name":"Apply results in error when left side is not a function"},{"id":"220","name":"Apply results in error when the right side does not match the function input type"},{"id":"221","name":"Lambda has appropriate children expressions in type-check mode"},{"id":"222","name":"Lambda node behaves appropriately with simple argument type"},{"id":"223","name":"Lambda node behaves appropriately with complex argument type"},{"id":"224","name":"Lambda expression string can be correctly read"},{"id":"225","name":"Lambda is converted to HTML without error"},{"id":"226","name":"Lambda node createAction behaves appropriately with complex argument type"},{"id":"227","name":"Apply node has a third tree shown"},{"id":"228","name":"Apply doesn't show a third child if the left-hand side is not a function"},{"id":"229","name":"Lambda expression has correct environment when editing subexpression"},{"id":"230","name":"Lambda pretty prints correctly"},{"id":"231","name":"Apply pretty prints correctly"},{"id":"232","name":"Func pretty prints correctly"}]},"languages/ActionSpec.scala":{"tests":[{"id":"139","name":"Can create Actions using createAction should create a SelectExprAction"},{"id":"140","name":"Can create Actions using createAction should create a SelectTypeAction"},{"id":"141","name":"Can create Actions using createAction should create an EditLiteralAction"},{"id":"142","name":"Can create Actions using createAction should create a DeleteAction"},{"id":"143","name":"Can create Actions using createAction should create a PasteAction"},{"id":"144","name":"Can create Actions using createAction should create an IdentityAction"},{"id":"145","name":"SelectExprAction should replace a root ExprChoiceNode with selection"},{"id":"146","name":"SelectExprAction should replace a nested ExprChoiceNode with selection"},{"id":"147","name":"SelectExprAction should throw an error when attempting to replace something other than an ExprChoiceNode"},{"id":"148","name":"SelectExprAction should throw an error if the expression kind is not defined in the language"},{"id":"149","name":"SelectTypeAction should replace a root TypeChoiceNode with selection"},{"id":"150","name":"SelectTypeAction should replace a nested TypeChoiceNode with selection"},{"id":"151","name":"SelectTypeAction should throw an error when attempting to replace something other than a TypeChoiceNode"},{"id":"152","name":"SelectTypeAction should throw an error if the type kind is not defined in the language"},{"id":"153","name":"EditLiteralAction should replace the contents of a nested LiteralNode"},{"id":"154","name":"EditLiteralAction should throw an error when attempting to replace something other than a LiteralNode"},{"id":"155","name":"DeleteAction should delete an expr node from a tree"},{"id":"156","name":"DeleteAction should delete a type node from a tree"},{"id":"157","name":"DeleteAction should throws an error when attempting to delete a literal node"},{"id":"158","name":"PasteAction should correctly paste an expr node string into a tree"},{"id":"159","name":"PasteAction should correctly paste a type node string into a tree"},{"id":"160","name":"PasteAction should throws an error when attempting to paste a type node into an expr node"},{"id":"161","name":"PasteAction should throws an error when attempting to paste an expr node into a type node"},{"id":"162","name":"PasteAction should throws an error when attempting to paste into a literal node"},{"id":"163","name":"PasteAction should throws an error when attempting to paste an invalid node string"},{"id":"164","name":"Invalid actions creation should throw an error when attempting to create an action with an invalid action name"},{"id":"165","name":"Invalid actions creation should throw an error when attempting to create an action with an invalid node string"},{"id":"166","name":"Invalid actions creation should throw an error when provided with an invalid tree path"},{"id":"167","name":"Invalid actions creation should throw an error when not provided with too few extra arguments"},{"id":"168","name":"Invalid actions creation should throw an error when provided with too many extra arguments"}]},"languages/ComplexExpressionsTest.scala":{"tests":[{"id":"78","name":"functions with same argument name don't conflict due to scope"}]}},"framework":{"name":"Stryker4s","version":"0.16.0","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2' clip-rule='evenodd' viewBox='0 0 1458 1458'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath fill='%23e74c3c' fill-rule='nonzero' d='M1458 729c0 402.7-326.3 729-729 729S0 1131.7 0 729a729 729 0 0 1 1458 0'/%3E%3Cpath fill-opacity='.3' d='m778.3 1456.2-201.7-201.8 233-105 85-78.7v-64.3l-257-257-44-187-50-208 251.8-82.8 281.2 117.8 380.1 379.2A729 729 0 0 1 778.3 1456z'/%3E%3Cpath fill='%23f1c40f' fill-rule='nonzero' d='M753.4 329.5c41.8 0 74.6 7.8 98 25.4 23.5 18 41.6 44 55 77.1l11.8 28.7 165.7-58.2-14.2-32a343.2 343.2 0 0 0-114.1-144.1C906.2 191 838 172.1 750.7 172.1c-50.8 0-95.6 7.4-134.8 21.5-40 14.7-74 34.8-102.2 60.3a257.7 257.7 0 0 0-65.5 92.7A287.4 287.4 0 0 0 426.1 459c0 72.5 20.7 133.3 61.2 182.7 38.6 47.3 98.3 88 179.8 121.3 42.3 17.5 78.7 33.1 109.3 47a247 247 0 0 1 66.1 41.7 129.5 129.5 0 0 1 33.6 49.3c7.8 20.2 11.2 45.7 11.2 76.4 0 28-4.3 51.8-13.6 71.2a119.9 119.9 0 0 1-34.5 44.2 139.4 139.4 0 0 1-49.4 24.5 222 222 0 0 1-58.7 8c-29.4 0-54.4-3.4-75.2-10.8-20-7-37.1-16-51.2-27.4a147 147 0 0 1-33.8-38.3 253 253 0 0 1-23-48.4l-11-31.4-161.7 60.6 10.8 30.1a370.5 370.5 0 0 0 42 82.8 303 303 0 0 0 69.6 72.7 342 342 0 0 0 99.4 51c37.8 12.7 82 19.2 132.6 19.2 50 0 95.8-8.3 137.6-24.6 42.2-16.5 78.4-39 108.8-67.3a307 307 0 0 0 71.9-100.7 296.5 296.5 0 0 0 25.9-122.2c0-54.3-8.4-100.4-24.2-138.3a298 298 0 0 0-66-98.8 385.3 385.3 0 0 0-93.8-67.2 1108.6 1108.6 0 0 0-106.6-47.5 745.9 745.9 0 0 1-90-39.6 239 239 0 0 1-53.5-37.3 97.4 97.4 0 0 1-24.7-37.6c-5.4-15.5-8-33.4-8-53.6 0-40.9 11.3-71.5 37-90.5 28.5-20.9 65-30.7 109.4-30.7z'/%3E%3Cpath d='M720 0h18v113h-18zm738 738v-18h-113v18h113zm-738 607h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"}},"system":{"ci":false,"os":{"platform":"Windows 11","version":"10.0"},"cpu":{"logicalCores":20},"ram":{"total":1024}},"config":{"mutate":[],"test-filter":[],"base-dir":"D:\\Users\\RIchard\\Documents\\Uni\\Inf\\Project\\ClickDeduce","reporters":["console","html"],"files":[],"excluded-mutations":[],"thresholds":{"high":80,"low":60,"break":0},"dashboard":{"base-url":"https://dashboard.stryker-mutator.io","report-type":"full"},"timeout":5000,"timeout-factor":1.5,"legacy-test-runner":false,"scala-dialect":"scala33","debug":{"log-test-runner-stdout":false,"debug-test-runner":false}}}